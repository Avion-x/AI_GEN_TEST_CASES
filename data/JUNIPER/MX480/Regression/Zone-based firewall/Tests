 Here are 2 regression test cases with python test scripts for Zone-based firewall on MX480 router:

###STARTLIST###
[
{
  "testname": "test_interzone_policies",
  "testcase": {
    "testname": "test_interzone_policies",
    "objective": "Validate interzone security policies are correctly enforced between zones",
    "steps": [
      "1. Configure zones A and B with interzone policy to allow traffic from A to B", 
      "2. Verify hosts in zone A can access resources in zone B",
      "3. Verify hosts in zone B cannot initiate connections to zone A"
    ],
    "test_data": {
      "zoneA_network": "192.168.1.0/24",
      "zoneB_network": "192.168.2.0/24" 
    }
  },
  "testscript": {
    "testname": "test_interzone_policies",
    "objective": "Automated test script to validate interzone policies",
    "file_name": "test_interzone_policies.py",
    "init_scripts": "\"\"\"\npip install paramiko\n\"\"\"",
    "script": "\"\"\"\nimport paramiko\n\n# SSH Connect\nclient = paramiko.SSHClient()\n\n# Verify zone A to zone B connectivity\nstdin, stdout, stderr = client.exec_command('ping 192.168.2.1')\nassert ' 0% packet loss' in stdout.read()\n\n# Verify no connectivity from zone B to zone A\nstdin, stdout, stderr = client.exec_command('ping 192.168.1.1')\nassert '100% packet loss' in stdout.read()\n\"\"\"",
    "run_command": "python test_interzone_policies.py",
    "expected_result": "Script asserts the expected interzone connectivity based on policies"
  }
},
{
  "testname": "test_security_policy",
  "testcase": {
    "testname": "test_security_policy",  
    "objective": "Validate firewall correctly blocks/allows traffic based on security policy rules",
    "steps": [
      "1. Configure security policy to block FTP traffic from zone A",
      "2. Verify FTP connection from zone A is blocked",  
      "3. Verify HTTP connection from zone A still works"
    ],
    "test_data": {
      "zoneA_network":"192.168.1.0/24",
      "zoneB_network":"192.168.2.0/24"
    }
  },

  "testscript": {
    "testname": "test_security_policy",
    "objective": "Automated test script to validate security policy rules",
    "file_name": "test_security_policy.py",
    "init_scripts": "\"\"\"\npip install paramiko ftplib\n\"\"\"",
    "script": "\"\"\"\nimport paramiko \nimport ftplib\n\n# Set up test FTP connection\nftp = ftplib.FTP()\nftp.connect('192.168.2.100')\n\n# Verify FTP is blocked\nassertRaises ftp.login('testuser','testpass')\n     \n# Verify HTTP still works  \nstdin, stdout, stderr = client.exec_command('wget 192.168.2.200')\nassert 'saved' in stdout.read()\n\"\"\"",
    "run_command": "python test_security_policy.py", 
    "expected_result": "Script asserts FTP traffic is blocked but HTTP works based on policy rules"
  }
} 
]
###ENDLIST###