 Here are 2 unit test cases and corresponding Python test code for bootup process testing of the Juniper Networks MX480 router:

## Test Case 1 - Bootup with valid configuration

**Steps:**

1. Power on the MX480 router
2. Verify the system boots up successfully and the Ready LED turns on
3. Verify no errors are logged in the console

```python
import unittest

class MX480BootupTest(unittest.TestCase):

    def test_bootup_valid_config(self):
        # Bootup router
        router.power_on()
        
        # Check Ready LED
        self.assertEqual(router.ready_led, True) 
        
        # Check console logs
        self.assertEqual(router.console_errors, [])
```

## Test Case 2 - Bootup with invalid configuration

**Steps:** 

1. Power on the MX480 router
2. Introduce invalid configuration
3. Verify bootup fails and system halts
4. Verify error is logged in the console

```python
import unittest

class MX480BootupTest(unittest.TestCase):

    def test_bootup_invalid_config(self):
        # Introduce invalid config
        router.set_invalid_config()
        
        # Bootup router
        router.power_on()
        
        # Check Ready LED
        self.assertEqual(router.ready_led, False)

        # Check console for error 
        self.assertIn("Configuration failed", router.console_logs) 
``` Here are 2 unit test cases with Python code for testing the bootup process on an MX480 router:

**Test Case 1 - Normal Bootup**

Setup:
- Power off the MX480 router

Test:
- Power on the MX480 router
- Verify the bootup messages are displayed on console
- Verify the router finishes booting up successfully 

Teardown:
- Power off the MX480 router

```python
import re
import pexpect

def test_normal_bootup():
    console = pexpect.spawn('telnet <IP_ADDRESS>')
    console.expect('Login:')
    console.sendline('admin')
    console.expect('Password:')
    console.sendline('<PASSWORD>')
    
    # Verify bootup messages
    console.expect(re.escape('Booting kernel')) 
    console.expect('Starting kernel ...')

    # Verify successful bootup
    console.expect('#') 

    console.close()
```

**Test Case 2 - Bootup with Corrupted Firmware**

Setup: 
- Power off the MX480 router
- Corrupt the firmware image on boot device

Test:
- Power on the MX480 router
- Verify bootup fails and error message is displayed

Teardown:
- Power off the MX480 router
- Restore firmware image 

```python
import pexpect

def test_corrupted_firmware_bootup():
    console = pexpect.spawn('telnet <IP_ADDRESS>')
    
    # Verify bootup fails
    console.expect(re.escape('Invalid firmware checksum! Bootup failed.'))

    console.close()  
``` Here are some sample Python 2 unit test cases and test code for the bootup process of the Juniper MX480 router:

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def setUp(self):
        self.router = MX480()

    def test_power_on_self_test(self):
        # Verify POST completes successfully
        self.assertTrue(self.router.power_on_self_test())
    
    def test_load_bios(self):
        # Verify BIOS loads successfully
        self.assertTrue(self.router.load_bios())

    def test_boot_loader(self):
        # Verify boot loader starts successfully
        self.assertTrue(self.router.start_boot_loader())

    def test_load_junos(self):
        # Verify Junos OS loads successfully
        self.assertTrue(self.router.load_junos())

    def test_routing_engine_online(self):
        # Verify routing engines come online
        self.assertTrue(self.router.re_online(0))
        self.assertTrue(self.router.re_online(1))

if __name__ == '__main__':
    unittest.main()
```

The test cases verify the following steps in the MX480 bootup process:

- Power on self test (POST) completes successfully
- BIOS loads successfully
- Boot loader starts up successfully 
- Junos OS loads successfully
- Both routing engines come online

Each test case calls a method on a `MX480` class that would simulate or mock the actual bootup process and return a boolean pass/fail result. The asserts verify the expected result.

This provides a basic framework for unit testing the MX480 bootup process in Python 2. Additional tests could be added to validate other bootup steps or functionality. The `MX480` class would need to be implemented to support the test methods. Here are 2 sample unit test cases and associated Python test code for testing the bootup process on an MX480 router:

**Test Case 1:** Verify basic bootup and connectivity

```python
import unittest
from netmiko import ConnectHandler

class TestMx480Bootup(unittest.TestCase):

    def test_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com', 
            'username': 'testuser',
            'password': 'password123'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command('show version')
        
        # Verify version string exists in output
        self.assertIn('Junos', output)  
        
        # Verify can ping default gateway
        ping = net_connect.send_command('ping 192.0.2.1') 
        self.assertIn('!!!!!', ping)
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

**Test Case 2:** Verify committed configuration loads on reboot

```python 
import unittest
from netmiko import ConnectHandler

class TestMx480Bootup(unittest.TestCase):

    def test_config_persistence(self):
        device = {
          'device_type': 'juniper',
          'host': 'mx480.example.com',
          'username': 'testuser', 
          'password': 'password123'  
        }

        net_connect = ConnectHandler(**device)
        
        # Make config change
        cmd = 'set system ntp server time.example.com'
        output = net_connect.send_config_set(cmd)
        self.assertEqual(output, 'commit complete')
        
        # Reboot device
        net_connect.send_command('request system reboot')
        
        # Reconnect after reboot
        net_connect = ConnectHandler(**device)
        
        # Verify config change persists
        ntp_config = net_connect.send_command('show configuration system ntp')
        self.assertIn('time.example.com', ntp_config)

        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```