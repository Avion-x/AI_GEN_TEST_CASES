 Here are 2 Unit Test Cases and corresponding python test scripts for Bootup process cases for MX480 Router:

###STARTLIST###
[
{
  "testname": "Test Bootup Sequence",
  "testcase": {
    "testname": "Test Bootup Sequence",
    "objective": "Validate router goes through proper bootup sequence", 
    "steps": ["Power on router", "Verify fans spin up", "Verify boot messages on console", "Verify router reaches user exec prompt"]
  },
  "testscript": {
    "testname": "Test Bootup Sequence",
    "objective": "Validate router goes through proper bootup sequence",
    "file_name": "test_bootup.py",
    "init_scripts": [
      "pip install pytest"
    ],
    "script": """
import pytest

def test_bootup():
    # Steps to validate bootup via console output
    assert fans_spin_up == True  
    assert boot_messages_printed == True 
    assert reached_user_exec_prompt == True
""",
    "run_command": "pytest test_bootup.py", 
    "expected_result": "2 passed, 0 failed"
  }
},
{
  "testname": "Test Bootup Time", 
  "testcase": {
    "testname": "Test Bootup Time",
    "objective": "Validate bootup time is under 5 minutes",
    "steps": ["Power on router", "Note start time", "Verify router reaches user exec prompt", "Note end time", "Subtract end time from start time"] 
  },
  "testscript": {
    "testname": "Test Bootup Time",
    "objective": "Validate bootup time is under 5 minutes",
    "file_name": "test_bootup_time.py", 
    "init_scripts": [
      "pip install pytest"
    ],
    "script": """  
import time
import pytest

def test_bootup_time():
    start_time = time.time()  
    # Router bootup steps  
    end_time = time.time()   
    bootup_time = end_time - start_time  
    assert bootup_time <= 300 # seconds
""",
    "run_command": "pytest test_bootup_time.py",
    "expected_result": "1 passed, 0 failed"
  }
}
]
###ENDLIST### Here is the Python 2 unit test case list for Bootup process of the MX480 router:

```python
###STARTLIST###
[
  {
    "testname": "test_bootup", 
    "testcase": {
      "testname": "test_bootup",
      "objective": "Validate bootup process completes successfully",
      "steps": [
        "Power on the router",
        "Verify bootup messages are printed on console", 
        "Validate router transitions to operational state"
      ]
    },
    "testscript": {
      "testname": "test_bootup",
      "objective": "Script to validate bootup process",
      "file_name": "test_bootup.py",
      "init_scripts": "import re\nimport sys\nimport subprocess",
      "script": """
        def test_bootup():
            # Steps to power on router
            power_on_router()
            
            # Verify boot messages using regex
            bootup_messages = get_console_log()
            assert re.search("Booting kernel", bootup_messages)
            
            # Check operational state
            op_state = get_operational_state()  
            assert op_state == "operational"
      """,
      "run_command": "python test_bootup.py",
      "expected_result": "Bootup completed successfully"
    }
  }
]  
###ENDLIST###
```

The above test case checks the bootup process by:

1. Powering on the router
2. Validating bootup messages on console using regex 
3. Checking if router transitions to operational state

The corresponding test script imports necessary packages, defines the test logic, run command and expected result.

I have encapsulated the test case and script within their own JSON objects inside a Python list. Let me know if you need any other test cases!