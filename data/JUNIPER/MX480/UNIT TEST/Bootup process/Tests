 Here are 2 Unit Test Cases and python test scripts for Bootup process for Network MSeries Router MX480:

###STARTLIST###
[
{
  "testname": "Test Bootup Sequence",
  "testcase": {
    "testname": "Test Bootup Sequence",
    "objective": "Validate router bootup sequence completes all steps successfully", 
    "steps": [
      "Power on router",
      "Validate all cards are detected",
      "Validate FPCs come online",
      "Validate kernel bootup messages",
      "Validate daemons start correctly"
    ],
    "test_data": {
      "router_model": "MX480"
    }
  },
  
  "testscript": {
    "testname": "Test Bootup Sequence",
    "objective": "Validate router bootup sequence using unittest",
    "file_name": "test_bootup.py",
    "init_scripts": [
      "import unittest", 
      "from router import Router",
      "r = Router('MX480')"
    ],
    "script": """    
class TestBootup(unittest.TestCase):
    def test_bootup(self):
        self.assertEqual(r.power_on(), True) 
        self.assertEqual(r.detect_cards(), True)  
        self.assertEqual(r.bringup_fpcs(), True)
        self.assertTrue('Kernel booted' in r.get_bootup_logs())  
        self.assertEqual(r.verify_daemons(), [])

if __name__ == '__main__':
    unittest.main()
    """,
    "run_command": "python test_bootup.py",
    "expected_result": "OK"
  }
},

{
  "testname": "Test Console Access", 
  "testcase": {
    "testname": "Test Console Access",
    "objective": "Validate able to access console during bootup",
    "steps": [
      "Connect console cable to router",
      "Power on router", 
      "Check console prints bootup messages",
      "Login to console CLI"
    ],
    "test_data": {
      "console_port": "COM1",
      "login_prompt": "login:"
    }
  },

  "testscript": {
    "testname": "Test Console Access", 
    "objective": "Validate console access using unittest",
    "file_name": "test_console.py",  
    "init_scripts": [
      "import serial",
      "import unittest"
    ],
    "script": """
class TestConsole(unittest.TestCase):
    def test_console(self):
        ser = serial.Serial('COM1')
        self.assertIn('Booting kernel', ser.readline())
        self.assertEqual(ser.readline(), 'login:')
        ser.write('myusername')
        ser.write('mypassword')   
        self.assertIn('Router>', ser.readline())  
        
if __name__ == '__main__':
    unittest.main()
    """,
    "run_command": "python test_console.py", 
    "expected_result": "OK"
  }
}
]

###ENDLIST### Here is the Python list with test cases and test scripts for Bootup process of the MX480, enclosed within the delimiters:

###STARTLIST###
[
  {
    "testname": "Test Bootup Time", 
    "testcase": {
      "testname": "Test Bootup Time",
      "objective": "Validate bootup time is within expected limit",
      "steps": [
        "Power on the device",
        "Note start time", 
        "Check if device is fully booted",
        "Note end time",
        "Validate bootup time is less than 5 minutes"
      ]
    },
    "testscript": {
      "testname": "Test Bootup Time",
      "objective": "Script to validate bootup time", 
      "file_name": "test_bootup.py",
      "init_scripts": "pip install datetime",
      "script": """
        import datetime
        
        start = datetime.datetime.now()
        print("System booted at:", start)
                
        # Add logic to detect system fully booted
                
        end = datetime.datetime.now()
        print("System bootup completed at:", end)
                
        bootup_time = end - start
        print("Total bootup time:", bootup_time)
                
        assert bootup_time.seconds < 300
      """,
      "run_command": "python test_bootup.py",
      "expected_result": "Success if bootup time is less than 5 minutes"  
    }
  },
  {
    "testname": "Test Bootup Sequence",
    "testcase": {
      "testname": "Test Bootup Sequence",
      "objective": "Validate modules loaded in correct bootup sequence",
      "steps": [ 
        "Power on the device", 
        "Check syslog/console for bootup logs",
        "Validate BIOS, u-boot, kernel booted sequentially"
      ]
    },
    "testscript": {
      "testname": "Test Bootup Sequence",
      "objective": "Script to validate bootup sequence",
      "file_name": "test_sequence.py",  
      "init_scripts": "", 
      "script": """ 
        import re
        
        bootup_log = "BIOS started, u-boot started, kernel started..." 
        
        bios_pattern = r"BIOS started"
        uboot_pattern = r"u-boot started"
        kernel_pattern = r"kernel started"
        
        assert re.search(bios_pattern, bootup_log)
        assert re.search(uboot_pattern, bootup_log) 
        assert re.search(kernel_pattern, bootup_log)
        assert bootup_log.find(bios_pattern) < bootup_log.find(uboot_pattern) < bootup_log.find(kernel_pattern)
      """,
      "run_command": "python test_sequence.py",
      "expected_result": "Success if BIOS, u-boot and kernel logs appear in correct sequence"
    }
  } 
]
###ENDLIST###