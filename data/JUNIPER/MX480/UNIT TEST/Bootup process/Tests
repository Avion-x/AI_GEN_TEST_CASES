 Here are 2 unit test cases and corresponding Python test code for bootup process of Juniper Networks MX480 router:

## Test Case 1 - Verify bootup with valid configuration

**Steps:**

1. Power on the MX480 router
2. Verify console prints "Loading configuration from /config/juniper.conf.gz..." 
3. Verify console prints "MX480 booted up successfully"

```python
import unittest
from unittest.mock import patch

class TestMX480Bootup(unittest.TestCase):

    @patch('sys.stdout', new_callable=StringIO)
    def test_bootup_valid_config(self, mock_stdout):
        print("Loading configuration from /config/juniper.conf.gz...")
        print("MX480 booted up successfully")
        
        self.assertIn("Loading configuration from /config/juniper.conf.gz...", mock_stdout.getvalue())
        self.assertIn("MX480 booted up successfully", mock_stdout.getvalue())
```

## Test Case 2 - Handle missing configuration file

**Steps:**

1. Power on the MX480 router
2. Delete /config/juniper.conf.gz file
3. Verify console prints "Error loading configuration file /config/juniper.conf.gz"
4. Verify router boots up with factory default settings

```python 
import unittest
from unittest.mock import patch

class TestMX480Bootup(unittest.TestCase):

    @patch('sys.stdout', new_callable=StringIO)
    def test_missing_config(self, mock_stdout):
        print("Error loading configuration file /config/juniper.conf.gz")  
        print("Booting up with factory default settings...")
        
        self.assertIn("Error loading configuration file /config/juniper.conf.gz", mock_stdout.getvalue())
        self.assertIn("Booting up with factory default settings...", mock_stdout.getvalue())
``` Here are 2 unit test cases for the bootup process of an MX480 router, with Python test code and steps for each:

## Test Case 1 - Normal Bootup

**Setup:**
- Connect console cable to MX480
- Power on MX480

**Execution:**
```python
import re
import pexpect

def test_normal_bootup():
    console = pexpect.spawn('telnet 192.168.1.1')
    console.expect('Login:')
    console.sendline('admin')
    console.expect('Password:')
    console.sendline('password')
    
    # Check for normal bootup messages
    console.expect(re.escape('Booting kernel...'))
    console.expect(re.escape('Starting kernel...'))
    console.expect(re.escape('INIT: Entering runlevel: 3'))
    console.expect('Login:')
    
    console.close()
```

**Verification:**
- Check that all expected bootup messages are seen in order

**Teardown:**
- Power off MX480
- Disconnect console cable

## Test Case 2 - Bootup with Faulty Component

**Setup:**
- Connect console cable to MX480
- Disconnect one Routing Engine to simulate faulty component
- Power on MX480

**Execution:** 
```python
import re
import pexpect

def test_faulty_bootup():
    console = pexpect.spawn('telnet 192.168.1.1')
    console.expect('Login:')
    console.sendline('admin')
    console.expect('Password:') 
    console.sendline('password')

    # Check for failure messages
    console.expect(re.escape('Failure detecting RE presence'))
    console.expect(re.escape('Booting backup Routing Engine'))
    console.expect(re.escape('Loading backup config'))
    console.expect('Login:')
    
    console.close()  
```

**Verification:**
- Check for failure messages related to faulty component
- Verify backup RE is booted instead

**Teardown:** 
- Power off MX480
- Reconnect faulty component
- Disconnect console cable Here are some example Python 2 unit test cases and test code snippets for testing the bootup process of the Juniper MX480 router:

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_timeout(self):
        """Test MX480 bootup completes within 300 seconds"""
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin',
            'password': 'password123',
        }
        
        net_connect = ConnectHandler(**device)
        bootup_time = net_connect.send_command_timing("show system boot-messages")
        
        self.assertLess(bootup_time, 300)

    def test_check_interfaces(self):
        """Test all expected interfaces are up after bootup"""
        expected_interfaces = ["ge-0/0/0", "ge-0/0/1"]
        
        show_ints = net_connect.send_command("show interfaces terse")
        
        for intf in expected_interfaces:
            self.assertIn(intf, show_ints)
            self.assertEqual(intf.split()[1], "up")
            
    def test_check_routing_engine(self):
        """Test correct routing engines are master and backup after bootup"""
        re_status = net_connect.send_command("show chassis routing-engine")
        
        self.assertRegexpMatches(re_status, r"Routing Engine 0 .* Master")
        self.assertRegexpMatches(re_status, r"Routing Engine 1 .* Backup")
        
if __name__ == "__main__":
    unittest.main()
```

This provides some examples of test cases that could be used to validate the bootup process and state of an MX480 router after booting up. The tests check the bootup time, interface status, and routing engine status after bootup. Additional tests could be added to verify other components come up correctly. Here are 2 unit test cases and sample Python test code for testing the bootup process on an MX480 router:

## Test Case 1 - Verify default config loads on bootup

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_default_config_loads(self):
        device = ConnectHandler(device_type='juniper', ip='192.168.1.1', username='admin', password='admin')
        output = device.send_command('show configuration')
        
        # Verify key default config values
        self.assertIn('system { host-name mx480; }', output) 
        self.assertIn('interfaces { ge-0/0/0 { unit 0 { family inet { address 192.168.1.1/24; } } } }', output)
        
        device.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test connects to the router after bootup and verifies that the expected default configuration is present.

## Test Case 2 - Verify startup config applied on bootup 

```python
import unittest 
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_startup_config_applied(self):
        device = ConnectHandler(device_type='juniper', ip='192.168.1.1', username='admin', password='admin')
        output = device.send_command('show configuration')

        # Verify custom config from startup config is applied
        self.assertIn('system { host-name custom-name; }', output)
        self.assertIn('interfaces { ge-0/0/1 { unit 0 { family inet { address 192.168.2.1/24; } } } }', output)

        device.disconnect()
        
if __name__ == '__main__':
    unittest.main() 
```

This test verifies that the expected custom configuration from the startup config is loaded correctly after bootup.