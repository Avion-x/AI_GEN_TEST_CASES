 Here are 2 Unit Test Cases and corresponding Python test scripts for Bootup process for Network MSeries Router MX480:

###STARTLIST###
[
    {
        "testname": "Test Bootup CLI Access", 
        "testcase": {
            "testname": "Test Bootup CLI Access",
            "objective": "Verify CLI access is available after bootup completes",
            "steps": [
                "1. Power on the MX480 router",
                "2. Wait for bootup process to complete",
                "3. Use console cable to connect to CLI",
                "4. Login to CLI using valid credentials",
                "5. Verify login is successful and router# prompt displays"
            ],
            "test_data": {
                "username": "admin",
                "password": "admin123"
            }
        },
        "testscript": {
            "testname": "Test Bootup CLI Access",
            "objective": "Verify CLI access after bootup using paramiko",
            "file_name": "test_bootup_cli_access.py",
            "init_scripts": "pip install paramiko",
            "script": """
                import paramiko
                import time
                
                IP = "192.168.1.1"
                PORT = 22
                USERNAME = "admin"
                PASSWORD = "admin123"
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                
                print("Initiating connection to router")
                ssh.connect(IP, port=PORT, username=USERNAME, password=PASSWORD)
                time.sleep(20)
                
                stdin, stdout, stderr = ssh.exec_command("show version")
                lines = stdout.readlines()
                
                if lines[-1].endswith("router#"):
                    print("Login successful")
                else:
                    print("Login failed")
                    
                ssh.close()
            """,
            "run_command": "python test_bootup_cli_access.py",
            "expected_result": "Login successful"
        }
    },
    {
         "testname": "Test Bootup Syslog",
         "testcase": {
             "testname": "Test Bootup Syslog ",
             "objective": "Verify bootup logs are collected in syslog file",
             "steps": [
                 "1. Clear existing syslog file on MX480",  
                 "2. Power on the MX480 router",
                 "3. Wait for bootup process to complete ",
                 "4. Check syslog file for bootup logs"
             ],
             "test_data": {}
         },
         "testscript": {
             "testname": "Test Bootup Syslog",
             "objective": "Check for bootup logs in syslog using Python",
             "file_name": "test_bootup_syslog.py",
             "init_scripts": "pip install paramiko",
             "script": """
                import paramiko
                import re
                
                IP = "192.168.1.1"
                PORT = 22
                USERNAME = "admin"
                PASSWORD = "admin123"
                
                bootup_logs = ["Starting kernel", "Initializing cgroup subsys cpuset",
                               "Initializing cgroup subsys cpu", "Loading /boot/vmlinuz-3.10.0-957.el7.x86_64"]
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(IP, port=PORT, username=USERNAME, password=PASSWORD)
                
                stdin, stdout, stderr = ssh.exec_command("cat /var/log/messages")
                lines = stdout.readlines()
                
                found = []
                for line in lines:
                    for log in bootup_logs:
                        if re.search(log, line):
                            found.append(log)
                
                if set(found) == set(bootup_logs):
                    print("All bootup logs found")
                else:
                    print("Some bootup logs missing")
                    
                ssh.close()
             """,
             "run_command": "python test_bootup_syslog.py",
             "expected_result": "All bootup logs found"  
         }
     }
 ]
###ENDLIST### Here are 2 detailed Unit Test Cases with python test scripts for Bootup process for the ISR 4321 router:

###STARTLIST###
[
  {
    "testname": "Test Bootup Sequence", 
    "testcase": {
      "testname": "Test Bootup Sequence",
      "objective": "Validate that the router goes through the correct bootup sequence",
      "steps": [
        "Power on the router",
        "Verify POST completes successfully",
        "Verify boot loader is loaded", 
        "Verify IOS image is loaded successfully",
        "Verify router transitions to privileged EXEC mode"
      ],
      "test_data": {
        "router_model": "ISR 4321",
        "ios_image": "isr4300-universalk9.16.06.01.SPA.bin"  
      }
    },
    "testscript": {
      "testname": "Test Bootup Sequence",
      "objective": "Automate validation of bootup sequence",
      "file_name": "test_bootup.py",
      "init_scripts": [
        "pip install pexpect"  
      ],
      "script": """
        import pexpect
        
        ROUTER_IP = "192.168.1.1"
        ROUTER_USERNAME = "admin"
        ROUTER_PASSWORD = "Cisco123"
        
        router = pexpect.spawn(f"ssh {ROUTER_USERNAME}@{ROUTER_IP}")
        router.expect("Password:")
        router.sendline(ROUTER_PASSWORD)
        
        router.expect("#")
        router.sendline("show version")
        version_output = router.before
        
        assert "Cisco IOS XE Software" in version_output
        assert "ISR4321" in version_output
      """,
      "run_command": "python test_bootup.py",
      "expected_result": "Both assertions should pass, indicating successful bootup"
    }
  },
  {
    "testname": "Test Hardware Inventory",
    "testcase": {
      "testname": "Test Hardware Inventory",
      "objective": "Validate hardware components detected accurately after bootup", 
      "steps": [ 
        "Power on the router",
        "Verify POST completes successfully",
        "Execute 'show inventory' command",
        "Verify CPU, RAM, flash and interfaces are listed correctly"   
      ],
      "test_data": {
        "router_model": "ISR 4321",
        "cpu": "1RU A900MHz",  
        "ram": "8GB",
        "flash": "8GB",
        "interfaces": ["GigabitEthernet0/0", "GigabitEthernet0/1"]  
      }
    },
    "testscript": {
      "testname": "Test Hardware Inventory",    
      "objective": "Automate validation of hardware inventory",
      "file_name": "test_inventory.py",
      "init_scripts": [ 
        "pip install pexpect"
      ],
      "script": """
        import re
        import pexpect
        
        ROUTER_IP = "192.168.1.1"
        ROUTER_USERNAME = "admin"
        ROUTER_PASSWORD = "Cisco123"
        
        router = pexpect.spawn(f"ssh {ROUTER_USERNAME}@{ROUTER_IP}") 
        router.expect("Password:")
        router.sendline(ROUTER_PASSWORD)
        
        router.expect("#")
        router.sendline("show inventory")
        inventory_output = router.before
        
        assert re.search("1RU A900MHz", inventory_output)
        assert re.search("8GB", inventory_output) 
        assert re.search("flash:(8|16)GB", inventory_output)
        assert re.search("GigabitEthernet0/0", inventory_output)
        assert re.search("GigabitEthernet0/1", inventory_output)
      """,
      "run_command": "python test_inventory.py", 
      "expected_result": "All assertions should pass, indicating hardware inventory captured correctly"
    }
  } 
]
###ENDLIST### Here is a Python list with JSON objects for test cases and test scripts for Bootup process of the MX480:

###STARTLIST###
[
{"testname": "Test Bootup Sequence", 
"testcase": {
  "testname": "Test Bootup Sequence",
  "objective": "Validate bootup sequence and ensure device reaches operational state",
  "steps": [
    "Power on device",
    "Validate boot messages", 
    "Validate successful loading of configuration",
    "Validate interfaces are operationally up"
  ]
},
"testscript": {
  "testname": "Test Bootup Sequence", 
  "objective": "Script to validate bootup sequence",
  "filename": "test_bootup.py",
  "init_scripts": [
    "pip install paramiko"  
  ],
  "script": """
    import paramiko
    
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect("192.168.0.1")
    
    stdin, stdout, stderr = client.exec_command("show version")
    out = stdout.read()
    assert "Junos version" in out
    
    stdin, stdout, stderr = client.exec_command("show configuration failed") 
    out = stdout.read()
    assert "error: configuration check-out failed" not in out
    
    for intf in ["ge-0/0/0", "ge-0/0/1"]:
      stdin, stdout, stderr = client.exec_command(f"show interfaces {intf} | match Link")  
      out = stdout.read()
      assert "Up" in out
  """,
  "run_command": "python test_bootup.py",
  "expected_result": "All asserts should pass, validating successful bootup"  
}
}
] 
###ENDLIST###