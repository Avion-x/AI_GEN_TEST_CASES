 Here are 2 unit test cases and corresponding Python test code for bootup process testing of Juniper Networks MX480 router:

## Test Case 1 - Verify bootup completes successfully

**Steps:**  
1. Power on the MX480 router
2. Verify the router completes bootup process and enters operational mode

**Expected Result:** 
- Router bootup completes successfully within expected time 
- Router prompt is displayed in operational mode

```python
import re
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_success(self):
        # Bootup router
        router.power_on()
        
        # Verify bootup completion
        self.assertRegex(router.get_prompt(), r'^mx480>')
        
        # Verify operational mode
        self.assertEqual(router.get_mode(), 'operational')
```

## Test Case 2 - Verify bootup failure

**Steps:**
1. Power on the MX480 router
2. Interrupt the bootup process by pressing ESC key multiple times
3. Verify router enters boot menu instead of completing bootup 

**Expected Result:**
- Router enters boot menu instead of completing bootup
- Router prompt is boot menu prompt instead of operational mode prompt

```python 
import re
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_failure(self):
        # Bootup router
        router.power_on()
        
        # Interrupt bootup
        router.press_esc_multiple_times() 
        
        # Verify router enters boot menu
        self.assertRegex(router.get_prompt(), r'^loader>')  

        # Verify not in operational mode
        self.assertNotEqual(router.get_mode(), 'operational')
``` Here are 2 sample unit test cases for testing the bootup process on an MX480 router, with Python test code snippets:

### Test Case 1: Normal Bootup

**Setup:** Power off the MX480 router.

**Execution:** Power on the MX480 router and wait for it to complete the normal bootup process. 

**Verification:** 

```python
import re

with open('boot_log.txt') as f:
    log = f.read()
    
assert re.search('Booting kernel', log) 
assert re.search('Starting system logs', log)
assert re.search('Loading configuration', log)
assert re.search('JUNOS version', log)
assert re.search('Startup completed', log)
```

Confirm that the expected bootup messages are present in the log file.

**Teardown:** None required.

### Test Case 2: Bootup with Corrupted Configuration

**Setup:** 

- Power off the MX480 router.
- Modify the saved configuration to make it invalid.

**Execution:** 

- Power on the MX480 router and wait for it to detect corrupt configuration.
- Router should reboot and load factory default configuration.

**Verification:**

```python 
import re

with open('boot_log.txt') as f:
    log = f.read()
    
assert re.search('Booting kernel', log)
assert re.search('Checking configuration', log) 
assert re.search('Corrupted configuration', log)
assert re.search('Loading factory default', log)  
assert re.search('Startup completed', log)
```

Confirm that the router detected corrupt configuration and booted up with factory defaults.

**Teardown:** 

- Restore original valid configuration. Here are some sample Python 2 unit test cases and test code snippets for testing the bootup process on a Juniper MX480 router:

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_console_access(self):
        """Test console access to MX480"""
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com', 
            'username': 'pyuser',
            'password': 'pypass',
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        # check if bootup completed
        self.assertIn("JUNOS Software Release", output)
        
    def test_login_prompt(self):
        """Test login prompt displays after bootup"""
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com', 
            'username': 'pyuser',
            'password': 'pypass',
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("\n")
        
        # check if username prompt appears
        self.assertIn("login:", output)     

    def test_interfaces_up(self):
        """Test interfaces are up after bootup"""
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'pyuser',
            'password': 'pypass',
        }
    
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show interfaces terse")
        
        # check if all interfaces are up
        self.assertNotIn("down", output)
        
if __name__ == '__main__':
    unittest.main()
```

This implements some basic test cases using the Python unittest framework to validate the MX480 bootup by:

- Checking console access connects 
- Verifying login prompt displays after bootup
- Checking interfaces are up after bootup is complete

The netmiko library is used to simplify connecting to the device and running commands. Additional test cases could be added to validate other aspects of the boot process. Here are 2 sample unit test cases and python test code for testing the bootup process on an MX480 router:

## Test Case 1 - Verify successful bootup

**Steps:**

1. Power on the MX480 router
2. Wait for the system to complete bootup process 
3. Verify console logs show successful completion of bootup without any errors

**Expected Result:** 

- MX480 boots up successfully without any errors in the console logs

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_successful_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480_ip', 
            'username': 'myuser',
            'password': 'password123'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command('show log messages')
        
        self.assertNotIn('error', output.lower(), 'No errors found in log')
        
if __name__ == '__main__':
    unittest.main()
```

## Test Case 2 - Verify bootup time

**Steps:**

1. Power on the MX480 router
2. Note start time of bootup process
3. Wait for system to complete bootup 
4. Note end time of bootup process
5. Verify bootup time is less than 5 minutes

**Expected Result:**

- MX480 router boots up in less than 5 minutes

```python
import unittest
from datetime import datetime
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_time(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480_ip',
            'username': 'myuser',
            'password': 'password123'
        }
        
        net_connect = ConnectHandler(**device)
        
        start_time = datetime.now()
        
        net_connect.send_command('reboot')
        
        # Wait for reboot to complete
        net_connect.send_command('') 
        
        end_time = datetime.now()
        bootup_time = (end_time - start_time).total_seconds()
        
        self.assertLess(bootup_time, 300, 'Bootup time is less than 5 mins')
        
if __name__ == '__main__':
    unittest.main()
```