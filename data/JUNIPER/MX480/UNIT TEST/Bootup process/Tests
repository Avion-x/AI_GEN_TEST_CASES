 Here are 2 unit test cases and corresponding Python test code for testing the bootup process on the Juniper Networks MX480 router:

## Test Case 1 - Verify bootup completes successfully

**Steps:**

1. Power on the MX480 router
2. Verify the system boots up completely and the CLI prompt is available

**Expected Result:** 

The system should boot up successfully and the CLI prompt should be displayed.

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_completes(self):
        device = ConnectHandler(device_type='juniper', host='mx480', username='myuser', password='password123') 
        self.assertIsNotNone(device)
        self.assertIn('>', device.find_prompt())

if __name__ == '__main__':
    unittest.main()
```

## Test Case 2 - Verify bootup failure

**Steps:** 

1. Power on the MX480 with corrupted boot image
2. Verify bootup fails and appropriate failure message is displayed

**Expected Result:**

The system should not boot up successfully and should display boot failure message.

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_failure(self):
        device = ConnectHandler(device_type='juniper', host='mx480', username='myuser', password='password123')
        self.assertIsNone(device)

if __name__ == '__main__':
    unittest.main()
``` Here are 2 sample unit test cases and Python test code for testing the bootup process on an MX480 router:

## Test Case 1: Normal Bootup

**Setup:**
- Power off the MX480 router

**Execution:** 
- Power on the MX480 router

**Verification:**
- Verify console prints normal boot messages 
- Verify router finishes booting and enters operational mode

**Teardown:**
- Power off the MX480 router

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_normal_bootup(self):
        router = MX480()
        router.power_off()
        router.power_on()
        print(router.console_output)
        self.assertIn("Booting kernel", router.console_output)
        self.assertIn("Starting initial configuration", router.console_output)
        self.assertEqual(router.state, "operational")
        router.power_off()

```

## Test Case 2: Bootup with Corrupt Firmware

**Setup:** 
- Power off the MX480 router
- Corrupt the firmware image on the router

**Execution:**
- Power on the MX480 router

**Verification:**  
- Verify console prints firmware validation error
- Verify router enters recovery mode 

**Teardown:**
- Power off the MX480 router
- Restore firmware to known good version

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_corrupt_firmware_bootup(self):
        router = MX480()
        router.power_off()
        router.corrupt_firmware() 
        router.power_on()
        print(router.console_output)
        self.assertIn("Firmware validation failed!", router.console_output)  
        self.assertEqual(router.state, "recovery")
        router.power_off()
        router.restore_firmware()
``` Here are some sample Python 2 unit test cases and test code snippets for testing the bootup process of the Juniper MX480 router:

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_console_access(self):
        """Test console access to MX480"""
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com', 
            'username': 'pynet',
            'password': 'jnpr123',
        }
        net_connect = ConnectHandler(**device)
        self.assertTrue(net_connect)

    def test_image_check(self):
        """Verify MX480 is booting from correct image"""
        output = self.net_connect.send_command("show version | match image")
        self.assertIn("jinstall-mx-xx.xxR", output)

    def test_fpc_status(self):
        """Check FPCs are online"""
        output = self.net_connect.send_command("show chassis fpc pic-status") 
        self.assertIn("Online", output)
        self.assertNotIn("Offline", output) 

    def test_interface_status(self):
        """Verify interfaces initialized properly"""
        output = self.net_connect.send_command("show interfaces terse")
        self.assertNotIn("Admin down", output)

if __name__ == "__main__":
    unittest.main()
```

The test cases check:

- Console connectivity to MX480 
- Verification of correct Junos image 
- FPC cards are online
- Interfaces initialized properly

The `netmiko` library is used to connect to the device and execute show commands. `unittest` framework is leveraged to structure the test cases. Here are 2 unit test cases for testing the bootup process on an MX480 router, with corresponding Python test code:

### Test Case 1: Verify bootup with valid startup configuration

```python
import unittest
from router import Router

class TestRouterBootup(unittest.TestCase):

    def test_bootup_with_valid_config(self):
        # Arrange
        router = Router("mx480")
        
        # Act 
        router.load_startup_config("valid_startup_config.txt")
        router.bootup()
        
        # Assert
        self.assertEqual(router.get_state(), "READY")

if __name__ == '__main__':
    unittest.main()
```

This test case loads a valid startup configuration and verifies the router boots up successfully by checking if the router state after bootup is "READY".

### Test Case 2: Verify bootup failure with invalid startup configuration

```python 
import unittest
from router import Router

class TestRouterBootup(unittest.TestCase):

    def test_bootup_with_invalid_config(self):
        # Arrange
        router = Router("mx480")
        
        # Act
        router.load_startup_config("invalid_startup_config.txt")
        router.bootup()
        
        # Assert
        self.assertEqual(router.get_state(), "FAILED")

if __name__ == '__main__':
    unittest.main()
```

This test case loads an invalid startup configuration and verifies that the bootup fails by checking if the router state after attempted bootup is "FAILED".