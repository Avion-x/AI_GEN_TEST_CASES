 Here are 2 unit test cases and corresponding Python test code for testing the bootup process on a Juniper Networks MX480 router:

## Test Case 1 - Verify console access during bootup

**Steps:**

1. Connect to the console port on the MX480
2. Power on the router 
3. Verify console prints bootup messages and lands at login prompt

```python
import unittest
import pexpect

class TestMX480Bootup(unittest.TestCase):

    def test_console_access(self):
        # Connect to console 
        child = pexpect.spawn('telnet <IP> <port>')
        
        # Look for login prompt 
        child.expect('login:')
        
        # Print success message
        print('Console access verified during bootup')
```

## Test Case 2 - Verify all cards come online 

**Steps:** 

1. Connect to MX480 and login
2. Execute 'show chassis fpc' 
3. Verify all expected FPCs are listed with 'Online' status

```python
import unittest 
from paramiko import SSHClient

class TestMX480Bootup(unittest.TestCase):

    def test_fpc_status(self):
        # Connect to router over SSH
        client = SSHClient()
        client.connect('<IP>', username='<user>', password='<pass>')
        
        # Execute show chassis fpc
        stdin, stdout, stderr = client.exec_command('show chassis fpc')
        
        # Verify FPC status
        output = stdout.read().decode()
        assert 'Online' in output for all FPCs
        
        # Print success message
        print('All FPCs online after bootup')
``` Here are 2 example unit test cases for testing the bootup process on an MX480 router, with Python test code for each:

## Test Case 1: Normal Bootup

### Setup  
- Power off the MX480 completely

### Execution
- Power on the MX480 and allow it to boot normally without any intervention

### Verification
- Verify that the power LED turns green
- Verify that the SYSTEM LED turns green 
- Verify that the message "JUNOS booted" appears on the console

### Teardown
- None required

```python
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_normal_bootup(self):
        # Setup
        power_off_router()
        
        # Execution
        power_on_router()
        
        # Verification
        self.assertEqual(get_power_led(), 'green')  
        self.assertEqual(get_system_led(), 'green')
        self.assertIn('JUNOS booted', get_console_log())
        
```

## Test Case 2: Bootup with Corrupted Filesystem

### Setup
- Power off the MX480 completely 
- Corrupt the filesystem by deleting an important system file

### Execution
- Power on the MX480 and allow it to boot

### Verification
- Verify that the power LED turns green
- Verify that the SYSTEM LED turns amber
- Verify that an error message appears on the console indicating corrupted filesystem

### Teardown 
- Reinstall JUNOS to repair filesystem

```python
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_corrupted_filesystem_bootup(self):
       # Setup  
       power_off_router()
       corrupt_filesystem()
       
       # Execution
       power_on_router()
       
       # Verification
       self.assertEqual(get_power_led(), 'green')
       self.assertEqual(get_system_led(), 'amber')  
       self.assertIn('Filesystem corrupted', get_console_log())
       
       # Teardown
       reinstall_junos()
``` Here are some sample Python 2 unit test cases and code for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480

class MX480BootupTestCase(unittest.TestCase):

    def test_bootup_cold(self):
        """Test cold bootup process"""
        router = MX480()
        router.power_off()
        
        # Cold boot
        router.power_on()
        
        # Verify bootup completed
        self.assertTrue(router.is_ready())

    def test_bootup_warm(self):
        """Test warm bootup process"""
        router = MX480()
        
        # Warm reboot
        router.reboot()
        
        # Verify bootup completed  
        self.assertTrue(router.is_ready())

    def test_bootup_time(self):
        """Test bootup time is within limit"""
        router = MX480()
        router.power_off()
        
        start = datetime.now()
        router.power_on()
        end = datetime.now()
        
        bootup_time = (end - start).total_seconds()
        
        # Verify bootup time is less than 300 seconds
        self.assertLess(bootup_time, 300) 

if __name__ == '__main__':
    unittest.main()
```

The key points are:

- Test cold boot by powering off and on the router
- Test warm boot by rebooting the running router 
- Verify bootup completion by checking router ready state
- Test bootup time is within expected limit

The `MX480` class would contain methods like `power_on()/power_off()` and `reboot()` to control the router. The `is_ready()` method would check if the router has finished booting up.

This covers some basic test cases for validating the critical router bootup process. Additional test cases can be added for bootup with different configurations, checking various services activation, etc. Here are 2 unit test cases and sample Python test code for testing the bootup process on an MX480 router:

## Test Case 1 - Verify bootup completes successfully

**Description**: Power on the MX480 and verify it boots completely and the 'READY' prompt is displayed.

**Steps**:

1. Power on the MX480 router. 
2. Wait for the system to fully boot.
3. Verify the `READY` prompt is displayed on the console.

**Expected Result**: MX480 boots up successfully and `READY` prompt appears indicating bootup is complete.

**Pass/Fail Criteria**: Presence of `READY` prompt on console indicates successful boot. Absence of prompt indicates boot failure.

```python
import re
import pexpect

def test_bootup():
    child = pexpect.spawn('telnet 192.168.1.1')
    child.expect('login:')
    child.sendline('admin')
    child.expect('Password:')
    child.sendline('password')
    child.expect('READY')
    print("Bootup test passed")
```

## Test Case 2 - Verify default configuration loaded 

**Description**: Verify default configuration is loaded on bootup.

**Steps**:

1. Power on the MX480 router.
2. Wait for system to fully boot. 
3. Check if default configuration is loaded using `show configuration` command.

**Expected Result**: Default configuration should be displayed when `show configuration` is run.

**Pass/Fail Criteria**: Presence of default config indicates configuration loaded correctly. Missing default config indicates failure.

```python
import re
import pexpect

def test_default_config():
    child = pexpect.spawn('telnet 192.168.1.1')
    child.expect('login:')
    child.sendline('admin')
    child.expect('Password:')
    child.sendline('password')
    child.expect('READY')
    child.sendline('show configuration')
    child.expect(re.escape('system {...}')) # match default config
    print("Default config test passed") 
```