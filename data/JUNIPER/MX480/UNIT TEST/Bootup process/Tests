 Here are 2 unit test cases and corresponding Python test code snippets for the bootup process on Juniper Networks MX480 router:

**Test Case 1 - Bootup with valid configuration**

This test checks that the router boots up successfully with a valid configuration.

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_valid_config(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.test.net', 
            'username': 'testuser',
            'password': 'TestPassword123',
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show configuration")
        
        # Check if valid configuration was loaded
        self.assertIn('system { host-name mx480', output)
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

**Test Case 2 - Bootup with invalid configuration** 

This test checks that the router detects invalid configuration during bootup.

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_invalid_config(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.test.net',
            'username': 'testuser',
            'password': 'TestPassword123',
        }

        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show configuration")
        
        # Check for error indicating invalid configuration
        self.assertIn('% Invalid configuration', output)
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
``` Here are 2 unit test cases for the bootup process of an MX480 router with Python test code:

**Test Case 1 - Normal Bootup**

Setup:
- Connect console cable from test computer to MX480 console port
- Power on MX480

Execution: 
```python
import re
import pexpect

def test_normal_boot():
  console = pexpect.spawn('telnet 192.168.1.1')
  console.expect('login:')
  console.sendline('admin')
  console.expect('Password:')
  console.sendline('admin')
  
  console.expect('#') 
  console.sendline('show chassis alarms')
  console.expect('#')

  output = console.before.decode()

  assert 'No alarms currently active' in output

```

Verification:
- Check no alarms are active after bootup by running 'show chassis alarms'

Teardown:
- Power off MX480

**Test Case 2 - Bootup with Fault**

Setup: 
- Disconnect one or more fan modules to trigger fault
- Connect console cable from test computer to MX480 console port  
- Power on MX480

Execution:
```python 
import re
import pexpect

def test_faulty_boot():
  console = pexpect.spawn('telnet 192.168.1.1')
  console.expect('login:')
  console.sendline('admin')
  console.expect('Password:')
  console.sendline('admin')

  console.expect('#')
  console.sendline('show chassis alarms') 
  console.expect('#')

  output = console.before.decode()

  assert re.search('Fan\d+ Not Detected', output)

```

Verification: 
- Check fan fault alarm is active after bootup by running 'show chassis alarms'

Teardown:
- Reconnect fan modules
- Power off MX480 Here are some example Python 2 unit test cases and test code for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480 

class TestMX480Bootup(unittest.TestCase):

    def test_power_on_self_test(self):
        """Test power on self test completes successfully"""
        router = MX480()
        router.power_on()
        self.assertEqual(router.post_status, 'PASS')

    def test_load_ios(self):
        """Test IOS image loads successfully""" 
        router = MX480()
        router.power_on()
        router.load_ios('image.bin')
        self.assertEqual(router.ios_status, 'READY')
        
    def test_boot_failure(self):
        """Test boot failure condition"""
        router = MX480()
        router.power_on()
        router.load_ios('invalid.bin')
        self.assertEqual(router.ios_status, 'FAIL')
        self.assertEqual(router.post_status, 'FAIL')

if __name__ == '__main__':
    unittest.main()
```

The test cases check for successful power on self test, successful IOS image load, and a failed boot scenario. The `MX480` class would contain methods to simulate the router's bootup sequence and report status. The tests validate the expected bootup behavior and statuses.

Some key points:

- Each test case defines a specific scenario to test 
- Test class inherits from `unittest.TestCase`
- Test cases use assertions like `assertEqual` to check expected vs actual results
- `main()` call runs the test cases when file is run directly

This allows thorough unit testing of the bootup process with Python. The tests could be expanded to cover additional bootup checks and validation as needed. Here are 2 unit test cases and their respective Python test cases for testing the bootup process on an MX480 router:

## Test Case 1 - Verify bootup with valid startup configuration

```python
import unittest
from router import Router

class TestRouterBootup(unittest.TestCase):

    def test_bootup_with_valid_config(self):
        # Arrange
        router = Router('mx480')
        router.load_startup_config('valid_startup_config.txt')
        
        # Act 
        router.bootup()
        
        # Assert
        self.assertTrue(router.is_booted())
        self.assertEqual(router.get_hostname(), 'mx480')
        self.assertTrue(router.interfaces_up())
```

This test case loads a valid startup configuration on the router and verifies that the router boots up properly, hostname is correctly set and all interfaces are up after bootup.

## Test Case 2 -  Verify bootup with invalid startup configuration

```python 
import unittest
from router import Router

class TestRouterBootup(unittest.TestCase):

    def test_bootup_with_invalid_config(self):
        # Arrange
        router = Router('mx480')
        router.load_startup_config('invalid_startup_config.txt')
        
        # Act
        router.bootup()
        
        # Assert
        self.assertFalse(router.is_booted())
        self.assertNotEqual(router.get_hostname(), 'mx480')
        self.assertFalse(router.interfaces_up())
```

This test case loads an invalid startup configuration on the router and verifies that the router is unable to boot up properly with errors.