 Here are 2 unit test cases and corresponding Python test code for testing the bootup process on a Juniper Networks MX480 router:

### Test Case 1: Verify bootup completes successfully

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_success(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin',
            'password': 'password123'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        # Verify expected version string is present
        self.assertIn("Junos: 20.3R1", output) 
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects to the MX480 router after bootup and verifies the expected Junos version is present in the output of the `show version` command.

### Test Case 2: Verify bootup failure

```python 
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_failure(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin',
            'password': 'password123' 
        }

        try:
            net_connect = ConnectHandler(**device)
        except:
            # Unable to connect, bootup must have failed
            pass
        else:
            # Able to connect, so bootup succeeded unexpectedly
            self.fail("Bootup succeeded when failure was expected")
            
if __name__ == '__main__':
    unittest.main()
```

This test case attempts to connect to the MX480 router after bootup and verifies that the connection fails, indicating a failed bootup. Here are 2 unit test cases for the bootup process on an MX480 router with Python test code:

**Test Case 1 - Normal Bootup:**

**Setup:**
- Connect console cable to MX480 
- Power on the MX480

**Execution:**
- Wait for bootup messages on console

**Verification:**
- Verify console prints "Junos version <version>" 
- Verify console prints "backup root filesystem" messages
- Verify console prints "U-Boot version" 
- Verify console prints "Normal startup completed"

**Teardown:**
- Disconnect console cable

**Python Code:**

```python
import re
import serial

def test_normal_bootup():

    ser = serial.Serial('/dev/ttyUSB0', 115200) 

    bootup_msgs = ser.read_until('Normal startup completed').decode()

    assert re.search('Junos version .+', bootup_msgs)
    assert 'backup root filesystem' in bootup_msgs
    assert re.search('U-Boot version .+', bootup_msgs)
    assert 'Normal startup completed' in bootup_msgs

    ser.close()
```

**Test Case 2 - Bootup with Corrupted Filesystem:** 

**Setup:**
- Connect console cable to MX480
- Corrupt /dev/da0 filesystem 

**Execution:** 
- Power on the MX480

**Verification:**
- Verify console prints "Junos version <version>"  
- Verify console prints "/dev/da0s1a: FILESYSTEM CLEANLY UNMOUNTED"
- Verify console prints "No valid Junos snapshot found"
- Verify console enters CLI rescue mode 

**Teardown:**
- Disconnect console cable

**Python Code:**

```python
import re
import serial

def test_corrupted_filesystem_bootup():

    ser = serial.Serial('/dev/ttyUSB0', 115200)

    bootup_msgs = ser.read_until('Enter full pathname of shell or RETURN for /bin/sh:').decode() 

    assert re.search('Junos version .+', bootup_msgs)
    assert '/dev/da0s1a: FILESYSTEM CLEANLY UNMOUNTED' in bootup_msgs 
    assert 'No valid Junos snapshot found' in bootup_msgs
    assert 'Enter full pathname of shell or RETURN for /bin/sh:' in bootup_msgs

    ser.close()
``` Here are some example Python 2 unit test cases and test code for testing the bootup process of the Juniper MX480 router:

```python
import unittest
from netmiko import ConnectHandler

class TestMx480Bootup(unittest.TestCase):

    def setUp(self):
        self.mx480 = {
            'device_type': 'juniper',
            'ip': '192.168.1.1', 
            'username': 'jnpr',
            'password': 'jnpr123'
        }
    
    def test_power_on(self):
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show chassis environment pem")
        self.assertIn("OK", output)

    def test_load_boot_config(self):
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show configuration groups __juniper_private__")
        self.assertIn("node0", output)
    
    def test_check_interfaces(self):
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show interfaces terse")
        self.assertNotIn("down", output.lower())

    def test_routing_engine_status(self):
        net_connect = ConnectHandler(**self.mx480) 
        output = net_connect.send_command("show chassis routing-engine")
        self.assertIn("Master", output)

if __name__ == '__main__':
    unittest.main()
```

This test code includes some example test cases like:

- Checking power status 
- Verifying boot config is loaded
- Checking interface status
- Checking routing engine status

The tests use Netmiko to connect to the device and execute show commands to verify the bootup state. The test output is validated using assert methods to check for expected strings. Here are 2 sample unit test cases and Python test code to test the bootup process on an MX480 router:

## Test Case 1 - Verify bootup and login

**Steps:**

1. Power on the MX480 router
2. Wait for router to complete bootup process 
3. Open console connection to router
4. Login to router using valid credentials

**Expected Result:** 

- Router boots up successfully without any errors
- Able to login to router CLI using valid credentials

```python
import re
import telnetlib

HOST = "192.168.1.1"
user = "admin"
password = "admin123"

tn = telnetlib.Telnet(HOST)

tn.read_until(b"Login: ")
tn.write(user.encode('ascii') + b"\n")

tn.read_until(b"Password: ")
tn.write(password.encode('ascii') + b"\n")

router_output = tn.read_until(b"admin@router#")

if re.search(b"% Invalid input detected", router_output):
  print("Login failed")
else:
  print("Login successful")
  
tn.close()
```

## Test Case 2 - Verify startup configuration

**Steps:** 

1. Power on the MX480 router
2. Wait for router to complete bootup process
3. Login to router CLI 
4. Execute 'show configuration' command
5. Verify startup configuration matches expected config

**Expected Result:**

- Startup configuration contains expected interfaces, routing protocols, access lists etc

```python
import re
import telnetlib

HOST = "192.168.1.1"
user = "admin"
password = "admin123"

tn = telnetlib.Telnet(HOST)

tn.read_until(b"Login: ")
tn.write(user.encode('ascii') + b"\n")

tn.read_until(b"Password: ")  
tn.write(password.encode('ascii') + b"\n")

tn.write(b"show configuration\n")

config = tn.read_until(b"admin@router#")

# Validate startup config contains expected configuration
if re.search(b"interface ge-0/0/0", config):
  print("Startup config contains expected interface ge-0/0/0")

if re.search(b"access-list BLOCK_ICMP", config):
  print("Startup config contains expected access list")  
  
tn.close()
```