 Here are 2 unit test cases and corresponding Python test cases for bootup process of MX480 router:

### Test Case 1:
Validate successful bootup of MX480 router

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_successful_bootup(self):
        mx480 = MX480()
        self.assertEqual(mx480.bootup(), "Bootup successful")
```

### Test Case 2: 
Validate bootup failure due to corrupted boot image

```python
import unittest 
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_failed_bootup(self):
        mx480 = MX480()
        mx480.corrupt_boot_image()
        self.assertEqual(mx480.bootup(), "Bootup failed")
```

The first test case verifies that the MX480 router boots up successfully under normal conditions. The second test case corrupts the boot image to simulate a failure scenario and verifies that bootup fails in that case. Here are 2 test cases for the bootup process of an MX480 router with Python test code:

**Test Case 1:** Verify bootup completes successfully

**Setup:**
- Connect console cable to MX480
- Power on MX480

**Execution:**
- Wait for bootup process to complete 

**Verification:**
- Verify login prompt is displayed indicating successful bootup

**Teardown:**
- None

```python
import re
import sys
import telnetlib

HOST = "192.168.1.1"
user = "admin"
password = "admin"

tn = telnetlib.Telnet(HOST)

tn.read_until(b"Login:")
tn.write(user.encode('ascii') + b"\n")
tn.read_until(b"Password:")
tn.write(password.encode('ascii') + b"\n")

bootup_pattern = rb".*Login:"
if re.search(bootup_pattern, tn.read_all()):
    print("Test Case 1 Passed - Bootup completed successfully")
else:
    print("Test Case 1 Failed - Bootup did not complete")
    
tn.close()
```

**Test Case 2:** Verify bootup failure is detected

**Setup:** 
- Connect console cable to MX480
- Power on MX480 with corrupted boot image

**Execution:**
- Wait for bootup process to fail

**Verification:**  
- Verify boot failure message is displayed 

**Teardown:**
- Retry with valid boot image

```python
import re  
import sys
import telnetlib

HOST = "192.168.1.1"
user = "admin"
password = "admin"  

tn = telnetlib.Telnet(HOST)

bootup_pattern = rb".*failed.*"
output = tn.read_until(b"Login:", timeout=300)
if re.search(bootup_pattern, output):
    print("Test Case 2 Passed - Detected bootup failure")
else:
    print("Test Case 2 Failed - Did not detect bootup failure")

tn.close()  
``` Here are some sample Python 2 unit test cases and their implementation for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_power_on_self_test(self):
        """Test power on self test"""
        mx480 = MX480()
        mx480.power_on()
        self.assertEqual(mx480.status, "POST Complete")

    def test_load_boot_config(self):
        """Test loading boot config"""
        mx480 = MX480()
        mx480.power_on()
        mx480.load_boot_config()
        self.assertEqual(mx480.boot_config, "/config/juniper.conf") 

    def test_check_interfaces(self):
        """Test checking interfaces"""
        mx480 = MX480()
        mx480.power_on()
        mx480.load_boot_config()
        mx480.check_interfaces()
        self.assertEqual(len(mx480.interfaces), 48)

    def test_routing_engine_redundancy(self):
        """Test routing engine redundancy"""
        mx480 = MX480()
        mx480.power_on()
        mx480.load_boot_config()
        mx480.check_re_redundancy()
        self.assertTrue(mx480.re_redundancy)

    def test_request_chassis_route_engine(self):
        """Test requesting chassis route engine"""
        mx480 = MX480()
        mx480.power_on()
        mx480.load_boot_config()
        mx480.request_chassis_re()
        self.assertEqual(mx480.chassis_re, "RE0")

if __name__ == '__main__':
    unittest.main()
```

This covers some basic test cases like:

- Power on self test 
- Loading boot configuration
- Checking interfaces 
- Testing routing engine redundancy
- Requesting chassis route engine

The test cases instantiate the MX480 router, execute bootup methods, and assert expected states and values. The tests can be run using `python test_mx480.py`. Here are 2 sample unit test cases and Python test code for testing the bootup process on an MX480 router:

## Test Case 1: Verify startup configuration is loaded correctly

**Steps:**
1. Power on the MX480 router.
2. Check that the router has booted up successfully and is reachable via SSH.
3. Verify that the startup configuration has been loaded correctly by checking the configured interfaces, routing protocols, access lists etc.

```python
import unittest
from netmiko import ConnectHandler

class TestRouterBootup(unittest.TestCase):

    def test_startup_config(self):
        device = ConnectHandler(device_type='juniper', host='mx480', username='netops', password='JNPR123')
        output = device.send_command('show configuration')
        
        # Verify key settings from startup config
        self.assertIn('interfaces ge-0/0/0 unit 0 family inet address 10.0.0.1/24', output) 
        self.assertIn('protocols ospf area 0.0.0.0 interface ge-0/0/0.0', output)
        self.assertIn('firewall family inet filter OUTBOUND term BLOCK-SMTP then reject', output)
        
        device.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

## Test Case 2: Verify default gateway connectivity 

**Steps:**
1. Power on the MX480 router.
2. Check that the router has booted up successfully and is reachable via SSH.  
3. Verify that the router can ping its configured default gateway.

```python
import unittest
from netmiko import ConnectHandler

class TestRouterBootup(unittest.TestCase):

    def test_default_gateway(self):
        device = ConnectHandler(device_type='juniper', host='mx480', username='netops', password='JNPR123')
        
        output = device.send_command('ping 10.0.0.254 count 5')
        self.assertNotIn('100% packet loss', output)
        
        device.disconnect()

if __name__ == '__main__':
    unittest.main()
```