 Here are 2 unit test cases and corresponding Python test code for testing the bootup process on a Juniper Networks MX480 router:

## Test Case 1 - Verify bootup completes successfully

**Steps:**

1. Power on the MX480 router
2. Wait for router to complete bootup process 
3. Verify console displays expected bootup messages and router prompt

**Expected Result:** 

- Router boots up successfully and displays expected console messages
- Router prompt is displayed indicating successful bootup

```python
import re
import pexpect

def test_bootup():
    console = pexpect.spawn('telnet 192.168.1.1')
    console.expect('login:', timeout=180) 
    console.sendline('admin')
    console.expect('Password:')
    console.sendline('password')
    console.expect('#')
    assert re.search(r'System bootup complete.', console.before)
```

## Test Case 2 - Verify bootup failure due to invalid config

**Steps:**

1. Introduce invalid configuration to cause boot failure 
2. Reboot the router
3. Check console output for expected error message

**Expected Result:**

- Router fails to bootup and displays appropriate error message

```python
import re
import pexpect

def test_bootup_failure():
    console = pexpect.spawn('telnet 192.168.1.1')
    console.expect('login:')
    console.sendline('admin')
    console.expect('Password:')
    console.sendline('password')
    console.expect('#')
    console.sendline('set system invalid-config test') 
    console.sendline('commit')
    console.sendline('restart')
    console.expect('fpc0: Boot FAILURE', timeout=180)
    assert re.search(r'fpc0: Boot FAILURE', console.before)
```

The above test cases validate successful bootup and bootup failure conditions for the MX480 router. The Python test code uses pexpect library to automate interaction with router console. Here are 2 sample unit test cases for testing the bootup process on an MX480 router, with Python test code for each:

## Test Case 1 - Normal Bootup

### Setup
- Power off the MX480 router

### Execution
- Power on the MX480 router

### Verification
- Verify console prints "Booting kernel" message 
- Verify console prints "Starting netconf daemon" message
- Verify console prints "mgd: SNMP agent started" message  
- Verify console prints "JUNOS 13.3R9.7 Build date: 2015-08-12 07:02:54 UTC" 

### Teardown
- None

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_normal_bootup(self):
        router = MX480()
        
        # Setup
        router.power_off()
        
        # Execution
        router.power_on()
        
        # Verification
        self.assertIn("Booting kernel", router.console_output())
        self.assertIn("Starting netconf daemon", router.console_output())        
        self.assertIn("mgd: SNMP agent started", router.console_output())
        self.assertIn("JUNOS 13.3R9.7 Build date: 2015-08-12 07:02:54 UTC", router.console_output())
```

## Test Case 2 - Bootup with Corrupted Kernel

### Setup 
- Power off the MX480 router
- Corrupt the kernel image on flash

### Execution
- Power on the MX480 router

### Verification
- Verify console prints "Booting backup kernel" message
- Verify router boots up successfully with backup kernel

### Teardown 
- Revert kernel image to original valid version

```python
class TestMX480Bootup(unittest.TestCase):

    def test_bootup_corrupted_kernel(self):
       router = MX480()
        
       # Setup  
       router.power_off()
       router.corrupt_kernel()
       
       # Execution
       router.power_on()
       
       # Verification
       self.assertIn("Booting backup kernel", router.console_output())
       self.assertIn("Starting netconf daemon", router.console_output())
       # Verify successful bootup
       
       # Teardown
       router.restore_kernel() 
``` Here are some sample Python 2 unit test cases and their respective implementations for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480 

class MX480BootupTestCase(unittest.TestCase):

    def test_power_on_self_test(self):
        """Test power on self test completes successfully"""
        router = MX480()
        router.power_on()
        self.assertEqual(router.post_status, 'PASSED')

    def test_load_bios(self):
        """Test BIOS loading""" 
        router = MX480()
        router.power_on()
        self.assertEqual(router.bios_version, 'JUNOS version 15.3') 

    def test_load_junos(self):
        """Test Junos OS loading"""
        router = MX480()
        router.power_on()
        router.load_junos()
        self.assertEqual(router.junos_version, 'Junos version 15.3')

    def test_boot_time(self):
        """Test bootup time"""
        router = MX480()
        start_time = datetime.now()
        router.power_on()
        router.load_junos()
        end_time = datetime.now()
        boot_time = (end_time - start_time).total_seconds()
        self.assertLess(boot_time, 300) # bootup takes less than 5 mins

if __name__ == '__main__':
    unittest.main()
```

This implements some test cases to check:

- Power on self test passes 
- BIOS version is loaded correctly
- Junos OS version is loaded correctly
- Total bootup time is under 5 minutes

The test cases use a MX480 router class to simulate and test the bootup sequence. The tests assert the expected state and values at each step of the boot process. Here are 2 unit test cases and corresponding Python test code snippets for testing the bootup process on an MX480 router:

## Test Case 1 - Verify bootup process completes successfully

**Steps:**
1. Power on the MX480 router
2. Verify the bootup process completes successfully without any errors
3. Verify the router finishes booting and enters operational mode 

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_successful_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480', 
            'username': 'myuser',
            'password': 'passwd'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        self.assertNotIn("error", output.lower(), "No errors found in bootup process")
        self.assertIn("operational mode", output.lower(), "Router is in operational mode")
        
```

## Test Case 2 - Verify bootup failure

**Steps:**
1. Power on the MX480 router
2. Interrupt the bootup process 
3. Verify the router detects the failure and rolls back configuration

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_failed_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480',
            'username': 'myuser',
            'password': 'passwd' 
        }
        
        net_connect = ConnectHandler(**device)
        
        # Interrupt bootup
        net_connect.send_command("reboot interrupt")
        
        output = net_connect.send_command("show version")
        
        self.assertIn("error", output.lower(), "Error detected in bootup process")
        self.assertNotIn("operational mode", output.lower(), "Router failed to reach operational mode")

```