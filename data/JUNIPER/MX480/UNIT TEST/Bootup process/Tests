 Here are 2 unit test cases and corresponding Python test code for bootup process testing of the Juniper Networks MX480 router:

## Test Case 1 - Validate bootup to operational state

**Steps:**

1. Power on the MX480 router
2. Verify the router progresses through the boot stages (E.g. Bootloader, Kernel, INIT, System processes) 
3. Verify the router reaches operational state within expected time 

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_operational(self):
        device = ConnectHandler(device_type='juniper', ip='192.168.1.1', username='tester', password='password123')
        
        bootup_output = device.send_command("show system boot-messages")
        
        self.assertIn("Kernel Load Complete", bootup_output)
        self.assertIn("INIT: Entering runlevel: 3", bootup_output)
        self.assertIn("Startinig System Log...", bootup_output)
        
        uptime = device.send_command("show system uptime | match up")
        self.assertLess(int(uptime), 300, "Router took too long to bootup")

if __name__ == '__main__':
    unittest.main()
```

## Test Case 2 - Validate bootup failure handling

**Steps:**

1. Interrupt the boot process of the router (E.g. remove compact flash)
2. Verify the router detects the failure and drops to recovery shell
3. Verify basic commands can be run from recovery shell

```python 
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_failure(self):
        device = ConnectHandler(device_type='juniper', ip='192.168.1.1', username='tester', password='password123')
        
        bootup_output = device.send_command("show system boot-messages")
        
        self.assertIn("Boot interrupted", bootup_output)
        self.assertIn("Entering recovery shell", bootup_output)
        
        output = device.send_command("version")
        self.assertIn("Junos", output)
        
if __name__ == '__main__':
    unittest.main()
``` Here are 2 unit test cases for the bootup process of an MX480 router with Python test code:

### Test Case 1 - Normal Bootup

**Setup:**
- Power off the MX480 router
- Connect console cable from console port to computer
- Open terminal emulator and connect to console port

**Execution:**
- Power on the MX480 router
- Wait for boot messages on console

**Verification:**
- Verify console prints normal boot messages 
- Verify "Junos boot complete" message is displayed
- Ping default gateway IP address 

**Teardown:**
- Disconnect console cable

```python
import re
import subprocess

def test_normal_bootup():
    # Setup
    subprocess.run("poweroff_mx480")  
    subprocess.Popen("open_console_connection")

    # Execution
    subprocess.run("poweron_mx480")
    console_output = subprocess.check_output("read_console")

    # Verification
    assert "Junos boot complete" in console_output
    ping_output = subprocess.run("ping -c 1 default_gateway")
    assert ping_output.returncode == 0

    # Teardown
    subprocess.run("close_console_connection")
```

### Test Case 2 - Bootup with Faulty FPC

**Setup:**  
- Power off the MX480 router
- Disconnect an FPC module
- Connect console cable from console port to computer
- Open terminal emulator and connect to console port

**Execution:**
- Power on the MX480 router 
- Wait for boot messages on console

**Verification:** 
- Verify console prints FPC missing error messages
- Verify router boots up completely except for faulty FPC

**Teardown:**
- Reconnect faulty FPC 
- Disconnect console cable

```python
import re
import subprocess

def test_bootup_faulty_fpc():
    # Setup
    subprocess.run("poweroff_mx480")
    subprocess.run("disconnect_fpc")  
    subprocess.Popen("open_console_connection")

    # Execution
    subprocess.run("poweron_mx480")
    console_output = subprocess.check_output("read_console")

    # Verification
    assert re.search("FPC \d offline", console_output)
    assert "Junos boot complete" in console_output

    # Teardown 
    subprocess.run("reconnect_fpc")
    subprocess.run("close_console_connection")
``` Here are some sample Python 2 unit test cases and test code for testing the bootup process of the Juniper MX480 router:

```python
import unittest
from router import MX480

class MX480BootupTestCase(unittest.TestCase):

    def test_power_on(self):
        """Test powering on the device"""
        router = MX480()
        router.power_on()
        self.assertTrue(router.is_powered_on())

    def test_load_bios(self):
        """Test BIOS loading"""
        router = MX480()
        router.power_on()
        self.assertTrue(router.load_bios()) 

    def test_boot_loader(self):
        """Test boot loader"""
        router = MX480()
        router.power_on()
        router.load_bios()
        self.assertTrue(router.load_boot_loader())

    def test_kernel_load(self):
        """Test kernel loading"""
        router = MX480()
        router.power_on()
        router.load_bios()
        router.load_boot_loader()
        self.assertTrue(router.load_kernel())

    def test_init_process(self):
        """Test init process""" 
        router = MX480()
        router.power_on()
        router.load_bios()
        router.load_boot_loader()
        router.load_kernel()
        self.assertTrue(router.init_process())

    def test_boot_complete(self):
        """Test complete bootup"""
        router = MX480()
        router.power_on()
        router.load_bios()
        router.load_boot_loader()
        router.load_kernel()
        router.init_process()        
        self.assertTrue(router.is_booted())

if __name__ == '__main__':
    unittest.main()
```

This implements test cases for each step of the bootup process - power on, BIOS load, boot loader load, kernel load, init process, and overall boot complete check. The `MX480` class would implement the methods to perform and check each boot step. Here are 2 unit test cases and their respective Python test code for testing the bootup process on an MX480 router:

## Test Case 1 - Verify default boot configuration

```python
import unittest
from netmiko import ConnectHandler

class TestBootup(unittest.TestCase):

    def test_default_boot(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin', 
            'password': 'secret123'
        }
        
        conn = ConnectHandler(**device)
        output = conn.send_command('show configuration')
        
        # Verify default boot device is internal flash
        self.assertIn('system {', output)
        self.assertIn('boot-device internal-flash', output)
        
        conn.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects to the MX480 router and checks that the default boot device is set to internal flash in the configuration.

## Test Case 2 - Verify boot order 

```python
import unittest
from netmiko import ConnectHandler

class TestBootup(unittest.TestCase):

    def test_boot_order(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin',
            'password': 'secret123'
        }
        
        conn = ConnectHandler(**device)
        boot_output = conn.send_command('show system boot-messages')
        
        # Verify boot order
        self.assertIn('Trying to boot from: internal', boot_output)
        self.assertIn('Trying to boot from: usb', boot_output)
        
        conn.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects to the router and checks the boot order by looking at the boot messages. It verifies that it tries booting from internal flash first, then USB.