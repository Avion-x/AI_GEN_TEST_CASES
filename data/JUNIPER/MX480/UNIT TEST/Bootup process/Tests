 Here are 2 unit test cases for bootup process of MX480 router along with sample Python test code:

### Test Case 1: Verify bootup with valid startup config

**Steps:**

1. Power on the MX480 router
2. Verify the system boots up successfully 
3. Verify startup configuration is loaded properly

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_with_valid_startup_config(self):
        device = ConnectHandler(device_type='juniper', ip='192.168.0.1', username='netconf', password='juniper123')
        output = device.send_command('show configuration')
        self.assertEqual(output, 'expected_valid_startup_config')

if __name__ == '__main__':
    unittest.main()
```

### Test Case 2: Verify bootup with corrupted startup config

**Steps:** 

1. Power on the MX480 router
2. Corrupt the startup configuration
3. Verify the system boots up successfully
4. Verify default factory configuration is loaded

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_with_corrupted_startup_config(self):
       device = ConnectHandler(device_type='juniper', ip='192.168.0.1', username='netconf', password='juniper123')
       output = device.send_command('show configuration')
       self.assertEqual(output, 'expected_default_factory_config') 

if __name__ == '__main__':
    unittest.main()
``` Here are 2 unit test cases for the bootup process of an MX480 router with Python test code:

**Test Case 1 - Normal Bootup**

**Setup:**
- Connect console cable to MX480 
- Connect power cables to MX480

**Execution:**
- Power on the MX480 router

**Verification:**
- Verify boot messages are printed on the console
- Verify the Junos OS boots up successfully 
- Verify the router prompts for login

**Teardown:**
- Power off the MX480 router

```python
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_normal_bootup(self):
        # Setup 
        print("Connected console cable and power to MX480")
        
        # Execution
        print("Powered on the MX480 router")
        
        # Verification 
        print("Verified boot messages printed on console")
        print("Verified Junos OS booted up successfully")
        print("Verified login prompt on console")
        
        # Teardown
        print("Powered off the MX480 router")
        
if __name__ == '__main__':
    unittest.main()
```

**Test Case 2 - Bootup with Corrupted FileSystem** 

**Setup:**
- Connect console cable to MX480
- Connect power cables to MX480 
- Corrupt the file system on the MX480

**Execution:** 
- Power on the MX480 router

**Verification:**
- Verify boot messages show file system corruption 
- Verify router enters safe mode with minimal configuration
- Verify limited Junos CLI access  

**Teardown:**
- Power cycle MX480 router 
- Reinstall Junos OS to restore file system  

```python
import unittest 

class TestMX480Bootup(unittest.TestCase):

    def test_corrupted_fs_bootup(self):
      # Setup
      print("Connected console cable and power to MX480")
      print("Corrupted the filesystem on the MX480")
      
      # Execution  
      print("Powered on the MX480 router")
      
      # Verification
      print("Verified boot messages show filesystem corruption") 
      print("Verified router enters safe mode with minimal config")
      print("Verified limited CLI access in safe mode")  
      
      # Teardown
      print("Power cycled MX480 and reinstalled Junos OS")
      
if __name__ == '__main__':
    unittest.main() 
``` Here are some example Python 2 unit test cases and test code for testing the bootup process of the Juniper MX480 router:

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def setUp(self):
        self.mx480 = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'admin',
            'password': 'password123',
        }
    
    def test_console_access(self):
        """Test console access to MX480"""
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show version")
        self.assertIn("Junos", output)

    def test_routing_engine_status(self):
        """Test routing engine status"""
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show chassis routing-engine")
        self.assertIn("Current state", output)
        self.assertIn("Online", output)

    def test_linecard_status(self):
        """Test linecard status"""
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show chassis fpc")
        self.assertIn("State", output)
        self.assertIn("Online", output)
    
    def test_interface_status(self):
        """Test interface status"""
        net_connect = ConnectHandler(**self.mx480)
        output = net_connect.send_command("show interfaces terse")
        self.assertNotIn("down", output.lower())

if __name__ == '__main__':
    unittest.main()
```

This creates some basic test cases using Python's unittest framework to check:

- Console access to MX480 
- Routing engine status
- Linecard status
- Interface status

The tests connect to the device using Netmiko and execute Junos commands. The output is validated to check for expected strings that indicate proper bootup. Here are 2 unit test cases and their respective python test cases for testing the bootup process on an MX480 router:

### Test Case 1: Verify bootup with valid startup configuration

```python
import unittest
from netmiko import ConnectHandler

class TestMx480Bootup(unittest.TestCase):

    def test_bootup_valid_config(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'testuser',
            'password': 'testpassword'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command('show configuration')
        
        # Verify expected configuration is present
        self.assertIn('set system host-name mx480', output)
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects to the MX480 router after bootup and verifies the hostname is set as expected in the startup configuration.

### Test Case 2: Verify bootup with invalid startup configuration

```python 
import unittest
from netmiko import ConnectHandler

class TestMx480Bootup(unittest.TestCase):

    def test_bootup_invalid_config(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'testuser',
            'password': 'testpassword'
        }
        
        net_connect = ConnectHandler(**device)
        
        # Verify router rejected invalid configuration
        self.assertIn('% Invalid configuration', net_connect.find_prompt())  
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects after bootup and verifies the router has rejected an invalid startup configuration by checking for an invalid configuration prompt.