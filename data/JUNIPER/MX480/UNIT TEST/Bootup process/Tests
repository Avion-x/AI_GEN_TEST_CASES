 Here are 2 unit test cases and corresponding Python test code for testing the bootup process on a Juniper Networks MX480 router:

## Test Case 1 - Verify router boots up successfully

**Steps:**  
1. Power on the router
2. Verify the router completes POST
3. Verify the router loads the Junos OS and prompts for login

**Expected Result:**  
The router should boot up successfully and display the login prompt without any errors.

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup(self):
        device = {
            'device_type': 'juniper',
            'ip': '192.168.1.1',
            'username': 'testuser',
            'password': 'testpass'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command('show version')
        
        # Check if version string contains Junos OS 
        self.assertIn('Junos', output)
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

## Test Case 2 - Verify boot time

**Steps:**  
1. Power on the router
2. Note start time
3. Wait for login prompt 
4. Note end time
5. Calculate boot time

**Expected Result:**  
The router should boot up in under 5 minutes.

```python
import unittest
from datetime import datetime
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_boot_time(self):
        device = {
            'device_type': 'juniper',  
            'ip': '192.168.1.1',
            'username': 'testuser',
            'password': 'testpass'
        }

        start_time = datetime.now()
        
        net_connect = ConnectHandler(**device)
        
        end_time = datetime.now()
        boot_time = (end_time - start_time).total_seconds()
        
        # Check boot time is under 5 minutes
        self.assertLess(boot_time, 300) 
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
``` Here are 2 unit test cases for the bootup process of an MX480 router with Python test code:

## Test Case 1 - Normal Bootup

**Setup:**
- Connect console cable to MX480 
- Power on MX480

**Execution:**
- Wait for bootup process to complete 

**Verification:**
- Verify syslogs show normal bootup messages without any errors
- Verify prompt displays hostname and `>` prompt 

**Teardown:**
- None

```python
import re
import pexpect

def test_normal_bootup():
    child = pexpect.spawn('telnet <IP ADDRESS>')
    child.expect('Login:')
    child.sendline('<USERNAME>')  
    child.expect('Password:')
    child.sendline('<PASSWORD>')
    
    child.expect(['Booting kernel','Verifying hardware configuration'])
    child.expect('Starting kernel ...')
    child.expect('Starting system logging')
    child.expect('Starting system logger')
    child.expect('daemon processes completed')
    child.expect('<HOSTNAME>>')
    
    assert child.match.group(0).endswith('<HOSTNAME>>')
```

## Test Case 2 - Bootup with Faulty Component

**Setup:**  
- Disconnect fan from MX480
- Connect console cable to MX480
- Power on MX480 

**Execution:**
- Wait for bootup process to complete

**Verification:**  
- Verify syslogs show fan failure error
- Verify prompt displays hostname and `>` prompt

**Teardown:**
- Reconnect fan to MX480

```python 
import re
import pexpect

def test_faulty_component_bootup():
    child = pexpect.spawn('telnet <IP ADDRESS>')
    child.expect('Login:')
    child.sendline('<USERNAME>')
    child.expect('Password:')
    child.sendline('<PASSWORD>')

    child.expect('Fan tray 0 failed')
    child.expect('Booting kernel')
    child.expect('Starting kernel')
    child.expect('Starting system logging') 
    child.expect('Starting system logger')
    child.expect('daemon processes completed')
    child.expect('<HOSTNAME>')
    
    assert 'Fan tray 0 failed' in child.before 
    assert child.match.group(0).endswith('<HOSTNAME>>')
``` Here are some sample Python 2 unit test cases and test code for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480

class MX480BootupTestCase(unittest.TestCase):

    def test_power_on(self):
        """Test powering on the router"""
        router = MX480()
        router.power_on()
        self.assertTrue(router.is_powered_on())

    def test_boot_sequence(self):
        """Test the router goes through the correct boot sequence"""
        router = MX480()
        router.power_on()
        
        # Check POST 
        self.assertEqual(router.get_post_status(), 'Passed')
        
        # Check boot loader
        self.assertEqual(router.get_bootloader_status(), 'Loaded')
        
        # Check kernel initialization
        self.assertEqual(router.get_kernel_status(), 'Initialized')
        
        # Check init process
        self.assertEqual(router.get_init_status(),'Complete')

    def test_boot_time(self):
        """Test boot time is within limit"""
        router = MX480()
        start = datetime.now()
        router.power_on() 
        end = datetime.now()
        duration = (end - start).total_seconds()
        self.assertLess(duration, 120)

if __name__ == '__main__':
    unittest.main()
```

The test cases check:

- The router powers on correctly 
- The boot sequence goes through the expected steps (POST, bootloader, kernel init, init process)
- The total boot time is less than the expected limit (120 seconds here)

The MX480 router class would need to be implemented with methods to power on, get boot status, etc. to allow these test cases to work. Here are 2 sample unit test cases and their respective Python test functions for testing the bootup process on an MX480 router:

## Test Case 1

Verify that the router boots up successfully and the router prompt is displayed.

```python
import pexpect

def test_bootup(router):
    child = pexpect.spawn('telnet '+router)
    child.expect('login:')
    child.sendline('admin')
    child.expect('Password:')
    child.sendline('password')
    child.expect('#')
    print("Router booted up successfully")

test_bootup('192.168.1.1')
```

## Test Case 2 

Verify that the startup configuration is loaded correctly by checking for a specific hostname.

```python
import pexpect

def test_startup_config(router, hostname):
    child = pexpect.spawn('telnet '+router)
    child.expect('login:')
    child.sendline('admin')
    child.expect('Password:')
    child.sendline('password')
    child.expect('#')
    child.sendline('show configuration | display set')
    child.expect(hostname)
    print("Startup config loaded correctly") 

test_startup_config('192.168.1.1', 'mx480-test')
```

The first test case logs into the router and verifies basic bootup by checking for the router prompt. The second test case logs in and checks the startup configuration by looking for a specific hostname. Both test key aspects of the boot process.