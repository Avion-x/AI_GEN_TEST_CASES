 Here are 2 unit test cases and corresponding Python test code for bootup process on Juniper Networks MX480 router:

## Test Case 1: Verify bootup completes successfully

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_successful_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com', 
            'username': 'netconf', 
            'password': 'password123'
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version | match JUNOS")
        
        self.assertIn("JUNOS", output)

if __name__ == '__main__':
    unittest.main()
```

This test connects to the MX480 via SSH using Netmiko and runs the `show version` command, checking that the output contains the expected "JUNOS" string, indicating successful bootup.

## Test Case 2: Verify bootup failure

```python 
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_failed_bootup(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'netconf', 
            'password': 'password123'
        }

        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        self.assertNotIn("JUNOS", output)
        
if __name__ == '__main__':
    unittest.main()
```

This test connects to the MX480 and checks that the `show version` output does NOT contain the expected "JUNOS" string, indicating a failed bootup. Here are 2 sample unit test cases for the bootup process of an MX480 router, along with sample Python test code:

### Test Case 1: Normal Bootup

**Setup:**
- Connect console cable to MX480
- Power on MX480

**Execution:** 
- Wait for MX480 to complete normal bootup process

**Verification:**
- Verify console prints "Bootup complete" 
- Verify MX480 prompt is displayed

**Teardown:**
- Disconnect console cable

```python
import unittest

class TestMX480Bootup(unittest.TestCase):

    def test_normal_bootup(self):
        # Setup
        console = connect_console()
        power_on_mx480()
        
        # Execution
        bootup_output = wait_for_bootup(console)
        
        # Verification
        self.assertIn("Bootup complete", bootup_output) 
        self.assertIn("mx480#", bootup_output)
        
        # Teardown
        console.disconnect()

```

### Test Case 2: Bootup with Faulty Component

**Setup:** 
- Connect console cable to MX480
- Disconnect fan unit 1 

**Execution:**
- Power on MX480

**Verification:**
- Verify console prints "Fan unit 1 failure"
- Verify MX480 prompt is not displayed

**Teardown:**
- Reconnect fan unit 1
- Disconnect console cable

```python
import unittest 

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_with_fault(self):
      # Setup  
      console = connect_console()
      disconnect_fan_unit_1()
      
      # Execution
      bootup_output = power_on_mx480()
      
      # Verification
      self.assertIn("Fan unit 1 failure", bootup_output)
      self.assertNotIn("mx480#", bootup_output)
      
      # Teardown
      reconnect_fan_unit_1()
      console.disconnect()
``` Here are some sample Python 2 unit test cases and code snippets for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480

class MX480BootupTestCase(unittest.TestCase):

    def test_bootup_coldstart(self):
        """Test cold bootup process"""
        router = MX480()
        router.power_off()
        
        # Cold boot
        router.power_on()
        
        # Verify bootup completed
        self.assertTrue(router.is_ready())
        
    def test_bootup_warmstart(self):
        """Test warm bootup process"""
        router = MX480()
        
        # Warm reboot
        router.reboot() 
        
        # Verify bootup completed 
        self.assertTrue(router.is_ready())

    def test_bootup_time(self):
        """Test bootup time is within limit"""
        router = MX480()
        router.power_off()
        
        start = datetime.now()
        router.power_on()
        end = datetime.now()
        
        bootup_time = (end - start).total_seconds()
        
        # Verify bootup time
        self.assertLess(bootup_time, 300) 

```

The test cases validate cold boot, warm boot sequences and bootup time. The MX480 class would contain methods like `power_on()`, `power_off()` , `reboot()` and `is_ready()` to control and check state of the router. The tests make assertions using `assertTrue()` and `assertLess()` methods to verify the expected bootup behavior.

Some key points:

- Use `unittest` framework to organize test cases into classes and methods
- Write separate test methods for each scenario like cold boot, warm boot 
- Use assertions like `assertTrue()`, `assertLess()` to validate bootup
- Mock/Stub router class methods to simulate router actions
- Check bootup time using datetime module

This provides a template for writing UNIT test cases to validate bootup of the MX480 router. Additional tests can be added to cover different failure scenarios and edge cases. Here are 2 unit test cases and their respective Python test code snippets for testing the bootup process on an MX480 router:

## Test Case 1 - Verify bootup completes successfully

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_completes(self):
        device = {
            'device_type': 'juniper',
            'host': 'mx480.example.com',
            'username': 'netconf', 
            'password': 'password123',
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        # Verify version string is present 
        self.assertIn("Junos: 19.3R1.8", output) 
        
        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test case connects to the MX480 router after bootup and verifies the version string is present in the output of `show version`, indicating bootup completed successfully.

## Test Case 2 - Verify default configuration after bootup

```python 
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_default_config(self):
        device = {
            # Device credentials
        }
        
        net_connect = ConnectHandler(**device)
        
        # Verify key settings e.g. NTP, logging, interfaces
        ntp_output = net_connect.send_command("show ntp associations")
        self.assertIn("synchronized", ntp_output)

        log_output = net_connect.send_command("show system syslog")
        self.assertNotIn("error", log_output)

        interface_output = net_connect.send_command("show interfaces terse")
        self.assertNotIn("down", interface_output)

        net_connect.disconnect()
        
if __name__ == '__main__':
    unittest.main()
```

This test validates key default configuration settings like NTP sync status, logging, and interfaces are as expected after bootup.