 Here are 2 unit test cases and corresponding Python test code snippets for bootup process testing of Juniper Networks MX480 router:

## Test Case 1 - Verify bootup completes successfully

```python
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_success(self):
        device = {
            'device_type': 'juniper',
            'host': '192.168.1.1',
            'username': 'netconf', 
            'password': 'password123',
        }
        
        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        self.assertIn("JUNOS Software Release [12.1R1.9]", output)
```

This test connects to the router after bootup and verifies the expected JUNOS version string is present in the output of `show version` command.

## Test Case 2 - Verify bootup failure

```python 
import unittest
from netmiko import ConnectHandler

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_failure(self):
        device = {
            'device_type': 'juniper',
            'host': '192.168.1.1',
            'username': 'netconf',
            'password': 'password123',
        }

        net_connect = ConnectHandler(**device)
        output = net_connect.send_command("show version")
        
        self.assertNotIn("JUNOS Software Release", output)
```

This test connects to the router after a failed bootup and verifies the JUNOS version string is NOT present in the output of `show version` command. Here are 2 unit test cases for the bootup process of an MX480 router, with Python test code and markdown formatting:

## Test Case 1 - Normal Bootup

### Setup
- Power off the MX480
- Connect console cable from MX480 to test PC
- Start terminal emulator and connect to console port 

### Execution
- Power on the MX480
- Wait for boot messages on console

### Verification
- Verify the following messages are printed on the console:
    - `Booting kernel`
    - `Starting kernel...` 
    - `Initializing kernel parameters...`
    - `Starting system logger...`
    - `Starting system services...`
    - `Junos version...`
    - `Startup configuration loaded successfully` 

### Teardown
- Power off MX480
- Disconnect console cable

```python
import re
import serial

def test_normal_bootup():
    ser = serial.Serial('/dev/ttyUSB0', 115200)
    ser.write(b"\n")
    
    expected_msgs = [
        "Booting kernel",
        "Starting kernel...",
        "Initializing kernel parameters...", 
        "Starting system logger...",
        "Starting system services...",
        "Junos version...",
        "Startup configuration loaded successfully"
    ]

    for msg in expected_msgs:
        output = ser.read_until(msg.encode())
        assert re.search(msg.encode(), output)

    ser.close()
```

## Test Case 2 - Bootup with Corrupted Configuration

### Setup 
- Power off the MX480
- Connect console cable from MX480 to test PC
- Modify the startup configuration to contain errors
- Start terminal emulator and connect to console port

### Execution
- Power on the MX480
- Wait for boot messages on console

### Verification
- Verify the following messages are printed on the console:
    - `Booting kernel`
    - `Starting kernel...`
    - `Initializing kernel parameters...` 
    - `Starting system logger...`
    - `Starting system services...`
    - `Junos version...` 
    - `Failed to load startup configuration`
    - `Loaded default fallback configuration`

### Teardown
- Power off the MX480
- Restore original startup configuration 
- Disconnect console cable

```python
import re 
import serial

def test_corrupted_config_bootup():
    ser = serial.Serial('/dev/ttyUSB0', 115200)
    ser.write(b"\n")
    
    expected_msgs = [
        "Booting kernel",
        "Starting kernel...",
        "Initializing kernel parameters...",
        "Starting system logger...", 
        "Starting system services...",
        "Junos version...",
        "Failed to load startup configuration",
        "Loaded default fallback configuration"
    ]

    for msg in expected_msgs:
        output = ser.read_until(msg.encode())
        assert re.search(msg.encode(), output)

    ser.close()
``` Here are some example Python 2 unit test cases and code snippets for testing the bootup process of the MX480 router:

```python
import unittest
from router import MX480

class TestMX480Bootup(unittest.TestCase):

    def test_bootup_cold_start(self):
        """Test cold bootup process"""
        mx480 = MX480()
        mx480.power_off()
        
        # Bootup from cold start
        mx480.power_on()
        
        # Verify bootup completed successfully
        self.assertTrue(mx480.is_booted())
        
        
    def test_bootup_warm_start(self):
        """Test warm bootup process"""
        mx480 = MX480()
        
        # Initiate warm reboot
        mx480.reboot() 
        
        # Verify bootup completed successfully
        self.assertTrue(mx480.is_booted())
        
    
    def test_bootup_time(self):
        """Verify bootup time is within limit"""
        mx480 = MX480()
        mx480.power_off()
        
        start_time = time.time()
        mx480.power_on()
        end_time = time.time()
        
        bootup_time = end_time - start_time
        
        # Check bootup time is < 5 minutes
        self.assertLess(bootup_time, 300) 

```

The test cases check for successful bootup from cold start, warm reboot, and verify bootup time is within expected limit. 

The MX480 class would contain methods like `power_on()`, `reboot()` and `is_booted()` to control and check state of the device. Additional tests could check specific stages of the boot process by calling methods exposed by MX480 class.

This provides a template for test driven development of the MX480 device class by first defining test cases, then implementing just enough code to pass the tests. Tests can be run using `unittest` module. Here are 2 unit test cases and corresponding Python test code for testing the bootup process on an MX480 router:

## Test Case 1 - Verify Bootup Completes Successfully

**Steps:**
1. Power on the MX480 router. 
2. Wait for the router to complete the bootup process.
3. Verify the router prompt is displayed and router is ready for login.

**Expected Result:** 
Router bootup completes successfully and router prompt is displayed.

```python
import re
import paramiko

def test_bootup_success(hostname, username, password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(hostname=hostname, username=username, password=password) 
    
    output = ssh.exec_command("show version")
    version = output.read().decode('utf-8')
    
    assert re.search(r'JUNOS [0-9\.]+', version)
    print("Test Passed - Router booted up successfully")
```

## Test Case 2 - Verify Bootup Failure

**Steps:** 
1. Disconnect power supply from the MX480 router.
2. Power on the router and wait for it to initiate bootup. 
3. Verify bootup process fails with an error.

**Expected Result:**
Router bootup fails with an error due to disconnected power supply.

```python
import time
from jnpr.junos import Device
from jnpr.junos.exception import ConnectError

def test_bootup_failure(hostname, username, password):
    dev = Device(host=hostname, user=username, password=password).open()
    
    # Disconnect power supply
    dev.cli("request pfe poweroff")
    
    try:
        # Initiate reboot
        dev.reboot()
        
        # Wait for device to bootup
        dev.wait_for_reboot()
        
    except ConnectError as e:
        print("Test Passed - ConnectError raised during bootup")
        
    except Exception as e:
        print("Test Failed - Unexpected error: " + str(e))
```