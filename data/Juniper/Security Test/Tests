 ###STARTLIST###
[
  {
    "testname": "Fan Redundancy Test 1",
    "testcase": {
      "testname": "Fan Redundancy Test 1", 
      "objective": "Verify that the router will detect fan failure and trigger redundancy",
      "steps": [
        "Power off one of the fans", 
        "Verify that the redundant fan kicks in and replaces the failed fan",
        "Verify that an alarm is triggered indicating fan failure"
      ],
      "test_data": {
        "router_model": "MX480",
        "fan_count": 4,
        "redundant_fan_count": 2  
      }
    },
    "testscript": {
      "testname": "Fan Redundancy Test 1",
      "objective": "Automate fan failure scenario and validation",  
      "file_name": "test_fan_redundancy.py",
      "init_scripts":[
        "pip install paramiko",
        "pip install junos-eznc"
      ],
      "script": """
        import time
        import paramiko
        from jnpr.junos import Device
        
        ip = '10.1.1.1'
        username = 'testuser'
        password = 'test123'
        
        dev = Device(host=ip, user=username, password=password)
        dev.open()
        
        # Power off Fan 1
        print('Powering off Fan 1')
        dev.cli('request chassis fpc slot 0 offline') 
        
        time.sleep(60)
        
        # Check fan status and alarms
        print('Checking fan status and alarms...')
        fans = dev.rpc.get_chassis_inventory() 
        alarms = dev.rpc.get_system_alarm_information()
        
        fan1_status = fans.findtext('.//chassis-module-info[name="FPC 0"]/chassis-sub-module-info[name="Midplane FAN 1"]/state')
        fan2_status = fans.findtext('.//chassis-module-info[name="FPC 0"]/chassis-sub-module-info[name="Midplane FAN 2"]/state')
        
        fan_alarm = alarms.findtext('.//alarm-summary/re-fan-failure')
        
        if fan1_status == 'Empty' and fan2_status == 'OK' and fan_alarm == '1':
            print('Fan redundancy test passed!')
        else:
            print('Fan redundancy test failed!')
            
        dev.close()
      """,
      "run_command": "python test_fan_redundancy.py",
      "expected_result": "Fan redundancy test passed!"
    }
  },

  {
    "testname": "Fan Redundancy Test 2",
    "testcase": {
      "testname": "Fan Redundancy Test 2",
      "objective": "Verify that the router will detect multiple fan failures and trigger redundancy",
      "steps": [
        "Power off two fans",
        "Verify that both redundant fans kick in and replace the failed fans", 
        "Verify that an alarm is triggered for each fan failure"  
      ],
      "test_data": {
        "router_model": "MX480",
        "fan_count": 4, 
        "redundant_fan_count": 2
      }
    },
    "testscript": {
      "testname": "Fan Redundancy Test 2",
      "objective": "Automate multiple fan failure scenario and validation",
      "file_name": "test_fan_redundancy.py",
      "init_scripts":[
        "pip install paramiko",
        "pip install junos-eznc"  
      ],
      "script": """
        import time
        import paramiko
        from jnpr.junos import Device
        
        ip = '10.1.1.1'
        username = 'testuser' 
        password = 'test123'
        
        dev = Device(host=ip, user=username, password=password)
        dev.open()
        
        # Power off Fan 1 and Fan 2
        print('Powering off Fan 1 and Fan 2')
        dev.cli('request chassis fpc slot 0 offline')
        dev.cli('request chassis fpc slot 1 offline')
        
        time.sleep(60)
        
        # Check fan status and alarms
        print('Checking fan status and alarms...')
        fans = dev.rpc.get_chassis_inventory()
        alarms = dev.rpc.get_system_alarm_information()
        
        fan1_status = fans.findtext('.//chassis-module-info[name="FPC 0"]/chassis-sub-module-info[name="Midplane FAN 1"]/state') 
        fan2_status = fans.findtext('.//chassis-module-info[name="FPC 0"]/chassis-sub-module-info[name="Midplane FAN 2"]/state')
        
        fan1_alarm = alarms.findtext('.//alarm-summary/re-fan-failure[1]')
        fan2_alarm = alarms.findtext('.//alarm-summary/re-fan-failure[2]')
        
        if fan1_status == 'Empty' and fan2_status == 'Empty' and fan1_alarm == '1' and fan2_alarm == '1':
            print('Fan redundancy test passed!')
        else:
            print('Fan redundancy test failed!')
            
        dev.close()
    """,
      "run_command": "python test_fan_redundancy.py",
      "expected_result": "Fan redundancy test passed!"
    }
  }
]
###ENDLIST### Here are 2 Security Test cases and Python test scripts for Fan redundancy for Junipers MX483 focusing on ports and address verification:

###STARTLIST###
[
{
  "testname": "Port Mappings Test",
  "testcase": {
    "testname": "Port Mappings Test",  
    "objective": "Verify correct port mappings for fan redundancy",
    "steps": [
      "Verify fans are mapped to correct ports",
      "Verify redundant fans are on separate ports"
    ],
    "test_data": {
      "fan_ports": [
        {"fan1": "ge-0/0/10"}, 
        {"fan2": "ge-0/0/11"}
      ]
    }
  },

  "testscript": {
    "testname": "Port Mappings Test",
    "objective": "Verify correct port mappings for fan redundancy",   
    "file_name": "test_fan_ports.py",
    "init_scripts": [
      "pip install napalm"  
    ],
    "script": """
import napalm

fan_ports = [
  {"fan1": "ge-0/0/10"},
  {"fan2": "ge-0/0/11"}  
]

driver = napalm.get_network_driver('junos')
device = driver('192.168.0.1', 'user', 'pass')
device.open()

fan1_port = device.get_facts()['interface_list']['ge-0/0/10']
fan2_port = device.get_facts()['interface_list']['ge-0/0/11']

if fan1_port['is_up'] and fan2_port['is_up']:
  print("Port mappings verified successful")
else:
  print("Port mappings could not be verified")
  
device.close()
    """,
    "run_command": "python test_fan_ports.py",
    "expected_result": "Port mappings verified successful"
  }
},

{
  "testname": "Address Verification Test",
  "testcase": {    
    "testname": "Address Verification Test",
    "objective": "Verify fan IP addresses are accessible",
    "steps": [
      "Verify reachability to fan1 address",
      "Verify reachability to fan2 address"
    ],
    "test_data": {
      "fan1_ip": "192.168.0.10",
      "fan2_ip": "192.168.0.11" 
    }
  },

  "testscript": {
    "testname": "Address Verification Test",
    "objective": "Verify fan IP addresses are accessible",    
    "file_name": "test_fan_ips.py",
    "init_scripts": [
      "pip install napalm",
      "pip install ping3"
    ],
    "script": """  
import ping3
import napalm

fan1_ip = '192.168.0.10'
fan2_ip = '192.168.0.11'

fan1_reachable = ping3.ping(fan1_ip)
fan2_reachable = ping3.ping(fan2_ip)

if fan1_reachable and fan2_reachable:
  print("Fan IP reachability verified successful")
else:
  print("Fan IP reachability could not be verified")
    """,
    "run_command": "python test_fan_ips.py", 
    "expected_result": "Fan IP reachability verified successful"
  }
}
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Fan Redundancy Test 1", 
    "testcase": {
      "testname": "Fan Redundancy Test 1",
      "objective": "Verify that the system remains operational when Fan 1 is powered off",
      "steps": [
        "1. Note current operating status of the system", 
        "2. Power off Fan 1",
        "3. Verify that the system remains operational"
      ],
      "test_data": {
        "system_under_test": "Juniper MX480",
        "fan_to_power_off": "Fan 1"  
      }
    },
    "testscript": {
      "testname": "Fan Redundancy Test 1",
      "objective": "Verify that the system remains operational when Fan 1 is powered off", 
      "file_name": "fan_redundancy_test1.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko",
      ],
      "script": """
import paramiko
import time

def test_fan_redundancy(ip, username, password):
  
  print("Connecting to device")
  client = paramiko.SSHClient()
  client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  client.connect(ip, username=username, password=password)

  print("Checking initial state")
  stdin, stdout, stderr = client.exec_command("show chassis environment")
  init_status = stdout.read().decode()
  print(init_status)

  print("Powering off Fan 1")
  stdin, stdout, stderr = client.exec_command("request chassis fpc slot 0 pic 0 power off")
  
  print("Waiting for 30 seconds")
  time.sleep(30)
  
  print("Checking status after powering off Fan 1")
  stdin, stdout, stderr = client.exec_command("show chassis environment")
  current_status = stdout.read().decode()
  print(current_status)
  
  if "OK" in current_status:
    print("TEST PASSED - System remained operational")
  else:
    print("TEST FAILED - System did not remain operational")
    
  client.close()

ip = "10.1.1.1" 
username = "admin"
password = "juniper123"

test_fan_redundancy(ip, username, password)
      """,
      "run_command": "python fan_redundancy_test1.py",
      "expected_result": "TEST PASSED - System remained operational"
    }
  },

  {
    "testname": "Fan Redundancy Test 2",
    "testcase": {
      "testname": "Fan Redundancy Test 2",
      "objective": "Verify that the system remains operational when Fan 2 is powered off",
      "steps": [
        "1. Note current operating status of the system",
        "2. Power off Fan 2", 
        "3. Verify that the system remains operational"
      ],
      "test_data": {
        "system_under_test": "Juniper MX480",
        "fan_to_power_off": "Fan 2"
      }
    },
    "testscript": {
      "testname": "Fan Redundancy Test 2",
      "objective": "Verify that the system remains operational when Fan 2 is powered off",
      "file_name": "fan_redundancy_test2.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
import paramiko
import time

def test_fan_redundancy(ip, username, password):

  print("Connecting to device")
  client = paramiko.SSHClient()
  client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  client.connect(ip, username=username, password=password)

  print("Checking initial state")
  stdin, stdout, stderr = client.exec_command("show chassis environment")
  init_status = stdout.read().decode()
  print(init_status)

  print("Powering off Fan 2")
  stdin, stdout, stderr = client.exec_command("request chassis fpc slot 1 pic 0 power off")
  
  print("Waiting for 30 seconds")
  time.sleep(30)
  
  print("Checking status after powering off Fan 2")
  stdin, stdout, stderr = client.exec_command("show chassis environment")
  current_status = stdout.read().decode()
  print(current_status)
  
  if "OK" in current_status:
    print("TEST PASSED - System remained operational")
  else:
    print("TEST FAILED - System did not remain operational")
    
  client.close()

ip = "10.1.1.1"
username = "admin"  
password = "juniper123"

test_fan_redundancy(ip, username, password)
    """,
    "run_command": "python fan_redundancy_test2.py", 
    "expected_result": "TEST PASSED - System remained operational"
    }
  }
]
###ENDLIST###