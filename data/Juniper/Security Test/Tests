 ###STARTLIST###
[
  {
    "testname": "Test ping reachability", 
    "testcase": {
      "objective": "Verify ping reachability to a remote host",
      "steps": [
        "Configure ping on MX", 
        "Ping remote host IP",
        "Verify ping succeeds"
      ],
      "test_data": {
        "remote_host_ip": "8.8.8.8"  
      }
    },
    "testscript": {
      "testname": "Test ping reachability",
      "objective": "Verify ping reachability to a remote host", 
      "file_name": "test_ping.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install junos-eznc"
      ],
      "script": """
from netmiko import ConnectHandler
from jnpr.junos import Device

def test_ping(device, remote_ip):
  device.cli('configure')
  device.cli('set protocols ping')
  ping_out = device.cli(f'ping {remote_ip}')
  return '!!!!!' in ping_out

dev = {
  'device_type': 'juniper',
  'host': '192.168.1.1',
  'username': 'myuser',
  'password': 'mypassword' 
}

net_connect = ConnectHandler(**dev)
ping_result = test_ping(net_connect, '8.8.8.8')

if ping_result:
  print('Ping test passed')
else:
  print('Ping test failed')
      """,
      "run_command": "python test_ping.py",
      "expected_result": "Ping test passed"
    }
  },
  
  {
    "testname": "Test SNMP connectivity",
    "testcase": {
      "objective": "Verify SNMP connectivity to device",
      "steps": [
        "Enable SNMP on device",
        "Send SNMP get request", 
        "Verify SNMP response is received"
      ],
      "test_data": {
        "device_ip": "192.168.1.1",
        "oid": "1.3.6.1.2.1.1.1.0"  
      }
    },
    "testscript": {
      "testname": "Test SNMP connectivity",
      "objective": "Verify SNMP connectivity to device",
      "file_name": "test_snmp.py", 
      "init_scripts": [
        "pip install easysnmp"
      ],
      "script": """  
from easysnmp import Session

def test_snmp(device_ip, oid_to_get):
  session = Session(hostname=device_ip, community='public', version=2)
  sys_desc = session.get(oid_to_get)
  return sys_desc.value is not None

snmp_result = test_snmp('192.168.1.1', '1.3.6.1.2.1.1.1.0')

if snmp_result:
  print('SNMP test passed')
else:
  print('SNMP test failed')
      """,
      "run_command": "python test_snmp.py", 
      "expected_result": "SNMP test passed"
    }
  }
]
###ENDLIST### Here are two unit testcases with Python test scripts for Juniper MX482 port mapping and address verification:

###STARTLIST###

[
  {
    "testname": "Test Port Mapping", 
    "testcase": {
      "testname": "Test Port Mapping",
      "objective": "Verify all ports on the MX482 are mapped to the correct interfaces",
      "steps": [
        "Check configuration for port mappings", 
        "Verify port ge-0/0/0 maps to interface xe-0/0/0",
        "Verify port ge-0/0/1 maps to interface xe-0/0/1", 
        "Verify remaining ports follow expected mapping"
      ],
      "test_data": {
        "port_mappings": {
          "ge-0/0/0": "xe-0/0/0",
          "ge-0/0/1": "xe-0/0/1"
        }
      }
    },
    "testscript": {
      "testname": "Test Port Mapping",
      "objective": "Verify port mappings on MX482", 
      "file_name": "test_port_mappings.py",
      "init_scripts": [
        "pip install pyez",
        "from jnpr.junos import Device"
      ],
      "script": """
        dev = Device(host='mx482', user='testuser', password='testpass')
        dev.open()
        
        port_mappings = {
          'ge-0/0/0': 'xe-0/0/0',
          'ge-0/0/1': 'xe-0/0/1' 
        }
        
        for port, interface in port_mappings.items():
          assert dev.cli(f'show interfaces {port}').find(interface) >= 0
          
        dev.close()
      """,
      "run_command": "python test_port_mappings.py",
      "expected_result": "All tests pass"
    }
  },
  
  {
    "testname": "Test IP Addresses",
    "testcase": {
      "testname": "Test IP Addresses",
      "objective": "Verify assigned IP addresses on interfaces",
      "steps": [
        "Check interface configurations",
        "Verify IP address 192.0.2.1 assigned to xe-0/0/0", 
        "Verify IP address 192.0.2.2 assigned to xe-0/0/1",
        "Verify remaining interfaces have expected IP addresses"  
      ],
      "test_data": {
        "ip_mappings": {
          "xe-0/0/0": "192.0.2.1/24",
          "xe-0/0/1": "192.0.2.2/24"  
        }
      }
    },
    "testscript": {
      "testname": "Test IP Addresses",
      "objective": "Verify assigned IP addresses",
      "file_name": "test_ip_addresses.py",
      "init_scripts": [
        "pip install pyez",
        "from jnpr.junos import Device"
      ],
      "script": """
        dev = Device(host='mx482', user='testuser', password='testpass')
        dev.open()
        
        ip_mappings = {
          'xe-0/0/0': '192.0.2.1/24',
          'xe-0/0/1': '192.0.2.2/24' 
        }
        
        for interface, ip in ip_mappings.items():
          assert dev.cli(f'show interfaces {interface}').find(ip) >= 0
        
        dev.close()
      """,
      "run_command": "python test_ip_addresses.py", 
      "expected_result": "All tests pass"
    }
  }
]

###ENDLIST### ###STARTLIST###
[
{
  "testname": "Port Status Test",
  "testcase": {
    "testname": "Port Status Test",
    "objective": "Verify all ports on the MX device are operationally up.",
    "steps": [
      "Connect to the MX device and retrieve the port status for all ports.",
      "Verify the operational status of each port is 'up'."
    ]
  },

  "testscript": {
    "testname": "Port Status Test",  
    "objective": "Verify all ports on the MX device are operationally up.",
    "file_name": "port_status_test.py",
    "init_scripts": [
      "pip install netmiko",
      "pip install junos-eznc"
    ],
    "script": """
import netmiko
from jnpr.junos import Device

dev = Device(host='192.168.0.1', user='netconf', password='password')
dev.open()

ports = dev.rpc.get_interface_information()

for port in ports:
  if port.oper_status != 'up':
    print(f'Port {port.name} is operationally {port.oper_status}')

print('All ports are operationally up')
    """,
    "run_command": "python port_status_test.py", 
    "expected_result": "All ports are operationally up"
  }
},

{
  "testname": "Port Speed Test",
  "testcase": {
    "testname": "Port Speed Test",
    "objective": "Verify all ports on the MX device are running at the expected speed.",
    "steps": [
      "Connect to the MX device and retrieve the port speed for all ports.",
      "Verify the speed of each port matches the expected configured speed." 
    ]
  },

  "testscript": {
    "testname": "Port Speed Test",
    "objective": "Verify all ports on the MX device are running at the expected speed.",
    "file_name": "port_speed_test.py",
    "init_scripts": [
      "pip install netmiko",
      "pip install junos-eznc"
    ],
    "script": """  
import netmiko
from jnpr.junos import Device

EXPECTED_SPEEDS = {'ge-0/0/0': '1Gbps', 
                   'ge-0/0/1': '1Gbps',
                   'ge-0/0/2': '10Gbps'}

dev = Device(host='192.168.0.1', user='netconf', password='password') 
dev.open()

ports = dev.rpc.get_interface_information()

for port in ports:
  if port.speed != EXPECTED_SPEEDS[port.name]:
    print(f'Port {port.name} expected speed is {EXPECTED_SPEEDS[port.name]} but actual speed is {port.speed}') 

print('All ports are running at expected speed')
    """,
    "run_command": "python port_speed_test.py",
    "expected_result": "All ports are running at expected speed"
  }
}
]
###ENDLIST###