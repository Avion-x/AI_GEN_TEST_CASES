 ###STARTLIST###
[
  {
    "testname": "CPU Utilization Threshold", 
    "testcase": {
      "testname": "CPU Utilization Threshold",
      "objective": "Verify CPU utilization stays below a configured threshold",
      "steps": [
        "1. Configure CPU utilization threshold on the device", 
        "2. Generate traffic on the device",
        "3. Verify CPU utilization stays below configured threshold"
      ],
      "test_data": {
        "cpu_threshold": 80, 
        "traffic_profile": "HTTP",
        "duration": 60
      }
    },
    "testscript": {
      "testname": "CPU Utilization Threshold",
      "objective": "Verify CPU utilization stays below a configured threshold", 
      "file_name": "test_cpu_utilization.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install junos-eznc" 
      ],
      "script": """
        \"\"\"
        1. Connect to device and configure CPU threshold
        2. Start traffic generator
        3. Poll CPU utilization
        4. Verify utilization < threshold
        5. Stop traffic
        6. Cleanup configuration
        \"\"\"
        
        # Imports
        import time
        from jnpr.junos import Device
        
        # Test data
        cpu_threshold = ${test_data['cpu_threshold']}
        traffic_duration = ${test_data['duration']}
        
        # Connect and configure device
        dev = Device(host='1.1.1.1', user='testuser', password='password123')
        dev.open()
        dev.cli('set chassis environment threshold cpu-utilization ' + str(cpu_threshold))
        
        # Start traffic
        start_traffic('${test_data['traffic_profile']}')
                
        # Verify CPU utilization
        end_time = time.time() + traffic_duration
        while time.time() < end_time:
          cpu_utilization = dev.cli('show chassis environment cpu')
          utilization = get_cpu_utilization(cpu_utilization)
          assert utilization < cpu_threshold
          
        # Stop traffic
        stop_traffic()
        
        # Cleanup
        dev.cli('delete chassis environment threshold cpu-utilization')
        dev.close()
      """,
      "run_command": "python test_cpu_utilization.py",
      "expected_result": "CPU utilization stays below configured threshold"
    }
  },
  
  {
    "testname": "BGP Session Flapping",
    "testcase": {
      "testname": "BGP Session Flapping",
      "objective": "Detect and alert on BGP session flaps exceeding threshold",
      "steps": [
        "1. Configure BGP session on device",
        "2. Introduce flaps in BGP session",
        "3. Verify flaps are detected and alert is generated when threshold exceeded" 
      ],
      "test_data": {
        "flap_threshold": 5,
        "flap_interval": 60, 
        "total_flaps": 8
      }
    },
    "testscript": {
      "testname": "BGP Session Flapping",
      "objective": "Detect and alert on BGP session flaps exceeding threshold",
      "file_name": "test_bgp_flap.py",
      "init_scripts": [
        "pip install pexpect"
      ],
      "script": """
        \"\"\"
        1. Configure BGP session on DUT
        2. Connect to DUT and start monitoring BGP sessions
        3. Flap BGP session from TG
        4. Verify flaps detected and alert generated
        \"\"\"
        
        # Imports
        import pexpect
        
        # Test data
        flap_threshold = ${test_data['flap_threshold']}
        flap_interval = ${test_data['flap_interval']}
        total_flaps = ${test_data['total_flaps']}
        
        # Configure BGP session
        configure_bgp_session('dut', 'tg')
        
        # Start monitoring BGP
        child = pexpect.spawn('show bgp summary')
        flaps_detected = 0
        
        # Flap session
        for i in range(total_flaps):
          flap_bgp_session('dut', 'tg')
          time.sleep(flap_interval)
          
          # Check for flap detected
          index = child.expect(['TCP Down'])
          if index == 0:
            flaps_detected += 1
            
        # Verify flaps detected    
        assert flaps_detected >= flap_threshold
        
        # Generate alert
        if flaps_detected > flap_threshold:
          generate_alert()
      """,
      "run_command": "python test_bgp_flap.py",
      "expected_result": "BGP flaps detected and alert generated when exceeding threshold"
    }
  }
]
###ENDLIST###