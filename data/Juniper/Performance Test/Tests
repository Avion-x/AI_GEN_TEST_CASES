 Here are 5 test cases with Python test scripts for the Juniper MX480 router:

###STARTLIST###
[
{
  "testname": "Traffic Forwarding Test",
  "testcase": {
    "testname": "Traffic Forwarding Test",  
    "objective": "Verify traffic forwarding between interfaces",
    "steps": [
      "Configure 2 interfaces with IP addresses in different subnets",
      "Send pings from one interface to the other", 
      "Verify ping replies are received"
    ]
  },
  "testscript": {
    "testname": "Traffic Forwarding Test",
    "objective": "Verify traffic forwarding between interfaces",
    "file_name": "traffic_forwarding.py",
    "init_scripts": "pip install napalm",
    "script": """
import napalm

driver = napalm.get_network_driver("junos")
device = driver(hostname="192.168.0.1", username="testuser", password="test123")
device.open()

ping_output = device.cli("ping 192.168.0.2")
device.close()

if "!!!!!" in ping_output:
  print("Ping test passed")
else:
  print("Ping test failed")
""",
    "run_command": "python traffic_forwarding.py", 
    "expected_result": "Ping test passed"
  }
},

{
  "testname": "OSPF Neighborship Test",
  "testcase": {
    "testname": "OSPF Neighborship Test",
    "objective": "Verify OSPF adjacency is established",
    "steps": [
      "Configure OSPF on two directly connected interfaces",
      "Verify OSPF neighbors are seen in show ospf neighbor output" 
    ]
  },
  "testscript": {
    "testname": "OSPF Neighborship Test",
    "objective": "Verify OSPF adjacency is established", 
    "file_name": "ospf_neighbor.py",
    "init_scripts": "pip install napalm",
    "script": """  
import re
import napalm

driver = napalm.get_network_driver("junos")
device = driver(hostname="192.168.0.1", username="testuser", password="test123")
device.open()

ospf_neighbor = device.cli("show ospf neighbor")
device.close()

match = re.search(r"(\d+\.\d+\.\d+\.\d+)\s+Full", ospf_neighbor)
if match:
  print("OSPF neighborship verified")
else:
  print("OSPF neighborship failed")
""",
    "run_command": "python ospf_neighbor.py",
    "expected_result": "OSPF neighborship verified"
  }
},

{
  "testname": "LAN connectivity Test",
  "testcase": {
    "testname": "LAN connectivity Test",
    "objective": "Validate connectivity between hosts in the same VLAN",
    "steps": [
      "Configure VLAN with multiple ports",
      "Connect hosts to VLAN ports",
      "Verify hosts can ping each other"
    ]
  },
  "testscript": {
    "testname": "LAN connectivity Test",
    "objective": "Validate connectivity between hosts in the same VLAN",
    "file_name": "vlan_connectivity.py", 
    "init_scripts": "pip install napalm",
    "script": """
import napalm

driver = napalm.get_network_driver("junos")
device = driver(hostname="192.168.0.1", username="testuser", password="test123")
device.open()

ping_output1 = device.cli("run ping 192.168.10.2 source 192.168.10.3")  
ping_output2 = device.cli("run ping 192.168.10.3 source 192.168.10.2")
device.close()

if "!!!!!" in ping_output1 and "!!!!!" in ping_output2:
  print("VLAN connectivity test passed") 
else:
  print("VLAN connectivity test failed")
""",
    "run_command": "python vlan_connectivity.py",
    "expected_result": "VLAN connectivity test passed"
  }
},

{
  "testname": "QoS Traffic Shaping Test",
  "testcase": {
    "testname": "QoS Traffic Shaping Test",
    "objective": "Validate traffic shaping limits bandwidth",
    "steps": [
      "Configure shaping rate on egress interface",
      "Send traffic over interface close to shaping rate",
      "Verify output traffic rate matches configured shaping rate"
    ]
  },
  "testscript": {
    "testname": "QoS Traffic Shaping Test",
    "objective": "Validate traffic shaping limits bandwidth",
    "file_name": "traffic_shaping.py",
    "init_scripts": "pip install napalm",
    "script": """
import napalm

driver = napalm.get_network_driver("junos")
device = driver(hostname="192.168.0.1", username="testuser", password="test123")
device.open()

shaping_rate = 500000 # 500Mbps
traffic_rate = 480000 # Slightly below shaping rate

device.cli("set class-of-service interfaces ge-0/0/1 shaping-rate {0}".format(shaping_rate))

iperf_output = device.cli("run iperf to 192.168.0.2 bandwidth {0}".format(traffic_rate))
device.close()

if "500Mb/sec" in iperf_output:
  print("Traffic shaping test passed")
else: 
  print("Traffic shaping test failed")
""",
    "run_command": "python traffic_shaping.py",
    "expected_result": "Traffic shaping test passed" 
  }
}
]
###ENDLIST###