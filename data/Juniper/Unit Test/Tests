 ###STARTLIST###
[
  {
    "testname": "QoS Marking Test", 
    "testcase": {
      "testname": "QoS Marking Test",
      "objective": "Validate that QoS marking is working as expected on MX240 device", 
      "steps": [
        "Configure QoS policy to mark VoIP traffic to DSCP 46",
        "Generate VoIP traffic", 
        "Verify VoIP traffic is marked with DSCP 46"
      ],
      "testdata": {
        "qos_policy": "policy-options {\n    policy-statement voip-policy {\n        term 1 {\n            from {\n                protocol udp;\n                destination-port 5060;\n            }\n            then {\n                dscp 46;\n            }\n        }\n    }\n}",
        "voip_traffic": {
          "src_ip": "192.168.1.5", 
          "dst_ip": "192.168.1.20",
          "l4_proto": "udp",
          "src_port": "3000",
          "dst_port": "5060"
        }
      }
    },
    "testscript": {
      "testname": "QoS Marking Python Script",
      "objective": "Automate QoS Marking validation using Python",
      "file_name": "qos_marking_test.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
import paramiko
import netmiko

# Initialize SSH connection to DUT
ssh_conn = paramiko.SSHClient()
ssh_conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_conn.connect('192.168.1.1', username='pyuser', password='pypass')

# Initialize Netmiko connection 
net_conn = netmiko.ConnectHandler(ip='192.168.1.1', username='pyuser', password='pypass')

# Configure QoS policy
net_conn.send_config_set(qos_policy) 

# Generate test VoIP traffic
generate_voip_traffic(voip_traffic)  

# Verify QoS Marking
output = net_conn.send_command('show policy')
if 'dscp 46' in output:
  print('QoS Marking Verified')
else:
  print('QoS Marking Failed')

""",
      "run_command": "python qos_marking_test.py",
      "expected_result": "QoS Marking Verified"
    }
  }
]
###ENDLIST###