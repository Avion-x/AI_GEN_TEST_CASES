 ###STARTLIST###
[
  {
    "testname": "Bootup Configuration Retrieval Test", 
    "testcase": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the device retrieves startup configuration from persistent storage during bootup",
      "steps": [
        "Device boots up from power off state", 
        "Device loads startup configuration from persistent storage",
        "Startup configuration is applied successfully"
      ],
      "test_data": {
        "startup_config_location": "/config/juniper.conf",
        "startup_config_content": "system { ... } interfaces { ... } routing-options { ... }"  
      }
    },
    "testscript": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the device retrieves startup configuration from persistent storage during bootup", 
      "file_name": "test_bootup_config_retrieval.py",
      "init_scripts": [
        "pip install junos-eznc",
        "pip install paramiko"
      ],
      "script": """\"\"\"
- Initiate NETCONF connection to device 
- Execute RPC to retrieve currently active configuration
- Verify active config contains expected startup config content
- Test PASS if startup config was loaded, FAIL otherwise
\"\"\"

import unittest
from ncclient import manager

EXPECTED_CONFIG = \"system { ... } interfaces { ... } routing-options { ... }\"

class TestBootupConfigRetrieval(unittest.TestCase):

    def test_bootup_config(self):
        with manager.connect(host='192.168.1.1', port=2222, username='admin', password='admin123') as m:
            config = m.get_config(source='running').data_xml
            self.assertIn(EXPECTED_CONFIG, config)

if __name__ == '__main__':
    unittest.main()
""",
      "run_command": "python test_bootup_config_retrieval.py",
      "expected_result": "All test cases passed"
    }
  },

  {
    "testname": "Bootup Hardware Initialization Test",
    "testcase": {
      "testname": "Bootup Hardware Initialization Test",
      "objective": "Verify hardware components are initialized correctly during bootup",
      "steps": [
        "Device powers on",
        "POST verifies CPU, memory, interfaces", 
        "Device indicates hardware readiness"
      ],
      "test_data": {
        "cpu": "Multicore x86",
        "memory": "16GB",
        "interfaces": [
          "ge-0/0/0",
          "ge-0/0/1" 
        ]
      }
    },
    "testscript": {
      "testname": "Bootup Hardware Initialization Test",
      "objective": "Verify hardware components are initialized correctly during bootup",
      "file_name": "test_bootup_hw_init.py",
      "init_scripts": [
        "pip install junos-eznc"  
      ],
      "script": """\"\"\"
- Connect to device over NETCONF
- Retrieve hardware inventory using RPC 
- Verify CPU, memory and interfaces initialized as expected
- Test PASS if hardware matches expected, FAIL otherwise
\"\"\"
      
import unittest
from ncclient import manager

EXPECTED_CPU = "Multicore x86"
EXPECTED_MEMORY = "16GB"  
EXPECTED_INTERFACES = ["ge-0/0/0", "ge-0/0/1"]

class TestBootupHardwareInit(unittest.TestCase):

    def test_hardware_initialized(self):
        with manager.connect(host='192.168.1.1', port=2222, username='admin', password='admin123') as m:
            inventory = m.get(filter=('subtree', inventory)).data_xml
            self.assertIn(EXPECTED_CPU, inventory) 
            self.assertIn(EXPECTED_MEMORY, inventory)
            for intf in EXPECTED_INTERFACES:
                self.assertIn(intf, inventory)
                
if __name__ == '__main__':
    unittest.main()
""",
      "run_command": "python test_bootup_hw_init.py", 
      "expected_result": "All hardware components initialized successfully"
    }
  }
]
###ENDLIST###