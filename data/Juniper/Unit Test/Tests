 Here is the Python list with 2 unit test JSON objects for Juniper MX480 bootup process:

```python
###STARTLIST###
[
    {
        "testname": "test_bootup_time", 
        "testcase": {
            "testname": "test_bootup_time",
            "objective": "Validate that MX480 boots up within 300 seconds",
            "steps": [
                "1. Power on the MX480 router", 
                "2. Note start time",
                "3. Verify console shows 'Junos ready' within 300 secs", 
                "4. Note end time", 
                "5. Validate bootup time is less than 300 secs"
            ],
            "test_data": {
                "device": "MX480 router", 
                "max_bootup_time": 300
            }
        },
        "testscript": {
            "testname": "test_bootup_time",
            "objective": "Script to test MX480 bootup time",
            "file_name": "test_bootup_time.py",
            "init_scripts": "pip install datetime",
            "script": """
                import datetime
                
                start_time = datetime.datetime.now()
                print(f"Start time: {start_time}")
                
                # Code to initiate MX480 bootup
                
                end_time = datetime.datetime.now()
                print(f"End time: {end_time}")
                
                bootup_time = (end_time - start_time).total_seconds() 
                max_time = 300
                assert bootup_time < max_time, f"Bootup time {bootup_time} exceeds {max_time} seconds" 
                print("MX480 bootup time validation passed")
            """,
            "run_command": "python test_bootup_time.py",
            "expected_result": "MX480 bootup time validation passed" 
        }
    },
    {
        "testname": "test_image_version",
        "testcase": {
            "testname": "test_image_version", 
            "objective": "Validate Junos image version after MX480 bootup",
            "steps": [
                "1. Initiate MX480 bootup",
                "2. Execute 'show version' command on console", 
                "3. Verify Junos version is 22.3R1.10",
                "4. Test passes if correct version, else fails"
            ],
            "test_data": {
                "device": "MX480 router",
                "expected_junos_version": "22.3R1.10" 
            }
        },
        "testscript": {
            "testname": "test_image_version", 
            "objective": "Script to test Junos image version on MX480", 
            "file_name": "test_image_version.py", 
            "init_scripts": "import re",
            "script": """ 
                # Boot device 
                output = exec_command("show version")
                
                # Use regex to extract Junos version 
                match = re.search(r'Junos: (\d+\.\d+[A-Z]\d+\.\d+)', output)
                junos_version = match.group(1) if match else None  
                
                expected_version = "22.3R1.10"
                assert junos_version == expected_version, f"Junos version {junos_version} does not match {expected_version}"
                print("Junos image version validation passed") 
            """,
            "run_command": "python test_image_version.py", 
            "expected_result": "Junos image version validation passed"
        }
    }
]
###ENDLIST###
```

The above list contains 2 test JSON objects, one to validate bootup time and another to validate Junos image version after bootup of MX480 router. Each object contains the required fields as per the instructions. The test scripts utilize Python built-in libraries and functions to achieve the test objectives.