 Here are 5 unit test cases with python test scripts for Bootup process of Juniper MX240 router:

###STARTLIST###

[{
  "testname": "Test Boot ROM Integrity",
  "testcase": {
    "testname": "Test Boot ROM Integrity",
    "objective": "To verify the integrity of the boot ROM by checking the checksum",
    "steps": [
      "Calculate checksum of boot ROM", 
      "Verify checksum matches expected value"
    ],
    "test_data": {
      "expected_checksum": "0x1234ABCD"  
    }
  },

  "testscript": {
    "testname": "Test Boot ROM Integrity", 
    "objective": "To verify the integrity of the boot ROM by checking the checksum",
    "file_name": "test_bootrom.py",
    "init_scripts": "pip install junos-eznc",
    "script": """
import jnpr.junos
from jnpr.junos import Device

def test_bootrom(dev):
  rom_checksum = dev.rpc.get_bootrom_checksum()
  assert rom_checksum == expected_checksum

dev = Device('host', user='myuser', password='mypassword') 
dev.open()

expected_checksum = '0x1234ABCD'
test_bootrom(dev)
print('Boot ROM integrity test passed!')
""",

"run_command": "python test_bootrom.py",
"expected_result": "Boot ROM integrity test passed!"
  }
},

{
  "testname": "Test Boot Loader Version",
  
  "testcase": {
    "testname": "Test Boot Loader Version",
    "objective": "To verify the router boots with the correct boot loader version",
    "steps": [
      "Retrieve boot loader version from device",
      "Verify boot loader version matches expected"
    ],
    "test_data": {
      "expected_version": "17.3R1.10"  
    }
  },

  "testscript": {
    "testname": "Test Boot Loader Version",
    "objective": "To verify the router boots with the correct boot loader version",
    "file_name": "test_bootloader.py",  
    "init_scripts": "pip install junos-eznc",
    "script": """  
import jnpr.junos
from jnpr.junos import Device

def test_bootloader(dev, expected_version):
  actual_version = dev.rpc.get_package_information(package_name='junos-boot-initramfs')
  assert actual_version == expected_version

dev = Device('host')
dev.open()

expected_version = '17.3R1.10'
test_bootloader(dev, expected_version)

print('Boot loader version test passed!')
    """,
    
    "run_command": "python test_bootloader.py", 
    "expected_result": "Boot loader version test passed!"
  }
},

{
  "testname": "Test Kernel Load",
  
  "testcase": {
    "testname": "Test Kernel Load",
    "objective": "Verify the Junos kernel image loads successfully",  
    "steps": [
      "Start device boot process",
      "Check for kernel console messages indicating successful load"
    ],
    "test_data": {
      "expected_message": "Kernel loaded successfully"
    }
  },

  "testscript": {
    "testname": "Test Kernel Load",
    "objective": "Verify the Junos kernel image loads successfully",
    "file_name": "test_kernel.py",
    "init_scripts": "pip install junos-eznc",
    "script": """
import re
from jnpr.junos import Device

def test_kernel_load(dev, expected_message):
  console_output = dev.cli('show console log')
  match = re.search(expected_message, console_output)
  assert match is not None

dev = Device('host')
dev.open()

expected_message = 'Kernel loaded successfully'
test_kernel_load(dev, expected_message)

print('Kernel load test passed!')
    """,

    "run_command": "python test_kernel.py",
    "expected_result": "Kernel load test passed!" 
  }
},

{
  "testname": "Test Routing Engine Boot",
  
  "testcase": {
    "testname": "Test Routing Engine Boot",
    "objective": "Verify routing engines boot successfully",
    "steps": [
      "Check chassis status for expected state",
      "Verify correct RE boot timestamp in log"  
    ],
    "test_data": {
      "expected_status": "OK",
      "expected_timestamp": "2017-03-05T11:22:33"  
    }
  },

  "testscript": {
    "testname": "Test Routing Engine Boot",
    "objective": "Verify routing engines boot successfully",
    "file_name": "test_re.py",
    "init_scripts": "pip install junos-eznc",  
    "script": """
from jnpr.junos import Device 

def test_re_boot(dev, expected_status, expected_timestamp):
  status = dev.rpc.get_chassis_inventory() 
  assert status == expected_status

  log = dev.rpc.get_route_engine_information()
  timestamp = log['route-engine-information'][0]['start-time']
  assert timestamp == expected_timestamp

dev = Device('host')
dev.open()
  
expected_status = 'OK'
expected_timestamp '2017-03-05T11:22:33'

test_re_boot(dev, expected_status, expected_timestamp)
print('RE boot test passed!')
    """,
  
    "run_command": "python test_re.py",
    "expected_result": "RE boot test passed!"
  }
},

{
  "testname": "Test FPC Boot",
  
  "testcase": {
    "testname": "Test FPC Boot",
    "objective": "Verify all FPCs boot successfully",
    "steps": [
      "Check FPC status for expected state",
      "Verify correct FPC boot timestamps in log"
    ],
    "test_data": {
      "expected_status": ["OK", "OK"],
      "expected_timestamps": ["2017-03-05T11:25:11", "2017-03-05T11:25:22"]
    }
  },

  "testscript": {
    "testname": "Test FPC Boot",
    "objective": "Verify all FPCs boot successfully",
    "file_name": "test_fpc.py",
    "init_scripts": "pip install junos-eznc",
    "script": """  
from jnpr.junos import Device

def test_fpc_boot(dev, expected_status, expected_timestamps):
  status = dev.rpc.get_chassis_inventory()
  fpc_status = [pic['status'] for pic in status['chassis-inventory']['chassis']['chassis-module']]
  assert fpc_status == expected_status

  log = dev.rpc.get_chassis_chassis_module_log()
  timestamps = [entry['time-stamp'] for entry in log['chassis-module-log']]
  assert timestamps == expected_timestamps 

dev = Device('host')
dev.open()

expected_status = ['OK', 'OK'] 
expected_timestamps = ['2017-03-05T11:25:11', '2017-03-05T11:25:22']

test_fpc_boot(dev, expected_status, expected_timestamps)
print('FPC boot test passed!')
    """,

    "run_command": "python test_fpc.py",
    "expected_result": "FPC boot test passed!"
  }
}]

###ENDLIST###