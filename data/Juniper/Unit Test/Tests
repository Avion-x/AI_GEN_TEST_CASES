 ###STARTLIST###
[
  {
    "testname": "Bootup Configuration Retrieval Test", 
    "testcase": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the device can retrieve startup configuration from persistent storage during bootup",
      "steps": [
        "1. Power on the device",
        "2. Check console logs for messages related to loading startup configuration", 
        "3. Verify that the loaded startup configuration matches the expected configuration"
      ]
    },
    "testscript": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the device can retrieve startup configuration from persistent storage during bootup",
      "file_name": "test_bootup_config_retrieval.py",
      "init_scripts": [
        "import re",
        "import unittest",
        "from paramiko import SSHClient"
      ],
      "script": """
      ssh = SSHClient()
      ssh.connect('192.168.0.1', username='admin', password='password')
      
      stdin, stdout, stderr = ssh.exec_command('show configuration | compare')
      output = stdout.readlines()
      
      match = re.search('No changes between working and active configurations', ''.join(output))
      self.assertIsNotNone(match)
      """,
      "run_command": "python test_bootup_config_retrieval.py",
      "expected_result": "No differences between running and startup configuration found during retrieval and load"
    }
  },

  {
    "testname": "Bootup Hardware Initialization Test",
    "testcase": {
       "testname": "Bootup Hardware Initialization Test",
       "objective": "Verify that all hardware components are properly initialized during bootup",
       "steps": [
         "1. Power on the device",
         "2. Check console logs for hardware initialization messages",
         "3. Verify interface status shows all ports up after initialization", 
         "4. Validate LED status indicators"
       ]
    },
    "testscript": {
      "testname": "Bootup Hardware Initialization Test",
      "objective": "Verify that all hardware components are properly initialized during bootup",
      "file_name": "test_bootup_hw_init.py",
      "init_scripts": [ 
        "import re",
        "import unittest",
        "from netmiko import ConnectHandler"
      ],
      "script": """
        device = ConnectHandler(device_type='juniper', ip='192.168.0.1', username='admin', password='password')
        
        output = device.send_command('show interfaces terse')      
        interfaces = re.findall('^ge.*', output, re.M)
        
        failed = []
        for interface in interfaces:
          if not '(up)' in interface:
            failed.append(interface)
            
        self.assertEqual(len(failed), 0)
        
        print('All interfaces up') 
      """,
      "run_command": "python test_bootup_hw_init.py", 
      "expected_result": "All interface ports initialized and up after bootup. No ports down."
    }
  },

  {
    "testname": "Bootup Firmware Verification Test",
    "testcase": {
      "testname": "Bootup Firmware Verification Test",
      "objective": "Validate firmware integrity and compatibility during bootup process",
      "steps": [
        "1. Power on the device",
        "2. Check console logs for firmware version and compatibility status",
        "3. Verify firmware version matches expected version",
        "4. Confirm no incompatibility warnings or errors"   
      ]
    },
    "testscript": {
      "testname": "Bootup Firmware Verification Test",
      "objective": "Validate firmware integrity and compatibility during bootup process",
      "file_name": "test_bootup_fw_verify.py",
      "init_scripts": [
        "import re",
        "import unittest",
        "from paramiko import SSHClient"   
      ],
      "script": """
        ssh = SSHClient()
        ssh.connect('192.168.0.1', username='admin', password='password')
        
        stdin, stdout, stderr = ssh.exec_command('show version')
        output = stdout.readlines()
        
        version = re.search('JUNOS .*sw', output[0]).group()
        self.assertEqual(version, 'JUNOS 18.2R1.9 sw')
        
        compat_status = re.search('FPC compatibility check passed', ''.join(output))
        self.assertIsNotNone(compat_status)
      """,
      "run_command": "python test_bootup_fw_verify.py",
      "expected_result": "Firmware version validated and no compatibility issues found during bootup"
    }
  },

  {
    "testname": "Bootup Interface Initialization Test",
    "testcase": {
      "testname": "Bootup Interface Initialization Test",
      "objective": "Verify all network interfaces are initialized correctly during bootup",
      "steps": [
        "1. Power on the device", 
        "2. Check interface status after bootup",
        "3. Verify all expected interfaces are present in configuration",
        "4. Confirm link status of interfaces"
      ]
    },
    "testscript": {
      "testname": "Bootup Interface Initialization Test",
      "objective": "Verify all network interfaces are initialized correctly during bootup", 
      "file_name": "test_bootup_interface_init.py",
      "init_scripts": [
        "import re ",
        "import unittest",
        "from netmiko import ConnectHandler"
      ],
      "script": """
        device = ConnectHandler(device_type='juniper', ip='192.168.0.1', username='admin', password='password')
        
        output = device.send_command('show interfaces terse')
        interfaces = re.findall('^ge.*', output, re.M)
        
        missing = []
        for interface in ['ge-0/0/0', 'ge-0/0/1']:
          if interface not in interfaces:
            missing.append(interface)
            
        self.assertEqual(len(missing), 0)
        
        print('All expected interfaces initialized')
      """,
      "run_command": "python test_bootup_interface_init.py",
      "expected_result": "All expected interfaces initialized and present after bootup"
    }
  },

  {
    "testname": "Bootup Self-Test Diagnostics Test",
    "testcase": {
      "testname": "Bootup Self-Test Diagnostics Test",
      "objective": "Validate hardware self-tests and diagnostics complete successfully during bootup",
      "steps": [
        "1. Power on the device",
        "2. Check console logs for self-test and diagnostic messages",
        "3. Verify no failures or errors reported",
        "4. Confirm expected diagnostic tests performed" 
      ]
    },
    "testscript": {
      "testname": "Bootup Self-Test Diagnostics Test",
      "objective": "Validate hardware self-tests and diagnostics complete successfully during bootup",
      "file_name": "test_bootup_diagnostics.py",
      "init_scripts": [
        "import re", 
        "import unittest",
        "from paramiko import SSHClient"
      ],
      "script": """
        ssh = SSHClient()
        ssh.connect('192.168.0.1', username='admin', password='password')
        
        stdin, stdout, stderr = ssh.exec_command('show chassis hardware')
        output = stdout.readlines()
        
        diag_status = re.search('Chassis diagnostic type:*sanity/quick', ''.join(output))
        self.assertIsNotNone(diag_status)
        
        print('Chassis diagnostics completed successfully')
      """,
      "run_command": "python test_bootup_diagnostics.py",
      "expected_result": "Bootup diagnostics completed successfully with no failures"
    }
  },

  {
    "testname": "Bootup Power-On Self-Test (POST) Test",
    "testcase": {
      "testname": "Bootup Power-On Self-Test (POST) Test",
      "objective": "Verify Power-On Self-Test (POST) completes successfully during bootup",
      "steps": [
        "1. Power on the device",
        "2. Check console logs for POST results",
        "3. Confirm no POST failures reported",
        "4. Verify expected POST tests performed"
      ]
    },
    "testscript": {
      "testname": "Bootup Power-On Self-Test (POST) Test",
      "objective": "Verify Power-On Self-Test (POST) completes successfully during bootup",
      "file_name": "test_bootup_post.py",
      "init_scripts": [
        "import re",
        "import unittest",
        "from paramiko import SSHClient"  
      ],
      "script": """
        ssh = SSHClient()
        ssh.connect('192.168.0.1', username='admin', password='password')
        
        stdin, stdout, stderr = ssh.exec_command('show chassis hardware')
        output = stdout.readlines()
        
        post_status = re.search('Chassis ONLINE', ''.join(output))
        self.assertIsNotNone(post_status)
        
        print('POST completed successfully')
      """,
      "run_command": "python test_bootup_post.py",
      "expected_result": "POST completed successfully with no failures during bootup"
    }
  }
]
###ENDLIST###

The test cases and scripts cover some key aspects