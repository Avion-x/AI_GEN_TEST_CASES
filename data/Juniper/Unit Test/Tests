 ###STARTLIST###
[
  {
    "testname": "VPN Configuration Test 1", 
    "testcase": {
      "testname": "VPN Configuration Test 1",
      "objective": "Test VPN configuration between MX routers",  
      "steps": [
        "Configure VPN on MX router",
        "Establish VPN tunnel",
        "Ping remote VPN endpoint"
      ],
      "test_data": {
        "MX_IP": "192.168.1.1",
        "Remote_MX_IP": "172.16.1.1",
        "Shared_Key": "abc123"  
      }
    },
    "testscript": {
      "testname": "VPN Configuration Test 1",
      "objective": "Test VPN configuration between MX routers",
      "file_name": "test_vpn_config_1.py",
      "init_scripts": [
        "pip install paramiko"
      ],
      "script": """
        import paramiko
        
        mx_ip = test_data['MX_IP']
        remote_mx_ip = test_data['Remote_MX_IP']
        shared_key = test_data['Shared_Key']
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(mx_ip, username='admin', password='admin')
        
        config_commands = [
          'set security ike proposal IKE_PROP authentication-method pre-shared-keys',
          'set security ike proposal IKE_PROP dh-group group2',
          'set security ike policy IKE_POL proposals IKE_PROP',
          'set security ike gateway IKE_GW ike-policy IKE_POL address {} ike-user-type shared-ike-id local-identity hostname'.format(remote_mx_ip),
          'set security ike gateway IKE_GW external-interface ge-0/0/0.0',
          'set security ipsec proposal IPSEC_PROP protocol esp',
          'set security ipsec policy IPSEC_POL proposals IPSEC_PROP',
          'set security ipsec vpn VPN_TUNNEL ike gateway IKE_GW',
          'set security zones security-zone TRUST host-inbound-traffic system-services ping',
          'set interfaces ge-0/0/0 unit 0 family inet address 192.168.1.1/24',
          'set security zones security-zone TRUST interfaces ge-0/0/0.0 host-inbound-traffic system-services all',
          'set routing-options static route 0.0.0.0/0 next-hop 192.168.1.254'  
        ]
        
        for command in config_commands:
          stdin, stdout, stderr = client.exec_command(command)
        
        client.close() 
      """,
      "run_command": "python test_vpn_config_1.py",
      "expected_result": "VPN tunnel established and ping successful"   
    }
  },

  {
    "testname": "VPN Configuration Test 2",
    "testcase": {
      "testname": "VPN Configuration Test 2",
      "objective": "Test VPN tunnel encryption",
      "steps": [
        "Configure VPN with AES 256 encryption",
        "Establish VPN tunnel",
        "Verify encryption"   
      ],
      "test_data": {
        "MX_IP": "192.168.1.1",
        "Remote_MX_IP": "172.16.1.1", 
        "IKE_Policy": "IKE_POL2",
        "IPSEC_Policy": "IPSEC_POL2",
        "Encryption": "aes-256-cbc"  
      }
    },
    "testscript": {
      "testname": "VPN Configuration Test 2",
      "objective": "Test VPN tunnel encryption",
      "file_name": "test_vpn_config_2.py",
      "init_scripts": [
        "pip install paramiko"
      ],
      "script": """
        import paramiko
        
        mx_ip = test_data['MX_IP'] 
        remote_mx_ip = test_data['Remote_MX_IP']
        ike_policy = test_data['IKE_Policy']
        ipsec_policy = test_data['IPSEC_Policy']
        encryption = test_data['Encryption']
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(mx_ip, username='admin', password='admin')
        
        config_commands = [
          'set security ike proposal IKE_PROP2 authentication-method pre-shared-keys',
          'set security ike proposal IKE_PROP2 dh-group group2',
          'set security ike policy {} proposals IKE_PROP2'.format(ike_policy),
          'set security ike gateway IKE_GW ike-policy {} address {} ike-user-type shared-ike-id local-identity hostname'.format(ike_policy, remote_mx_ip), 
          'set security ike gateway IKE_GW external-interface ge-0/0/0.0',
          'set security ipsec proposal IPSEC_PROP2 protocol esp encryption-algorithm {}'.format(encryption),
          'set security ipsec policy {} proposals IPSEC_PROP2'.format(ipsec_policy),
          'set security ipsec vpn VPN_TUNNEL2 ike gateway IKE_GW ipsec-policy {}'.format(ipsec_policy),
          'set security zones security-zone TRUST host-inbound-traffic system-services ping',
          'set interfaces ge-0/0/0 unit 0 family inet address 192.168.1.1/24',
          'set security zones security-zone TRUST interfaces ge-0/0/0.0 host-inbound-traffic system-services all',
          'set routing-options static route 0.0.0.0/0 next-hop 192.168.1.254'
        ]
        
        for command in config_commands:
          stdin, stdout, stderr = client.exec_command(command)
          
        client.close()
      """,
      "run_command": "python test_vpn_config_2.py",
      "expected_result": "VPN tunnel established with AES 256 encryption"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
    {
        "testname": "Validate Port Mappings", 
        "testcase": {
            "testname": "Validate Port Mappings",
            "objective": "Verify that the configured logical interfaces have the expected physical port mappings.",
            "steps": [
                "1. Retrieve configuration of all logical interfaces",
                "2. For each logical interface, verify that the physical port matches expectations based on documentation/requirements" 
            ],
            "test_data": {
                "logical_interfaces": [
                    {
                        "name": "ge-0/0/1", 
                        "physical_port": "xe-0/0/1"
                    }
                ]
            }
        },
        
        "testscript": {
            "testname": "Validate Port Mappings",
            "objective": "Verify that the configured logical interfaces have the expected physical port mappings.",
            "file_name": "test_port_mappings.py",
            "init_scripts": "\"\"\"pip install ncclient\"\"\"",
            "script": "\"\"\"import ncclient\n\nlogical_interfaces = [{'name': 'ge-0/0/1', 'physical_port': 'xe-0/0/1'}]\n\nwith ncclient.Manager('host') as m:\n    config = m.get_config(source='running')\n    \nfor iface in logical_interfaces:\n    physical_port = config.find('.//{*}interface[name=\"%s\"]/{*}phys-address' % iface['name'])\n    assert physical_port == iface['physical_port'], 'Physical port mismatch'\n\"\"\"",
            "run_command": "python test_port_mappings.py",
            "expected_result": "No assertions triggered. Test passes."
        }
    },
    
    {
        "testname": "Validate Interface Addresses",
        "testcase": {
             "testname": "Validate Interface Addresses",
             "objective": "Verify that interfaces have expected IP address configurations.",
             "steps": [
                 "1. Retrieve interface configurations.",
                 "2. Check that expected addresses are present on each interface."
             ],
             "test_data": {
                 "expected_addresses": {
                     "ge-0/0/1": ["1.2.3.4/24"],
                     "ge-0/0/2": ["5.6.7.8/24", "5.6.7.9/24"]
                 }
             }
         },
         
         "testscript": {
             "testname": "Validate Interface Addresses",
             "objective": "Verify that interfaces have expected IP address configurations.",
             "file_name": "test_interface_addresses.py",
             "init_scripts": "\"\"\"pip install ncclient\"\"\"",
             "script": "\"\"\"import ncclient\n\nexpected_addresses = {\n    'ge-0/0/1': ['1.2.3.4/24'],\n    'ge-0/0/2': ['5.6.7.8/24', '5.6.7.9/24']   \n}\n\nwith ncclient.Manager('host') as m:\n    config = m.get_config(source='running')\n    \nfor interface, addresses in expected_addresses.items():\n    for address in addresses:\n        assert address in config.find('.//{*}interface[name=\"%s\"]/{*}address' % interface), 'Missing expected address %s on interface %s' % (address, interface)\"\"\"",
             "run_command": "python test_interface_addresses.py", 
             "expected_result": "No assertions triggered. Test passes."
         }
     }
 ]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "VPN Port Connectivity Test", 
    "testcase": {
      "objective": "Verify VPN port connectivity by pinging remote VPN IP from each port",
      "steps": [
        "Configure VPN between Port 1 and Port 2", 
        "Initiate ping from Port 1 to Port 2 VPN IP and verify connectivity",
        "Initiate ping from Port 2 to Port 1 VPN IP and verify connectivity"
      ],
      "test_data": {
        "Port 1 IP": "10.1.1.1",
        "Port 1 VPN IP": "192.168.1.1", 
        "Port 2 IP": "10.1.1.2",
        "Port 2 VPN IP": "192.168.1.2"
      }
    },
    "testscript": {
      "testname": "VPN Port Connectivity Test",
      "objective": "Verify VPN port connectivity using ping",
      "file_name": "vpn_port_test.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
      import paramiko
      import netmiko
      
      PORT1_IP = '10.1.1.1'
      PORT2_IP = '10.1.1.2'
      PORT1_VPN_IP = '192.168.1.1'
      PORT2_VPN_IP = '192.168.1.2'
      
      def test_vpn_connectivity(port1_ip, port2_ip, port1_vpn_ip, port2_vpn_ip):
          net_connect = netmiko.ConnectHandler(ip=port1_ip, device_type='juniper')
          net_connect.send_command('ping ' + port2_vpn_ip)
          ping_output = net_connect.send_command('show ping statistics')
          packet_loss = ping_output.split('=')[-1].strip()
          
          assert packet_loss == '0%', "Ping failed from Port1 to Port2 VPN IP"
          
          net_connect.disconnect()
          
          net_connect = netmiko.ConnectHandler(ip=port2_ip, device_type='juniper')
          net_connect.send_command('ping ' + port1_vpn_ip)
          ping_output = net_connect.send_command('show ping statistics')
          packet_loss = ping_output.split('=')[-1].strip()
          
          assert packet_loss == '0%', "Ping failed from Port2 to Port1 VPN IP"
          
          print("VPN Connectivity Test Passed")
          
      test_vpn_connectivity(PORT1_IP, PORT2_IP, PORT1_VPN_IP, PORT2_VPN_IP)
      """,
      "run_command": "python vpn_port_test.py",
      "expected_result": "VPN Connectivity Test Passed"
    }
  },
  
  {
    "testname": "VPN Tunnel Encryption Test",
    "testcase": {
      "objective": "Verify VPN tunnel encryption algorithm", 
      "steps": [
        "Configure AES256 encryption on VPN tunnel",
        "Verify configured encryption algorithm on Port 1", 
        "Verify configured encryption algorithm on Port 2"
      ],
      "test_data": {
        "Configured Encryption": "AES256",
        "Port 1 IP": "10.1.1.1",
        "Port 2 IP": "10.1.1.2"  
      }
    },
    "testscript": {
      "testname": "VPN Tunnel Encryption Test",
      "objective": "Verify configured VPN tunnel encryption",
      "file_name": "vpn_encryption_test.py",
      "init_scripts": [ 
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
      import paramiko
      import netmiko
      
      CONFIG_ENCRYPTION = 'AES256'
      PORT1_IP = '10.1.1.1'
      PORT2_IP = '10.1.1.2'
      
      def test_vpn_encryption(configured_encryption, port1_ip, port2_ip):
          
          net_connect = netmiko.ConnectHandler(ip=port1_ip, device_type='juniper')
          output = net_connect.send_command('show configuration protocols vpn')
          encrypt_algorithm = output.split('encrypt-algorithm ')[1].split(' ')[0]
          
          assert encrypt_algorithm == configured_encryption, "Encryption mismatch on Port1"
          
          net_connect.disconnect()
          
          net_connect = netmiko.ConnectHandler(ip=port2_ip, device_type='juniper') 
          output = net_connect.send_command('show configuration protocols vpn')
          encrypt_algorithm = output.split('encrypt-algorithm ')[1].split(' ')[0]

          assert encrypt_algorithm == configured_encryption, "Encryption mismatch on Port2"
          
          print("VPN Encryption Test Passed")
          
      test_vpn_encryption(CONFIG_ENCRYPTION, PORT1_IP, PORT2_IP)
      """,
      "run_command": "python vpn_encryption_test.py", 
      "expected_result": "VPN Encryption Test Passed"
    }
  }
]
###ENDLIST###