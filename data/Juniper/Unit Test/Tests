 ###STARTLIST###
[
{"testname": "Test Bootup", 
"testcase": {
  "testname": "Test Bootup",
  "objective": "Validate device boots up successfully", 
  "steps": [
    "Power on device",
    "Check console prints 'booting complete'", 
    "Check device is pingable"
  ],
  "test_data": {
    "device_ip": "192.168.0.1",
    "console_ip": "192.168.0.2"
  }
},
"testscript": {
  "testname": "Test Bootup",
  "objective": "Validate device boots up successfully",
  "file_name": "test_bootup.py",
  "init_scripts": [
    "pip install paramiko",
    "pip install ping3"
  ],
  "script": \"\"\"
import paramiko
import ping3

DEVICE_IP = '192.168.0.1'
CONSOLE_IP = '192.168.0.2'

client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(CONSOLE_IP, username='admin', password='admin')

stdin, stdout, stderr = client.exec_command('reboot')

while True:
  line = stdout.readline()
  if 'booting complete' in line:
    break

print('Booting complete message received')

response = ping3.ping(DEVICE_IP)
if response == False:
  print('Failed to ping device')
  exit(1)

print('Ping successfull')
\"\"\",
"run_command": "python test_bootup.py",
"expected_result": "Ping successfull"  
}
},
{"testname": "Test Interface Status",
"testcase": {
  "testname": "Test Interface Status",  
  "objective": "Validate interface status after reboot",
  "steps": [
    "Reboot device",
    "Check interface xe-0/0/0 is up",
    "Check interface xe-0/0/1 is down" 
  ],
  "test_data": {
    "device_ip": "192.168.0.1",
    "console_ip": "192.168.0.2",
    "interfaces": [
      {"name": "xe-0/0/0", "status": "up"},
      {"name": "xe-0/0/1", "status": "down"}
    ]
  }
},  
"testscript": {
  "testname": "Test Interface Status",
  "objective": "Validate interface status after reboot",  
  "file_name": "test_interface_status.py",
  "init_scripts": [
    "pip install jnpr.junos",
    "pip install ping3"
  ],
  "script": \"\"\"  
from jnpr.junos import Device
from pprint import pprint
import ping3

DEVICE_IP = '192.168.0.1'
CONSOLE_IP = '192.168.0.2'
INTERFACES = [
  {'name': 'xe-0/0/0', 'status': 'up'},
  {'name': 'xe-0/0/1', 'status': 'down'}
]

dev = Device(host=DEVICE_IP, user='lab', password='lab123')
dev.open()

pprint(dev.facts)

for intf in INTERFACES:
  status = dev.cli(command='show interfaces ' + intf['name'] + ' | match "Link is "').strip()
  if intf['status'] in status:
    print(f"{intf['name']} interface has expected status: {status}")
  else:
    print(f"{intf['name']} interface has unexpected status: {status}")
    exit(1)

print("All interfaces have expected status")
\"\"\",
"run_command": "python test_interface_status.py", 
"expected_result": "All interfaces have expected status"
}
}]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Bootup Port Mapping", 
    "testcase": {
      "testname": "Bootup Port Mapping",
      "objective": "Verify all ports are mapped and configured correctly during bootup.",
      "steps": [
        "1. Record port mappings from configuration file.", 
        "2. Check operational state of each port after bootup.",
        "3. Verify port mappings match configuration."
      ],
      "test_data": {
        "port_mappings": {
          "ge-0/0/0": "ISP1",
          "ge-0/0/1": "ISP2",
          "ge-0/0/2": "ServerNetwork" 
        }
      }
    },
    "testscript": {
      "testname": "Bootup Port Mapping",
      "objective": "Verify all ports are mapped and configured correctly during bootup using Python", 
      "file_name": "test_bootup_portmapping.py",
      "init_scripts": [
        "import json",
        "import napalm"
      ],
      "script": """
        import json
        from napalm import get_network_driver
        
        test_data = json.loads('''{test_data}''')
        
        driver = get_network_driver('junos')
        device = driver(hostname='mx480', username='testuser', password='test123')
        device.open()
        
        port_mappings = device.get_interfaces()
        for interface,target in test_data['port_mappings'].items():
          assert port_mappings[interface]['description'] == target
          
        device.close()
      """,
      "run_command": "python test_bootup_portmapping.py", 
      "expected_result": "All assertions pass. Port mappings match configuration."
    }
  },

  {
    "testname": "Bootup IP Address",
    "testcase": {
      "testname": "Bootup IP Address",
      "objective": "Verify device IP address is correctly configured during bootup",
      "steps": [
        "1. Record configured IP address.",
        "2. Check IP address after device bootup.", 
        "3. Verify IP address matches configuration."
      ],
      "test_data": {
        "configured_ip": "192.168.1.1"  
      }
    },
    "testscript": {
      "testname": "Bootup IP Address",
      "objective": "Verify device IP is correctly configured during bootup using Python",
      "file_name": "test_bootup_ipaddr.py",
      "init_scripts": [ 
        "import json",
        "from napalm import get_network_driver"
      ],
      "script": """
        import json
        from napalm import get_network_driver
        
        test_data = json.loads('''{test_data}''')
        
        driver = get_network_driver('junos')
        device = driver(hostname='mx480', username='testuser', password='test123')
        device.open()
        
        assert device.get_facts()['fqdn'] == test_data['configured_ip']
        
        device.close()
      """,
      "run_command": "python test_bootup_ipaddr.py",
      "expected_result": "Assertion passes. IP address matches configuration."
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Bootup Test Case 1", 
    "testcase": {
      "testname": "Bootup Test Case 1",
      "objective": "Verify all ports boot up successfully", 
      "steps": [
        "Connect all ports to test devices", 
        "Power on the device", 
        "Verify link status LED for all ports light up within 60 seconds"
      ],
      "test_data": {
        "device_under_test": "Juniper MX480",
        "number_of_ports": "48",
        "port_speed": "10GbE"  
      }
    },
    "testscript": {
      "testname": "Bootup Test Script 1",
      "objective": "Automated script to validate all ports are up after boot",
      "file_name": "bootup_test_1.py",
      "init_scripts": [
        "pip install junos-eznc",
        "pip install pytest",  
        """
        import junos
        import pytest
        
        @pytest.fixture(scope="module")
        def test_device():
          device = Device(host='192.168.0.1', user='testuser', password='test123')
          yield device  
          device.close()
          
        def test_port_status(test_device):
          for port in range(1,49):
            assert test_device.port[port].is_up() == True
        """
      ],
      "run_command": "pytest bootup_test_1.py",
      "expected_result": "All 48 ports up status validated successfully" 
    }
  },
  
  {
    "testname": "Bootup Test Case 2",
    "testcase": {
      "testname": "Bootup Test Case 2",
      "objective": "Verify specific ports boot up successfully",
      "steps": [
        "Connect ports 1, 5, 10, 15, 20, 25, 30, 35, 40, 45 to test devices",
        "Power on the device",
        "Verify link status LED for above ports light up within 60 seconds"  
      ],
      "test_data": {
        "device_under_test": "Juniper MX480",
        "ports_to_test": [1, 5, 10, 15, 20, 25, 30, 35, 40, 45],
        "port_speed": "10GbE"
      }
    },
    "testscript": {
      "testname": "Bootup Test Script 2",
      "objective": "Automated script to validate selected ports are up after boot",
      "file_name": "bootup_test_2.py",
      "init_scripts": [  
        "pip install junos-eznc",
        "pip install pytest",
        """
        import junos
        import pytest
        
        ports_to_test = [1,5,10,15,20,25,30,35,40,45]
        
        @pytest.fixture(scope="module")
        def test_device():
          device = Device(host='192.168.0.1', user='testuser', password='test123')
          yield device
          device.close()
          
        def test_port_status(test_device):
          for port in ports_to_test:
            assert test_device.port[port].is_up() == True
        """
      ],
      "run_command": "pytest bootup_test_2.py",
      "expected_result": "All 10 selected ports up status validated successfully"
    }
  }
]
###ENDLIST###