 Here are 2 unit test cases with Python test scripts for Bootup process for MX481 router having Junos OS in JSON format:

```python
###STARTLIST###
[
  {
    "testname": "Test Junos OS Bootup", 
    "testcase": {
      "testname": "Test Junos OS Bootup",
      "objective": "Verify Junos OS bootup process completes successfully",
      "steps": ["Power on the router", "Verify POST completes", "Verify Junos kernel boots up", "Verify routing protocol daemons start"],
      "test_data": {"hostname": "mx481", "os": "Junos"}
    },
    "testscript": {
      "testname": "Test Junos OS Bootup",
      "objective": "Verify Junos OS bootup process completes successfully", 
      "file_name": "test_junos_bootup.py",
      "init_scripts": [
        "import time",
        "import pexpect",
        """
        def test_junos_bootup(hostname, username, password):
          ssh_conn = pexpect.spawn('ssh {}@{}'.format(username, hostname))
          ssh_conn.expect('password:')
          ssh_conn.sendline(password)
          ssh_conn.expect('#')
          ssh_conn.sendline('show version | match Junos')
          ssh_conn.expect('#')
          print(ssh_conn.before)
          ssh_conn.sendline('exit')
        """,
        "test_junos_bootup('mx481', 'admin', 'juniper123')"  
      ],
      "run_command": "python test_junos_bootup.py",
      "expected_result": "Junos OS bootup successful"
    }
  },
  
  {
    "testname": "Test System Redundancy",
    "testcase": {
      "testname": "Test System Redundancy",
      "objective": "Verify redundancy protocols establish between REs",
      "steps": ["Power on router with dual REs", "Verify mastership established", "Verify protocols synchronized"],
      "test_data": {"hostname": "mx481", "re0": "re0", "re1": "re1"}
    },
    "testscript": {
      "testname": "Test System Redundancy",
      "objective": "Verify redundancy protocols establish between REs",
      "file_name": "test_redundancy.py",
      "init_scripts": [ 
        "import re",
        "import pexpect",
        """
        def test_redundancy(hostname, username, password):
          ssh_conn = pexpect.spawn('ssh {}@{}'.format(username, hostname))
          ssh_conn.expect('password:')
          ssh_conn.sendline(password)
          ssh_conn.expect('#')
          ssh_conn.sendline('show chassis redundancy')
          redundancy_status = ssh_conn.expect(['#', pexpect.EOF, pexpect.TIMEOUT])
          if redundancy_status == 0:
            print("Redundancy protocols established successfully")
          else:
            print("Error checking redundancy status")
          
          ssh_conn.sendline('exit')  
        """,
        "test_redundancy('mx481', 'admin', 'juniper123')"
      ],
      "run_command": "python test_redundancy.py", 
      "expected_result": "Redundancy protocols established successfully"
    }
  }
]
###ENDLIST###
```

The above contains 2 test cases with Python test scripts for Junos OS bootup and system redundancy verification on MX481 router in a Python list of JSON objects. Each test case and script is encapsulated within its own JSON object containing required fields. The scripts utilize pexpect library for SSH connections to router and checking outputs. ###STARTLIST###
[
  {
    "testname": "Test Port Mappings", 
    "testcase": {
      "testname": "Test Port Mappings",
      "objective": "Verify all ports are mapped correctly after bootup",
      "steps": [
        "Verify physical ports are mapped to logical interfaces", 
        "Verify logical interfaces have expected IP addresses"
      ],
      "test_data": {
        "port_mappings": [
          {"physical_port": "ge-0/0/0", "logical_interface": "ge-0/0/0.0"},
          {"physical_port": "ge-0/0/1", "logical_interface": "ge-0/0/1.0"} 
        ],
        "expected_ips": {
          "ge-0/0/0.0": "192.168.0.1/24",
          "ge-0/0/1.0": "192.168.1.1/24"
        }
      }
    },
    "testscript": {
      "testname": "Test Port Mappings",
      "objective": "Verify all ports are mapped correctly after bootup", 
      "file_name": "test_port_mappings.py",
      "init_scripts": [
        "pip install jnpr.junos",
        "pip install pytest"
      ],
      "script": """
import jnpr.junos as pyez

def test_port_mappings(test_data):
    dev = pyez.Device(host='192.168.0.1', user='netconf', password='juniper!')
    dev.open()
    
    port_mappings = test_data['port_mappings']
    expected_ips = test_data['expected_ips']
    
    for mapping in port_mappings:
        phy_port = mapping['physical_port']
        log_int = mapping['logical_interface']
        
        assert dev.cli(command='show interfaces ' + log_int).find(phy_port) >= 0
        
        ip_addr = dev.cli(command='show interfaces ' + log_int + ' | match inet').split()[1]
        assert ip_addr == expected_ips[log_int]
        
    dev.close()
""",
      "run_command": "pytest -s test_port_mappings.py",
      "expected_result": "2 passed"
    }
  },

  {
    "testname": "Test Address Assignment",
    "testcase": {
      "testname": "Test Address Assignment",
      "objective": "Verify all interfaces have expected IP addresses after bootup",
      "steps": [
        "Retrieve IP addresses assigned to all interfaces",
        "Validate IP addresses match expected values" 
      ],
      "test_data": {
        "expected_ips": {
          "ge-0/0/0.0": "192.168.0.1/24",
          "ge-0/0/1.0": "192.168.1.1/24",
          "lo0.0": "127.0.0.1/32"
        }
      }
    },
    "testscript": {
      "testname": "Test Address Assignment",
      "objective": "Verify all interfaces have expected IP addresses after bootup",
      "file_name": "test_address_assignment.py",
      "init_scripts": [
        "pip install jnpr.junos", 
        "pip install pytest"
      ],
      "script": """  
import jnpr.junos as pyez

def test_address_assignment(test_data):
    dev = pyez.Device(host='192.168.0.1', user='netconf', password='juniper!')  
    dev.open()
    
    expected_ips = test_data['expected_ips']
        
    interfaces = dev.cli(command='show interfaces terse')
    for interface in interfaces.split():
        ip = dev.cli(command='show interfaces ' + interface + ' | match inet').split()[1]
        assert ip == expected_ips[interface]
    
    dev.close()
""",
      "run_command": "pytest -s test_address_assignment.py",
      "expected_result": "3 passed"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Bootup High Availability Test",
    "testcase": {
      "testname": "Bootup High Availability Test",
      "objective": "Verify that the MX481 router boots up properly and routing protocols establish adjacencies for high availability.",
      "steps": [
        "1. Power on the MX481 router.",
        "2. Verify Junos OS boots up successfully within expected time frame.",
        "3. Verify OSPF neighbors are established on all ports.",
        "4. Verify ISIS neighbors are established on all ports.", 
        "5. Initiate a switchover and verify proper failover to backup RE."
      ],
      "test_data": {
        "mx481_ports": [
          "ge-0/0/0",
          "ge-0/0/1",
          "ge-0/0/2" 
        ],
        "routing_protocols": [
          "ospf",
          "isis"
        ],
        "expected_boot_time": "120 seconds",
        "backup_re": "re1"
      }
    },
    "testscript": {
      "testname": "Bootup High Availability Test",
      "objective": "Automated test script to validate bootup process and high availability on MX481 router",
      
      "file_name": "test_mx481_bootup_ha.py",
      
      "init_scripts": [
        "pip install netmiko",
        "pip install napalm"
      ],
      
      "script": \"\"\"
      import netmiko
      import napalm
      from datetime import datetime
      
      def test_mx481_bootup_ha():
          # Connect to MX481
          device = {
              'host': 'mx481.test.net', 
              'username': 'pyuser',
              'password': 'pypassword',
              'device_type': 'juniper'
          }
          conn = netmiko.ConnectHandler(**device)
          
          # Verify boot time  
          bootup_time = datetime.now() - datetime.min 
          assert bootup_time <= 120
          
          # Verify OSPF neighbors
          ospf_nei = conn.send_command('show ospf neighbor')
          for interface in interfaces:
              assert interface in ospf_nei
              
          # Verify ISIS neighbors  
          isis_nei = conn.send_command('show isis neighbor')
          for interface in interfaces:
              assert interface in isis_nei
              
          # Initiate swithover
          conn.send_command('request chassis redundancy switchover')
          
          # Verify new RE
          prompt = conn.find_prompt() 
          assert 're1' in prompt
          
      interfaces = ['ge-0/0/0', 'ge-0/0/1', 'ge-0/0/2']    
      test_mx481_bootup_ha()
      \"\"\",
      
      "run_command": "python test_mx481_bootup_ha.py",
      
      "expected_result": "All test cases pass"
    }
  },

  {
    "testname": "Bootup Basic Functionality Test",
    "testcase": {
      "testname": "Bootup Basic Functionality Test",
      "objective": "Verify basic functionality of MX481 router after bootup",
      "steps": [
        "1. Power on the MX481 router", 
        "2. Verify Junos OS boots up successfully",
        "3. Verify interfaces are operationally up",
        "4. Verify ping to loopback interface address"
      ],
      "test_data": {
        "interfaces": [
          "ge-0/0/0",
          "ge-0/0/1"
        ],
        "loopback_address": "10.255.255.1"  
      }
    },
    "testscript": {
      "testname": "Bootup Basic Functionality Test",
      "objective": "Automated test script to validate basic functionality after MX481 bootup",
      "file_name": "test_mx481_basic_bootup.py",
      
      "init_scripts": [
        "pip install napalm"
      ],
      
      "script": \"\"\"
      import napalm
      
      def test_mx481_basic_bootup():
          
          # Connect to MX481
          device = {
              'hostname': 'mx481.test.net',
              'username': 'pyuser',
              'password': 'pypassword',
              'optional_args': {'port': 830}
          }
          driver = napalm.get_network_driver('junos')
          napalm_conn = driver(**device)
          napalm_conn.open()
          
          # Verify Junos OS bootup
          assert napalm_conn.is_alive()
          
          # Verify interfaces up
          interfaces = napalm_conn.get_interfaces()
          for interface in interfaces:
              if interface in test_interfaces:
                  assert interfaces[interface]['is_up']
                  
          # Verify ping         
          ping = napalm_conn.ping(loopback_address)
          assert ping['success']['packet_loss'] == 0
          
          napalm_conn.close()
          
      test_interfaces = ['ge-0/0/0', 'ge-0/0/1']
      loopback_address = '10.255.255.1'
      test_mx481_basic_bootup()
      \"\"\",
      
      "run_command": "python test_mx481_basic_bootup.py",
      "expected_result": "All test cases pass"
    }
  }
]
###ENDLIST###