 ###STARTLIST###
[
  {
    "testname": "Test Bootup Process", 
    "testcase": {
      "testname": "Test Bootup Process",
      "objective": "Verify the device completes the bootup process successfully",
      "steps": [
        "Device powers on",
        "POST completes successfully", 
        "Device loads JUNOS firmware",
        "JUNOS processes initialize successfully",
        "Device is reachable via network"
      ],
      "test_data": {
        "device_type": "MX484",
        "ip_address": "192.168.0.1"  
      }
    },
    "testscript": {
      "testname": "Test Bootup Process",
      "objective": "Automated script to validate bootup process for MX484",
      "file_name": "test_bootup.py",
      "init_scripts": "\"\"\"pip install paramiko\"\"\",
      \"\"\"pip install netmiko\"\"\"",
      "script": \"\"\"
                import paramiko
                import time
                
                ip = '192.168.0.1'
                username = 'admin'
                password = 'Juniper123'
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=username, password=password)
                
                channel = ssh.invoke_shell()
                output = channel.recv(1000)
                
                if 'JUNOS' in str(output):
                    print('JUNOS bootup successful')
                else:
                    print('Bootup failed')
                    
                channel.close()
                ssh.close()
            \"\"\"",
      "run_command": "python test_bootup.py",
      "expected_result": "JUNOS bootup successful"
    }
  },
  
  {
    "testname": "Test Interface Status",
    "testcase": {
      "testname": "Test Interface Status",
      "objective": "Verify all expected interfaces are up after bootup",
      "steps": [
        "Establish SSH connection to device",
        "Execute 'show interfaces terse' command",
        "Validate all expected interfaces are up (ge-0/0/0 to ge-0/0/47)"
      ],
      "test_data": {
        "device_ip": "192.168.0.1",
        "interface_range": "ge-0/0/0 to ge-0/0/47"
      }
    },
    "testscript": {
      "testname": "Test Interface Status",
      "objective": "Automated script to test interface status after bootup",
      "file_name": "test_interfaces.py", 
      "init_scripts": "\"\"\"pip install netmiko\"\"\",",
      "script": "\"\"\"
                from netmiko import ConnectHandler
                
                ip = '192.168.0.1'
                username = 'admin'
                password = 'Juniper123'
                
                device = ConnectHandler(ip=ip, username=username, password=password, device_type='juniper')
                
                output = device.send_command('show interfaces terse')
                
                interfaces = output.split('\\n')
                up_interfaces = [i for i in interfaces if 'up' in i]
                
                for i in range(48):
                    int_name = 'ge-0/0/' + str(i)
                    if int_name not in up_interfaces:
                        print(int_name + ' is down')
                        
                device.disconnect()
            \"\"\"",
      "run_command": "python test_interfaces.py",  
      "expected_result": "All interfaces up message or no output"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Port Mapping Verification Test",
    "testcase": {
      "testname": "Port Mapping Verification Test", 
      "objective": "Verify all ports on the MX480 router are mapped correctly",
      "steps": [
        "Connect to the console port of the MX480 router",
        "Execute the 'show interfaces terse' command", 
        "Verify all ports are listed and in up/up state"
      ],
      "test_data": {
        "router_ip": "192.168.0.1",
        "console_port": "COM1",
        "expected_ports": ["ge-0/0/0", "ge-0/0/1", "ge-0/1/0"] 
      }
    },
    
    "testscript": {
      "testname": "Port Mapping Verification Test",
      "objective": "Verify all ports on the MX480 router are mapped correctly", 
      "file_name": "test_portmapping.py",
      "init_scripts": ["pip install junos-eznc", "pip install paramiko"],
      "script": """
import json
from jnpr.junos import Device
from paramiko.client import SSHClient

test_data = {}

with open('test_data.json') as f:
    test_data = json.load(f)

dev = Device(host=test_data['router_ip'], user='testuser', password='password123')
dev.open()

output = dev.cli('show interfaces terse')
ports = [line.split()[0] for line in output.splitlines()]

result = set(ports) == set(test_data['expected_ports'])
print(result)

dev.close()
      """,
      "run_command": "python test_portmapping.py", 
      "expected_result": "True"
    }
  },
  
  {
    "testname": "IP Address Validation Test",
    "testcase": {
      "testname": "IP Address Validation Test",
      "objective": "Validate IP address configuration on all interfaces",
      "steps": [
        "Connect to the CLI of the MX480 router over SSH",
        "Execute 'show interfaces terse' and store interface names",
        "For each interface, execute 'show interfaces <interface>'",  
        "Verify IP address in output matches expected value"   
      ],
      "test_data": {
        "router_ip": "192.168.0.1",
        "ssh_port": 22, 
        "ssh_user": "testuser",
        "ssh_password": "password123",
        "interfaces": ["ge-0/0/0", "ge-0/0/1"],
        "expected_ips": {"ge-0/0/0": "10.0.0.1/24", "ge-0/0/1": "10.0.1.1/24"}
      }
    },

    "testscript": {
      "testname": "IP Address Validation Test",
      "objective": "Validate IP address configuration on all interfaces",
      "file_name": "test_ipaddress.py", 
      "init_scripts": ["pip install junos-eznc", "pip install paramiko"],
      "script": """  
import json
from jnpr.junos import Device
import paramiko

test_data = {}

with open('test_data.json') as f:
    test_data = json.load(f)

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(hostname=test_data['router_ip'], port=test_data['ssh_port'], username=test_data['ssh_user'], password=test_data['ssh_password'])

dev = Device(host=test_data['router_ip'], user=test_data['ssh_user'], password=test_data['ssh_password'], port=test_data['ssh_port'], ssh_private_key_file=None, ssh_config=ssh.get_transport().get_remote_server_keys())
dev.open()

for intf in test_data['interfaces']:
  output = dev.cli('show interfaces ' + intf)
  ip = output.splitlines()[3].split()[1]
  
  if ip != test_data['expected_ips'][intf]:
    print("FAILED: Expected IP {}, but got {} on interface {}".format(test_data['expected_ips'][intf], ip, intf))
    result = False
  else:
    print("PASSED: Correct IP {} configured on interface {}".format(ip, intf))
    result = True
  
dev.close()
ssh.close()

print(result)
    """,  
      "run_command": "python test_ipaddress.py",
      "expected_result": "True"       
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Bootup Basic Connectivity Test", 
    "testcase": {
      "testname": "Bootup Basic Connectivity Test",
      "objective": "Validate basic Layer 1/2 connectivity during bootup process by checking interface statuses",
      "steps": [
        "Bring up the device and check interface status changes from down -> up indicating ports initialized and achieved L1/2 connectivity", 
        "Verify all interfaces initialized properly by checking their operational status"
      ],
      "test_data": {
        "device_under_test": "Juniper MX480",
        "interfaces_to_test": ["ge-0/0/0", "ge-0/0/1"] 
      }
    },
    "testscript": {
      "testname": "Bootup Basic Connectivity Test",
      "objective": "Script to validate interface status during bootup",
      "file_name": "bootup_connectivity_test.py",
      "init_scripts":[
        "pip install junos-eznc",
        "pip install jnpr.junos",
        "pip install jnpr.junos.exception"
      ],
      "script": """
        import jnpr.junos
        from jnpr.junos.utils.config import Config
        from jnpr.junos.exception import ConnectError
        interfaces = {{test_data.interfaces_to_test}}
        dev = Device(host='{{test_data.device_under_test}}', user='lab', password='lab123')
        try:
          dev.open()
        except Exception as err:
          print('Cannot connect to device: {0}'.format(err))
          sys.exit(1)
    
        print('Checking interface status during boot...')
        for intf in interfaces:
          intf_status = dev.cli('show interfaces '+intf+' | match "Link is [a-z]+"')  
          if intf_status.find('Link is up') >= 0:
            print(intf + ' is up')
          else:
            print(intf + ' is down')
        
        dev.close()
      """,
      "run_command": "python bootup_connectivity_test.py", 
      "expected_result": "All interfaces initialized and came up properly"  
    }
  },

  {
    "testname": "Bootup Services Test",
    "testcase": {
      "testname": "Bootup Services Test",
      "objective": "Validate critical services come up properly during bootup",
      "steps": [
        "Bring up the device",
        "Verify critical processes are up and running by checking process status" 
      ],
      "test_data": {
        "device_under_test": "Juniper MX480",
        "critical_processes": ["rpd", "dfwd", "mib2d"]  
      }
    },
    "testscript": {
      "testname": "Bootup Services Test",
      "objective": "Script to validate critical processes during bootup", 
      "file_name": "bootup_services_test.py",
      "init_scripts":[
        "pip install junos-eznc"
      ],
      "script": """
        from jnpr.junos import Device
        processes = {{test_data.critical_processes}}
        dev = Device(host='{{test_data.device_under_test}}', user='lab', password='lab123')
        dev.open()
      
        print('Checking critical processes status...')
        for proc in processes:
          proc_status = dev.cli('show system processes | match '+proc)
          if proc_status.find(proc) >= 0: 
            print(proc + ' is running')
          else:
            print(proc + ' is NOT running')
            
        dev.close()
      """,
      "run_command": "python bootup_services_test.py",
      "expected_result": "All critical processes came up successfully"
    }
  }
]
###ENDLIST###