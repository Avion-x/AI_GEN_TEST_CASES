 ###STARTLIST###

[
{
  "testname": "Bootup Configuration Retrieval Test",
  "testcase": {
    "testname": "Bootup Configuration Retrieval Test", 
    "objective": "Verify that the device is able to retrieve the startup configuration from persistent storage during bootup",
    "steps": [
      "1. Turn off the device",
      "2. Turn on the device and allow it to complete bootup",
      "3. Verify that the running configuration contains the expected settings from startup config", 
      "4. Verify that log messages indicate startup config was loaded"
    ]
  },

  "testscript": {
    "testname": "Bootup Configuration Retrieval Test",
    "objective": "Automate Bootup Configuration Retrieval Test with Python",
    "file_name": "test_bootup_config_retrieval.py",
    "init_scripts": [
      "pip install paramiko",
      "pip install junos-eznc"  
    ],
    "script": """
import unittest
from junos import Device

class TestBootupConfigRetrieval(unittest.TestCase):

    def test_bootup_config_retrieval(self):
        dev = Device(host='1.1.1.1', user='python', password=' Python123') 
        dev.open()
        self.assertEqual(dev.facts['hostname'], 'SRX100')
        self.assertIn('set system host-name SRX100', dev.cli('show configuration'))
        dev.close()
""",
    "run_command": "python test_bootup_config_retrieval.py",
    "expected_result": "OK" 
  }
},

{
  "testname": "Bootup Hardware Initialization Test",
  "testcase": {
    "testname": "Bootup Hardware Initialization Test",
    "objective": "Verify hardware components are initialized correctly during bootup",
    "steps": [
      "1. Turn off the device",
      "2. Turn on the device and allow it to complete bootup",
      "3. Verify hardware components initialization messages in log",
      "4. Verify hardware components are functioning correctly" 
    ]
  },

  "testscript": {
    "testname": "Bootup Hardware Initialization Test",
    "objective": "Automate Bootup Hardware Initialization Test with Python", 
    "file_name": "test_bootup_hardware_init.py",
    "init_scripts": [
      "pip install paramiko"
    ],
    "script": """  
import unittest
import paramiko

class TestBootupHardwareInit(unittest.TestCase):

    def test_bootup_hardware_init(self):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect('1.1.1.1', username='python', password='Python123')
        stdin, stdout, stderr = ssh.exec_command('show log messages | match hardware')
        log = stdout.read().decode()
        self.assertIn('FPC 0 Hardware initialization done', log)
        self.assertIn('PIC 0 Hardware initialization done', log)
        ssh.close()
""",
    "run_command": "python test_bootup_hardware_init.py",
    "expected_result": "OK"
  }
},

{
  "testname": "Bootup Firmware Verification Test",
  "testcase": {
    "testname": "Bootup Firmware Verification Test",
    "objective": "Verify firmware integrity during bootup",
    "steps": [
      "1. Corrupt firmware image on device",
      "2. Reboot device",
      "3. Verify bootup fails with error indicating firmware verification failed"
    ]
  },

  "testscript": {
    "testname": "Bootup Firmware Verification Test",
    "objective": "Automate Bootup Firmware Verification Test with Python",
    "file_name": "test_bootup_firmware_verify.py",
    "init_scripts": [
      "pip install paramiko"  
    ],
    "script": """
import unittest  
import paramiko

class TestBootupFirmwareVerify(unittest.TestCase):

    def test_bootup_firmware_verify(self):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        # Corrupt firmware image
        stdin, stdout, stderr = ssh.exec_command('rm jinstall-ex-2100-11.2-20170502.0-domestic-signed.tgz')
        
        # Reboot device
        ssh.exec_command('request system reboot')
        
        # Check for firmware verification errors 
        ssh.connect('1.1.1.1', username='python', password='Python123')
        stdin, stdout, stderr = ssh.exec_command('show log messages | match firmware')
        log = stdout.read().decode()
        self.assertIn('Firmware integrity verification failed', log)

        ssh.close()
""",
    "run_command": "python test_bootup_firmware_verify.py",
    "expected_result": "OK"
  }
}

]
###ENDLIST###