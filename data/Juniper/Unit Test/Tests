 ###STARTLIST###
[
  {
    "testname": "VPN Configuration Test Case 1", 
    "testcase": {
      "testname": "VPN Configuration Test Case 1",
      "objective": "Verify VPN tunnel establishment between MX devices",
      "steps": [
        "Configure IKE proposal on MX devices", 
        "Configure IKE policy on MX devices",
        "Configure IPsec proposal on MX devices",
        "Configure IPsec policy on MX devices",
        "Verify VPN tunnel is operationally up"
      ],
      "test_data": {
        "ike_proposal_name": "IKE_PROP_1",
        "ike_proposal_encryption": "aes-256", 
        "ike_proposal_hash": "sha-256",
        "ike_policy_name": "IKE_POL_1", 
        "ipsec_proposal_name": "IPSEC_PROP_1",
        "ipsec_proposal_encryption": "aes-256",
        "ipsec_proposal_hash": "sha1",
        "ipsec_policy_name": "IPSEC_POL_1"  
      }
    },
    "testscript": {
      "testname": "VPN Configuration Test Script 1",
      "objective": "Automate VPN configuration test case 1",
      "file_name": "vpn_test_1.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install paramiko"
      ],
      "script": """
        import netmiko
        import paramiko
        
        def test_vpn_config(test_data):
          devices = {
            "mx1": {
              "device_type": "juniper",
              "ip": "192.168.1.1",
              "username": "admin",
              "password": "pwd123" 
            },
            "mx2": {
              "device_type": "juniper",
              "ip": "192.168.1.2",
              "username": "admin",
              "password": "pwd123" 
            }  
          }
        
          ike_prop_name = test_data["ike_proposal_name"]
          ike_enc = test_data["ike_proposal_encryption"]
          ike_hash = test_data["ike_proposal_hash"]
        
          ipsec_prop_name = test_data["ipsec_proposal_name"]
          ipsec_enc = test_data["ipsec_proposal_encryption"]
          ipsec_hash = test_data["ipsec_proposal_hash"]
        
          ike_policy_name = test_data["ike_policy_name"]
          ipsec_policy_name = test_data["ipsec_policy_name"]
        
          for device in devices:
            net_connect = netmiko.ConnectHandler(**devices[device])
            config_commands = [
              "set security ike proposal "+ike_prop_name+" authentication-method pre-shared-keys",
              "set security ike proposal "+ike_prop_name+" dh-group group2", 
              "set security ike proposal "+ike_prop_name+" authentication-algorithm "+ike_hash,
              "set security ike proposal "+ike_prop_name+" encryption-algorithm "+ike_enc,
              "set security ike policy "+ike_policy_name+" mode main",
              "set security ike policy "+ike_policy_name+" proposals "+ike_prop_name,
              "set security ike policy "+ike_policy_name+" pre-shared-key ascii-text pwd123",
              "set security ipsec proposal "+ipsec_prop_name+" protocol esp", 
              "set security ipsec proposal "+ipsec_prop_name+" authentication-algorithm "+ipsec_hash,
              "set security ipsec proposal "+ipsec_prop_name+" encryption-algorithm "+ipsec_enc,
              "set security ipsec policy "+ipsec_policy_name+" proposals "+ipsec_prop_name,
              "commit"  
            ]
            output = net_connect.send_config_set(config_commands)
            print(output)
        
          print("VPN Configured Successfully")
        
        if __name__ == "__main__":
          test_data = {
            "ike_proposal_name": "IKE_PROP_1",
            "ike_proposal_encryption": "aes-256",
            "ike_proposal_hash": "sha-256", 
            "ike_policy_name": "IKE_POL_1",
            "ipsec_proposal_name": "IPSEC_PROP_1", 
            "ipsec_proposal_encryption": "aes-256",
            "ipsec_proposal_hash": "sha1",
            "ipsec_policy_name": "IPSEC_POL_1"
          }
        
          test_vpn_config(test_data)
      """,
      "run_command": "python vpn_test_1.py", 
      "expected_result": "VPN Configured Successfully"
    }
  },
  
  {
    "testname": "VPN Configuration Test Case 2",
    "testcase": {
      "testname": "VPN Configuration Test Case 2",
      "objective": "Verify dynamic VPN between MX devices using certificates",
      "steps": [
        "Generate and install certificates on MX devices ",
        "Configure IKE proposal on MX devices",
        "Configure IKE policy on MX devices", 
        "Configure IPsec proposal on MX devices",
        "Configure IPsec policy on MX devices",
        "Verify VPN tunnel is operationally up"   
      ],
      "test_data": {
        "ike_proposal_name": "IKE_PROP_2",
        "ike_proposal_encryption": "aes-128",
        "ike_proposal_hash": "sha-128",
        "ike_policy_name": "IKE_POL_2",
        "ipsec_proposal_name": "IPSEC_PROP_2",  
        "ipsec_proposal_encryption": "aes-128",
        "ipsec_proposal_hash": "sha1",
        "ipsec_policy_name": "IPSEC_POL_2"
      }
    },
    "testscript": {
      "testname": "VPN Configuration Test Script 2",
      "objective": "Automate VPN configuration test case 2",
      "file_name": "vpn_test_2.py",
      "init_scripts": [  
        "pip install cryptography",
        "pip install netmiko",
        "pip install paramiko"
      ],
      "script": """
        import netmiko
        import paramiko
        from cryptography import x509
        from cryptography.hazmat.backends import default_backend
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from cryptography.x509.oid import NameOID
        
        def generate_certs():
          #cert generation code  
        
        def test_vpn_config(test_data):
          
          devices = {
            "mx1": {
              "device_type": "juniper",
              "ip": "192.168.1.1",
              "username": "admin",
              "password": "pwd123"  
            },
            "mx2": {
              "device_type": "juniper",
              "ip": "192.168.1.2", 
              "username": "admin",
              "password": "pwd123"  
            }
          }
        
          ike_prop_name = test_data["ike_proposal_name"]
          ike_enc = test_data["ike_proposal_encryption"] 
          ike_hash = test_data["ike_proposal_hash"]
        
          ipsec_prop_name = test_data["ipsec_proposal_name"]
          ipsec_enc = test_data["ipsec_proposal_encryption"]
          ipsec_hash = test_data["ipsec_proposal_hash"]
        
          ike_policy_name = test_data["ike_policy_name"]
          ipsec_policy_name = test_data["ipsec_policy_name"]
          
          #cert config  
          
          for device in devices:
            net_connect = netmiko.ConnectHandler(**devices[device])
            config_commands = [
              "set security ike proposal "+ike_prop_name+" authentication-method rsa-signatures",
              "set security ike proposal "+ike_prop_name+" dh-group group2",
              "set security ike proposal "+ike_prop_name+" authentication-algorithm "+ike_hash, 
              "set security ike proposal "+ike_prop_name+" encryption-algorithm "+ike_enc,
              "set security ike policy "+ike_policy_name+" mode main",
              "set security ike policy "+ike_policy_name+" proposals "+ike_prop_name,
              "set security ike policy "+ike_policy_name+" certificate local-certificate cert_name",
              "set security ipsec proposal "+ipsec_prop_name+" protocol esp",
              "set security ipsec proposal "+ipsec_prop_name+" authentication-algorithm "+ipsec_hash,
              "set security ipsec proposal "+ipsec_prop_name+" encryption-algorithm "+ipsec_enc,  
              "set security ipsec policy "+ipsec_policy_name+" proposals "+ipsec_prop_name,
              "commit"
            ]
            output = net_connect.send_config_set(config_commands)
            print(output)
        
          print("VPN Configured Successfully")
          
        if __name__ == "__main__":
          test_data = {
            "ike_proposal_name": "IKE_PROP_2",
            "ike_proposal_encryption": "aes-128",
            "ike_proposal_hash": "sha1",
            "ike_ Here are 2 Unit Test cases for VPN configuration for Juniper MX484 with Python test scripts:

```python
###STARTLIST###
[
  {
    "testname": "Port Mapping Test", 
    "testcase": {
      "testname": "Port Mapping Test",
      "objective": "Verify VPN port mappings are configured correctly",
      "steps": [
        "Validate map interfaces ge-0/0/1.0 to xe-1/2/0.0", 
        "Validate map interfaces ge-0/0/2.0 to xe-1/4/0.0",
        "Verify interface mappings in configuration"
      ],
      "test_data": {
        "port_mappings": [
          ["ge-0/0/1.0", "xe-1/2/0.0"],
          ["ge-0/0/2.0", "xe-1/4/0.0"]
        ]
      }
    },
    "testscript": {
      "testname": "Port Mapping Test",
      "objective": "Verify VPN port mappings are configured correctly", 
      "file_name": "test_port_mapping.py",
      "init_scripts": "import unittest\\nimport json",
      "script": \"\"\"
      class TestPortMappings(unittest.TestCase):
        def test_port_mappings(self):
          with open('test_data.json') as f:
            data = json.load(f)
          
          for map_from, map_to in data['port_mappings']:
            self.assertIn(map_from, config)
            self.assertIn(map_to, config)
      
      if __name__ == '__main__':
        unittest.main()
      \"\"\",
      "run_command": "python test_port_mapping.py", 
      "expected_result": "OK"
    }
  },

  {
    "testname": "Address Verification Test",
    "testcase": {
      "testname": "Address Verification Test",
      "objective": "Validate VPN endpoint addresses",
      "steps": [
        "Verify local VPN endpoint address is 192.168.1.1",
        "Verify remote VPN endpoint address is 10.10.10.1"  
      ],
      "test_data": {
        "local_vpn_addr": "192.168.1.1",
        "remote_vpn_addr": "10.10.10.1"  
      }
    },
    "testscript": {
      "testname": "Address Verification Test",
      "objective": "Validate VPN endpoint addresses",
      "file_name": "test_address.py",
      "init_scripts": "import unittest",
      "script": \"\"\"
      class TestAddresses(unittest.TestCase):
        def test_addresses(self):
          self.assertEqual(config['local_vpn_addr'], '192.168.1.1')
          self.assertEqual(config['remote_vpn_addr'], '10.10.10.1')
        
      if __name__ == '__main__':
        unittest.main()
      \"\"\",
      "run_command": "python test_address.py",
      "expected_result": "OK"
    }
  }
]
###ENDLIST###
``` ###STARTLIST###
[
  {
    "testname": "Test VPN Configuration", 
    "testcase": {
      "testname": "Test VPN Configuration",
      "objective": "Validate VPN configuration on each port of MX484 device",
      "steps": [
        "Configure VPN on port 1 and verify connectivity", 
        "Configure VPN on port 2 and verify connectivity",
        "Configure VPN on port 3 and verify connectivity",
        "Configure VPN on port 4 and verify connectivity"
      ],
      "test_data": {
        "device_ports": [1, 2, 3, 4],
        "vpn_config": {
          "authentication": "PSK",
          "encryption": "AES-256", 
          "peer_ip": "10.10.10.1",
          "preshared_key": "securesupersecretkey"  
        }
      }
    },
    "testscript": {
      "testname": "Test VPN Configuration",
      "objective": "Automate VPN configuration test on MX484 ports",
      "file_name": "test_vpn_config.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install json"
      ],
      "script": """
        import paramiko
        import json

        def test_vpn_config(port, vpn_config):
          ssh = paramiko.SSHClient()
          ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
          ssh.connect('10.10.10.254', username='admin', password='admin123')

          commands = [\"""
            set interfaces {0} unit 0 family inet address 10.10.10.{0}/24
            set security ipsec vpn my-vpn-profile-port-{0} bind-interface {0}
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw external-interface {0}
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw address {1} 
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ike-policy ike-phase1-policy
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ike-policy ike-phase1-policy proposal-set standard 
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ike-policy ike-phase1-policy proposal-set standard authentication-method pre-shared-keys 
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ike-policy ike-phase1-policy pre-shared-key ascii-text {2}
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ipsec-policy ipsec-phase2-policy 
            set security ipsec vpn my-vpn-profile-port-{0} ike gateway my-vpn-gw ipsec-policy ipsec-phase2-policy proposal-set standard
            set security ipsec vpn my-vpn-profile-port-{0} tunnel pair-policy ipsec-pair-policy
            set security ipsec vpn my-vpn-profile-port-{0} tunnel pair-policy ipsec-pair-policy proposals standard
            \"""
          ]
          
          for command in commands:
            command = command.format(port, vpn_config['peer_ip'], vpn_config['preshared_key'])
            stdin, stdout, stderr = ssh.exec_command(command)
            print(stdout.read().decode())
            print(stderr.read().decode())

          ssh.close()

        test_data = {
          "device_ports": [1, 2, 3, 4],
          "vpn_config": {
            "authentication": "PSK",
            "encryption": "AES-256", 
            "peer_ip": "10.10.10.1",
            "preshared_key": "securesupersecretkey"  
          }
        }

        for port in test_data['device_ports']:
          print(f'Testing VPN configuration on port {port}')
          test_vpn_config(port, test_data['vpn_config'])

      """,
      "run_command": "python test_vpn_config.py",
      "expected_result": "VPN configured successfully on ports 1, 2, 3 and 4 with given configuration"  
    }
  }
]
###ENDLIST###