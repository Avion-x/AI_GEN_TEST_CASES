 ###STARTLIST###
[
  {
    "testname": "Bootup Validation Test", 
    "testcase": {
      "testname": "Bootup Validation Test",
      "objective": "Validate successful bootup of MX480 device",
      "steps": [
        "Power on the device",
        "Verify device displays 'Juno Ready' message on console within 120 seconds", 
        "Verify all fans spin up on power on",
        "Verify all LEDs light up in expected sequence"        
      ],
      "test_data": {
        "device_under_test": "MX480"
      }
    },
    
    "testscript": {
      "testname": "Bootup Validation Test",
      "objective": "Automate validation of MX480 successful bootup",
      "file_name": "test_mx480_bootup.py",
      "init_scripts": [
        "import unittest",
        "from mocks import MockMX480"
      ],
      "script": """
        class TestMX480Bootup(unittest.TestCase):
          def test_bootup(self):
            device = MockMX480()
            device.power_on()
            self.assertEqual(device.get_console_output(), 'Juno Ready')
            self.assertTrue(device.all_fans_spinning()) 
            self.assertEqual(device.get_led_sequence(), ['PWR', 'STATUS', 'ALARMS'])
      """,
      "run_command": "python test_mx480_bootup.py",
      "expected_result": "OK"
    }
  },
  
  {
    "testname": "Bootup Timing Test",
    "testcase": {
      "testname": "Bootup Timing Test",  
      "objective": "Validate bootup timing is within expectations",
      "steps": [
        "Power on the device", 
        "Record time when power applied",
        "Record time when 'Juno Ready' message appears",
        "Verify bootup time is less than 120 seconds"
      ],
      "test_data": {
        "device_under_test": "MX480"
      }
    },
    
    "testscript": {
      "testname": "Bootup Timing Test",
      "objective": "Automate validation of MX480 bootup timing",
      "file_name": "test_mx480_bootup_timing.py", 
      "init_scripts": [
        "import unittest",
        "from datetime import datetime",
        "from mocks import MockMX480"
      ],
      "script": """
        class TestMX480BootupTiming(unittest.TestCase):
          def test_bootup_timing(self):
            device = MockMX480()
            start_time = datetime.now()
            device.power_on() 
            end_time = datetime.now()
            bootup_time = (end_time - start_time).total_seconds()
            self.assertLess(bootup_time, 120)
      """,
      "run_command": "python test_mx480_bootup_timing.py",
      "expected_result": "OK"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
{
  "testname": "Port Mapping Verification", 
  "testcase": {
    "testname": "Port Mapping Verification",
    "objective": "Verify all configured ports are mapped correctly",
    "steps": [
      "Retrieve port mapping configuration", 
      "Verify all expected ports are present",
      "Ensure no incorrect or extra ports are mapped"
    ],
    "test_data": {
      "expected_ports": [
        "ge-0/0/0", 
        "ge-0/0/1",
        "ge-0/0/2" 
      ]
    }
  },

  "testscript": {
    "testname": "Port Mapping Verification",
    "objective": "Verify port mappings using Python",  
    "file_name": "test_port_mapping.py",
    "init_scripts": [
      "pip install netmiko",
      "pip install napalm"  
    ],
    "script": \"\"\"
import netmiko
import napalm

driver = napalm.get_network_driver('junos')
device = driver('192.168.0.1', 'myuser', 'mypassword')

device.open()
mappings = device.get_mac_address_table()
device.close()

expected_ports = ['ge-0/0/0', 'ge-0/0/1', 'ge-0/0/2']

for port in expected_ports:
  assert port in mappings
\"\"\",
    "run_command": "python test_port_mapping.py",
    "expected_result": "All expected ports are mapped correctly"
  }
},

{
  "testname": "IP Address Validation",
  "testcase": {
    "testname": "IP Address Validation",
    "objective": "Confirm device IP addresses match configuration",
    "steps": [
      "Retrieve configured IP addresses",
      "Retrieve operational IP addresses", 
      "Compare configuration and operation IP addresses"
    ],
    "test_data": {
      "configured_ips": ["192.168.0.1", "10.0.0.1"],
      "interface_names": ["ge-0/0/0", "ge-0/0/1"]  
    }
  },

  "testscript": {
    "testname": "IP Address Validation",
    "objective": "Validate IP address configuration using Python",
    "file_name": "test_ip_addresses.py", 
    "init_scripts": [
      "pip install napalm"
    ],
    "script": \"\"\"  
import napalm

driver = napalm.get_network_driver('junos')
device = driver('192.168.0.1', 'myuser', 'mypassword')

device.open()
configured_ips = ['192.168.0.1', '10.0.0.1']
interface_names = ['ge-0/0/0', 'ge-0/0/1']

ip_addresses = device.get_facts()['interface_list']

for ip, interface in zip(configured_ips, interface_names):
  assert ip_addresses[interface]['ipv4'] == ip
  
device.close()
\"\"\",
    "run_command": "python test_ip_addresses.py",
    "expected_result": "IP addresses match configuration"
  }
}
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Port Bootup Check", 
    "testcase": {
      "testname": "Port Bootup Check",
      "objective": "Verify all ports on the MX481 device boot up successfully",
      "steps": [
        "Connect each port to a traffic generator", 
        "Power on the device",
        "Verify link light is solid green on all ports"
      ],
      "test_data": {
        "device_under_test": "Juniper MX481",
        "number_of_ports": "48",
        "traffic_generator": "Spirent TestCenter"
      }
    },
    "testscript": {
      "testname": "Port Bootup Check",
      "objective": "Automated test script to validate all ports are up on MX481 device",
      "file_name": "test_mx481_ports.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
      import paramiko
      import time

      IP = '192.168.0.1'
      USERNAME = 'admin'
      PASSWORD = 'password123'

      client = paramiko.SSHClient()
      client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
      client.connect(IP, username=USERNAME, password=PASSWORD)

      for i in range(1, 49):
          cmd = f'show interfaces ge-0/0/{i} | display xml'
          stdin, stdout, stderr = client.exec_command(cmd)
          output = stdout.read()
          if 'link-state'>down<' in output:
              print(f'Port ge-0/0/{i} is DOWN')
          else:
              print(f'Port ge-0/0/{i} is UP')

      client.close()
      """,
      "run_command": "python test_mx481_ports.py",
      "expected_result": "All 48 ports print as UP"
    }
  },

  {
    "testname": "Bootup Time Check",
    "testcase": {
      "testname": "Bootup Time Check",  
      "objective": "Verify bootup time of MX481 is within 60 seconds",
      "steps": [
        "Power off the device",
        "Start a timer",
        "Power on the device", 
        "Stop timer when login prompt appears",
        "Verify timer is less than 60 seconds"
      ],
      "test_data": {
        "device": "Juniper MX481",
        "max_bootup_time": "60 seconds"  
      }
    },
    "testscript": {
      "testname": "Bootup Time Check",
      "objective": "Automated script to validate MX481 bootup time",
      "file_name": "test_mx481_bootup.py",
      "init_scripts": [ 
        "pip install datetime"
      ],
      "script": """
      from datetime import datetime

      print('Powering on device...')
      power_on_time = datetime.now()

      print('Waiting for device to boot...')

      print('Device booted! Logging in...')
      login_time = datetime.now()

      bootup_time = login_time - power_on_time
      print(f'Bootup time: {bootup_time.seconds} seconds')

      if bootup_time.seconds > 60:
          print('ERROR: Bootup time exceeded 60 seconds')
      else:
          print('SUCCESS: Bootup time within 60 seconds')
      """,
      "run_command": "python test_mx481_bootup.py",
      "expected_result": "SUCCESS: Bootup time within 60 seconds"
    }
  }
]
###ENDLIST###