 ###STARTLIST###
[
  {
    "testname": "Test VLAN creation", 
    "testcase": {
      "testname": "Test VLAN creation",
      "objective": "Verify that a new VLAN can be created on an MX device",
      "steps": [
        "Configure a new VLAN with ID 100 on interface ge-0/0/0", 
        "Verify that the VLAN was configured properly by checking 'show vlans'"
      ],
      "test_data": {
        "vlan_id": 100, 
        "interface": "ge-0/0/0"  
      }
    },
    "testscript": {
      "testname": "Test VLAN creation",
      "objective": "Automate VLAN creation test case with Python",
      "file_name": "test_vlan_creation.py",
      "init_scripts": ["pip install jnpr.junos","pip install yaml","pip install paramiko"],
      "script": """
import jnpr.junos
import yaml
from jnpr.junos import Device

dev = Device(host='mx480', user='lab', password='lab123') 
dev.open()

yaml_data = \"\"\"
- name: Create VLAN
  junos_vlan:
    name: TestVLAN
    vlan_id: {{ vlan_id }}
    interfaces:
      - {{ interface }} 
\"\"\"

dev.cu.load(yaml_data, format="text", action="set")

print(dev.cli("show vlans"))
""",
      "run_command": "python test_vlan_creation.py",
      "expected_result": "VLAN interface ge-0/0/0.100 created successfully"
    }
  },
  
  {
    "testname": "Test VLAN deletion",
    "testcase": {
      "testname": "Test VLAN deletion",
      "objective": "Verify that an existing VLAN can be deleted from an MX device", 
      "steps": [
        "Delete the VLAN with ID 100 from interface ge-0/0/0",
        "Verify that the VLAN was deleted properly by checking 'show vlans'"   
      ],
      "test_data": {
        "vlan_id": 100,
        "interface": "ge-0/0/0"
      }
    },
    "testscript": {
      "testname": "Test VLAN deletion",
      "objective": "Automate VLAN deletion test case with Python", 
      "file_name": "test_vlan_deletion.py",
      "init_scripts": ["pip install jnpr.junos","pip install yaml","pip install paramiko"],
      "script": """  
import jnpr.junos
from jnpr.junos import Device

dev = Device(host='mx480', user='lab', password='lab123')
dev.open()

dev.cu.load("delete vlans TestVLAN", format="text")

print(dev.cli("show vlans"))
""",
      "run_command": "python test_vlan_deletion.py", 
      "expected_result": "VLAN with ID 100 successfully deleted"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
    {
        "testname": "VLAN Port Mapping", 
        "testcase": {
            "testname": "VLAN Port Mapping",
            "objective": "Verify VLAN port mappings are configured correctly",
            "steps": [
                "Configure VLANs on ports", 
                "Verify VLAN memberships match configured ports"
            ],
            "test_data": {
                "vlans": [100, 200],
                "ports": {
                    "ge-0/0/0": 100,
                    "ge-0/0/1": 200
                }
            }
        },
        "testscript": {
            "testname": "VLAN Port Mapping",
            "objective": "Verify VLAN port mappings are configured correctly", 
            "file_name": "test_vlan_port_mapping.py",
            "init_scripts": [
                "pip install ncclient",
                "pip install json"
            ],
            "script": """
                import ncclient
                import json
                
                vlans = {{test_data.vlans}}
                ports = {{test_data.ports}}
                
                with ncclient.Manager(host='1.1.1.1', port=22, username='netconf', password='password', hostkey_verify=False) as m:
                
                    for vlan_id in vlans:
                        vlan_config = {'configuration': {
                            'vlans': {
                                'vlan': {
                                    'name': f'VLAN {vlan_id}'
                                }
                            }
                        }}
                        m.edit_config(target='candidate', config=vlan_config)
                
                    for port, vlan_id in ports.items():
                        membership_config = {
                            'vlans': {
                                'vlan': [
                                    {
                                        'name': f'VLAN {vlan_id}',
                                        'interface': [
                                            {
                                                'name': port
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                        m.edit_config(target='candidate', config=membership_config)
                
                    result = m.get_config(source='candidate', filter={'configuration': 'vlans'}).data_xml
                    vlan_configs = json.loads(result)
                
                    for vlan_id, ports in ports.items():
                        assert vlan_configs['configuration']['vlans']['vlan'][0]['name'] == f'VLAN {vlan_id}' 
                        assert vlan_configs['configuration']['vlans']['vlan'][0]['interface'][0]['name'] == ports
                        
            """,
            "run_command": "python test_vlan_port_mapping.py", 
            "expected_result": "PASS. VLAN port mappings verified."
        }
    },
    {
        "testname": "VLAN Address Verification",
        "testcase": {
            "testname": "VLAN Address Verification",
            "objective": "Verify VLAN interface IP addresses",
            "steps": [
                "Configure VLAN interfaces",
                "Verify configured IP addresses match" 
            ],
            "test_data": {
                "vlans": [100, 200],
                "addresses": {
                    "ge-0/0/10.100": "10.0.0.1/24",
                    "ge-0/0/20.200": "10.0.1.1/24"
                }
            }
        },
        "testscript": {
            "testname": "VLAN Address Verification",
            "objective": "Verify VLAN interface IP addresses",
            "file_name": "test_vlan_addresses.py",
            "init_scripts": [
                "pip install ncclient",
                "pip install json"  
            ],
            "script": """
                import ncclient
                import json
                
                vlans = {{test_data.vlans}}
                addresses = {{test_data.addresses}}
                
                with ncclient.Manager(host='1.1.1.1', port=22, username='netconf', password='password', hostkey_verify=False) as m:
                
                    for vlan_id in vlans:
                        vlan_config = {'configuration': {
                            'vlans': {
                                'vlan': {
                                    'name': f'VLAN {vlan_id}'
                                }
                            }
                        }}
                        m.edit_config(target='candidate', config=vlan_config)
                        
                    for interface, address in addresses.items():
                        ip_config = {
                            'configuration': {
                                'interfaces': {
                                    'interface': {
                                        'name': interface,
                                        'unit': {
                                            'name': 0,
                                            'family': {
                                                'inet': {
                                                    'address': [
                                                        {
                                                            'name': address
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        m.edit_config(target='candidate', config=ip_config)
                
                    result = m.get_config(source='candidate', filter={'configuration': 'interfaces'}).data_xml
                    interface_configs = json.loads(result)
                
                    for interface, address in addresses.items():
                        assert interface_configs['configuration']['interfaces']['interface'][0]['name'] == interface
                        assert interface_configs['configuration']['interfaces']['interface'][0]['unit'][0]['family']['inet']['address'][0]['name'] == address
                        
            """,
            "run_command": "python test_vlan_addresses.py",
            "expected_result": "PASS. VLAN interface addresses verified."
        }     
    }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "VLAN Configuration Test 1", 
    "testcase": {
      "testname": "VLAN Configuration Test 1",
      "objective": "Verify VLAN configuration on port ge-0/0/1",
      "steps": [
        "Configure VLAN 100 on ge-0/0/1", 
        "Verify ge-0/0/1 is in VLAN 100"
      ],
      "testdata": {
        "vlan_id": 100,
        "interface": "ge-0/0/1"  
      }
    },
    "testscript": {
      "testname": "VLAN Configuration Test 1",
      "objective": "Verify VLAN configuration on port ge-0/0/1", 
      "file_name": "vlan_test_1.py",
      "init_scripts": "pip install netmiko",
      "script": """
import netmiko

vlan_id = 100
interface = 'ge-0/0/1'

device = {
  'device_type': 'juniper',
  'ip': '192.168.0.1',
  'username': 'testuser',
  'password': 'testpass'
}

net_connect = netmiko.ConnectHandler(**device)

net_connect.enable()

config_commands = [
  'set vlans ' + str(vlan_id) + ' vlan-id ' + str(vlan_id),
  'set interfaces ' + interface + ' unit 0 family ethernet-switching vlan members ' + str(vlan_id)  
]

net_connect.send_config_set(config_commands)

print(net_connect.send_command('show vlans ' + str(vlan_id)))
print(net_connect.send_command('show interfaces ' + interface + ' extensive'))

net_connect.disconnect()
      """,
      "run_command": "python vlan_test_1.py",
      "expected_result": "VLAN 100 is configured on interface ge-0/0/1"
    }
  },
  {
    "testname": "VLAN Configuration Test 2",
    "testcase": {
      "testname": "VLAN Configuration Test 2",
      "objective": "Verify VLAN configuration on port ge-0/0/5",
      "steps": [
        "Configure VLAN 200 on ge-0/0/5",
        "Verify ge-0/0/5 is in VLAN 200"  
      ],
      "testdata": {
        "vlan_id": 200,
        "interface": "ge-0/0/5"
      }
    },
    "testscript": {
      "testname": "VLAN Configuration Test 2",
      "objective": "Verify VLAN configuration on port ge-0/0/5",
      "file_name": "vlan_test_2.py",
      "init_scripts": "pip install netmiko", 
      "script": """  
import netmiko

vlan_id = 200
interface = 'ge-0/0/5'  

device = {
  'device_type': 'juniper',
  'ip': '192.168.0.1',
  'username': 'testuser',
  'password': 'testpass' 
}

net_connect = netmiko.ConnectHandler(**device)

net_connect.enable()  

config_commands = [
  'set vlans ' + str(vlan_id) + ' vlan-id ' + str(vlan_id),
  'set interfaces ' + interface + ' unit 0 family ethernet-switching vlan members ' + str(vlan_id)
]

net_connect.send_config_set(config_commands)

print(net_connect.send_command('show vlans ' + str(vlan_id)))
print(net_connect.send_command('show interfaces ' + interface + ' extensive'))
  
net_connect.disconnect()
      """,
      "run_command": "python vlan_test_2.py",
      "expected_result": "VLAN 200 is configured on interface ge-0/0/5"
    }
  }
]
###ENDLIST###