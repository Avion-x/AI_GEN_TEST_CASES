 ###STARTLIST###
[
  {
    "testname": "Bootup Test 1", 
    "testcase": {
      "testname": "Bootup Test 1",
      "objective": "Validate successful bootup of MX480 device", 
      "steps": [
        "Verify POWER LED turns green after power on",
        "Verify SYSTEM LED turns green after bootup completion", 
        "No error messages on console"
      ],
      "test_data": {
        "device_model": "MX480",
        "port_count": "80" 
      }
    },
    "testscript": {
      "testname": "Bootup Test 1",
      "objective": "Script to validate successful MX480 bootup",
      "file_name": "test_bootup_1.py",
      "init_scripts": [
        "import unittest",
        "import telnetlib",
        "import time"
      ],
      "script": """
class TestMX480Bootup(unittest.TestCase):

  def test_bootup(self):
    tn = telnetlib.Telnet('192.168.0.1')
    tn.read_until(b'Loading ')
    time.sleep(60)
    self.assertIn(b'SYSTEM LED green', tn.read_very_eager())
    self.assertNotIn(b'Error', tn.read_very_eager())
    tn.close()
  """,
  
  "run_command": "python test_bootup_1.py",
  "expected_result": "OK"
    }
  },
  
  {
    "testname": "Bootup Test 2",
    "testcase": {
      "testname": "Bootup Test 2",
      "objective": "Validate hardware inventory after successful bootup",
      "steps": [
        "Show chassis hardware inventory", 
        "Verify expected number of RE, FPC, PICs" 
      ],
      "test_data": {
        "device_model": "MX480",
        "re_count": "2",
        "fpc_count": "4",
        "pic_count": "8"
      }
    },
    "testscript": {
      "testname": "Bootup Test 2", 
      "objective": "Script to validate MX480 hardware inventory",
      "file_name": "test_bootup_2.py",
      "init_scripts": [
        "import unittest", 
        "from jnpr.junos import Device"
      ],
      "script": """  
class TestMX480HwInventory(unittest.TestCase):

  def test_hw_inventory(self):
    dev = Device(host='192.168.0.1', user='netconf', password='password123')
    dev.open()
    hw_inventory = dev.rpc.get_chassis_inventory()
    dev.close()
  
    self.assertEqual(hw_inventory.xpath('re-count')[0].text, '2') 
    self.assertEqual(hw_inventory.xpath('fpc-count')[0].text, '4')
    self.assertEqual(hw_inventory.xpath('pic-count')[0].text, '8')
  """,
  
  "run_command": "python test_bootup_2.py",
  "expected_result": "OK"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
    { 
        "testname": "Port Mapping Verification",
        "testcase": {
            "objective": "Verify all ports on the MX481 device are correctly mapped and configured", 
            "steps": [
                "Retrieve port mapping configuration",
                "Verify all expected ports exist in configuration", 
                "Validate mappings match expected values"
            ],
            "test_data": {
                "expected_ports": ["ge-0/0/0", "ge-0/0/1", "ge-0/0/2"], 
                "expected_mappings": {"ge-0/0/0": "192.168.0.1", "ge-0/0/1": "192.168.0.2", "ge-0/0/2": "192.168.0.3"}
            }
        },
        "testscript": {
            "testname": "test_port_mapping",
            "objective": "Test port mappings on device match expected config",
            "file_name": "test_port_mapping.py",
            "init_scripts": ["pip install junos-eznc"],
            "script": \"\"\"
            import unittest
            from jnpr.junos import Device
            
            expected_ports = ${test_data['expected_ports']}
            expected_mappings = ${test_data['expected_mappings']}
            
            def test_port_mappings(dev):
                actual_ports = dev.cli('show interfaces terse')
                actual_mappings = dev.cli('show interfaces terse | display json')
                assert set(expected_ports) == set(actual_ports) 
                for port, ip in expected_mappings.items():
                    assert port in actual_mappings 
                    assert actual_mappings[port]['ip'] == ip
                
            dev = Device(host='192.168.0.5', user='test', password='Password123')
            dev.open()
            
            suite = unittest.TestSuite()
            suite.addTest(test_port_mappings(dev))
            
            runner = unittest.TextTestRunner()
            runner.run(suite)
            \"\"\"",
            "run_command": "python test_port_mapping.py",
            "expected_result": "OK"  
        }
    },
    {
        "testname": "Address Assignment Verification", 
        "testcase": {
            "objective": "Validate all interfaces have expected IP addresses assigned",
            "steps": [
                "Retrieve interface configurations", 
                "Extract assigned IP for each interface",
                "Verify IP matches expected value"
            ],
            "test_data": {
                "expected_assignments": {"ge-0/0/0": "192.168.0.1", "ge-0/0/1": "192.168.0.2"}
            }
        },
        "testscript": {
            "testname": "test_address_assignment",
            "objective": "Validate assigned IP addresses match expected values", 
            "file_name": "test_address_assignment.py",
            "init_scripts": ["pip install jnpr.junos"],
            "script": \"\"\"
            import unittest
            from jnpr.junos import Device
            
            expected_assignments = ${test_data['expected_assignments']}
            
            def test_address_assignment(dev):
                interfaces = dev.cli('show interfaces terse')
                for intf, expected_ip in expected_assignments.items():
                    actual_ip = interfaces[intf]['ip']
                    assert actual_ip == expected_ip
                    
            dev = Device(host='192.168.0.5', user='test', password='Password123')
            dev.open()
            
            suite = unittest.TestSuite()
            suite.addTest(test_address_assignment(dev))
            
            runner = unittest.TextTestRunner()
            runner.run(suite)
            \"\"\",
            "run_command": "python test_address_assignment.py",
            "expected_result": "OK"
        }
    }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Test Port Status", 
    "testcase": {
      "testname": "Test Port Status",
      "objective": "Verify all ports on the MX481 are up after boot", 
      "steps": [
        "Verify interface status shows all ports as up"
      ],
      "test_data": {
        "device_under_test": "MX481",
        "num_ports": 80
      }
    },
    "testscript": {
      "testname": "Test Port Status",
      "objective": "Verify all ports on the MX481 are up after boot",
      "file_name": "test_port_status.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install junos-eznc"
      ],
      "script": """
import netmiko
from jnpr.junos import Device

dev = Device(host='mx481', user='netconf', password='netconf')
dev.open()

interfaces = dev.rpc.get_interface_information()
for intf in interfaces:
  if intf.oper_status != 'up':
    raise Exception(f'Interface {intf.name} is down')

print('All interfaces are up')
      """,
      "run_command": "python test_port_status.py",
      "expected_result": "All interfaces are up"
    }
  },
  {
    "testname": "Test Interface Count",
    "testcase": {
      "testname": "Test Interface Count",
      "objective": "Verify MX481 has expected number of interfaces",
      "steps": [
        "Retrieve interface names from device", 
        "Verify number of interfaces matches expected count"
      ],
      "test_data": {
        "device_under_test": "MX481",
        "expected_interface_count": 80  
      }
    },
    "testscript": {
      "testname": "Test Interface Count", 
      "objective": "Verify MX481 has expected number of interfaces",
      "file_name": "test_interface_count.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install junos-eznc"
      ],
      "script": """  
import netmiko
from jnpr.junos import Device

dev = Device(host='mx481', user='netconf', password='netconf') 
dev.open()

interfaces = dev.rpc.get_interface_information()
interface_count = len(interfaces)

expected_count = 80
if interface_count != expected_count:
  raise Exception(f'Interface count {interface_count} does not match expected {expected_count}')

print(f'Verified {expected_count} interfaces')
      """,
      "run_command": "python test_interface_count.py",
      "expected_result": "Verified 80 interfaces" 
    }
  }
]
###ENDLIST###