 ###STARTLIST###
[
  {
    "testname": "Class-Based Traffic Management Test", 
    "testcase": {
      "testname": "Class-Based Traffic Management Test",
      "objective": "To verify class-based traffic management configuration on EX4300-32F device",
      "steps": [
        "Configure class-based traffic management policy", 
        "Associate policy with interface",
        "Verify configured bandwidth for class",
        "Verify latency configuration for class"
      ],
      "testdata": {
        "policy_name": "CBWFQ_POLICY",
        "class_name": "CRITICAL_TRAFFIC",
        "bandwidth": "50%",
        "latency": "10ms"  
      }
    },
    "testscript": {
      "testname": "Class-Based Traffic Management Test",
      "objective": "To verify class-based traffic management configuration on EX4300-32F device", 
      "file_name": "cb_traffic_test.py",
      "init_scripts": [
        "pip install jnpr.junos",
        "pip install paramiko"
      ],
      "script": """\"\"\"
This script tests class-based traffic management configuration on an EX4300-32F device.

It connects to the device, configures a class-based traffic management policy, 
associates it with an interface, and verifies the bandwidth and latency settings.

Expected result: Class-based traffic management policy should be configured successfully 
with expected bandwidth and latency settings.
\"\"\"

import jnpr.junos
from jnpr.junos import Device

# Connect to EX4300-32F device
dev = Device(host='192.168.1.1', user='test', password='Password123')
dev.open()

# Configure class-based traffic management policy
print('Configuring policy')
dev.config('set policy-options policy-statement CBWFQ_POLICY then class CRITICAL_TRAFFIC bandwidth 50% latency 10ms')

# Associate policy with interface
print('Associating policy with interface')  
dev.config('set interfaces ge-0/0/1 unit 0 family inet service-domain CBWFQ_POLICY')

# Verify configured bandwidth  
print('Verifying configured bandwidth')
bandwidth = dev.cli('show configuration policy-options | match CBWFQ_POLICY | match bandwidth')
if '50%' in bandwidth:
  print('Bandwidth 50% configured successfully')
else:
  print('Failed to configure expected bandwidth')
  
# Verify configured latency
print('Verifying configured latency')  
latency = dev.cli('show configuration policy-options | match CBWFQ_POLICY | match latency')
if '10ms' in latency:
  print('Latency 10ms configured successfully') 
else:
  print('Failed to configure expected latency')
  
# Close device connection  
dev.close()
""",
      "run_command": "python cb_traffic_test.py",
      "expected_result": "Class-based traffic management policy should be configured successfully with expected bandwidth and latency settings."
    }
  }
]
###ENDLIST###