 ###STARTLIST###

[
  {
    "testname": "Port Channel Creation Test",
    "testcase": {
      "testname": "Port Channel Creation Test", 
      "objective": "Verify Port Channel can be created and configured correctly",
      "steps": [
        "Configure Port Channel interface", 
        "Verify Port Channel interface is up/up",
        "Verify Port Channel configuration"
      ],
      "testdata": {
        "interface_name": "ae0",
        "member_interfaces": ["ge-0/0/1", "ge-0/0/2"] 
      }
    },
    "testscript": {
      "testname": "Port Channel Creation Test",
      "objective": "Python script to test Port Channel creation",
      "file_name": "test_po_creation.py",
      "init_scripts": "pip install netmiko",
      "script": """
      import netmiko
      
      def test_po_creation(interface_name, member_interfaces):
        
        device = {
          'device_type': 'juniper',
          'host': '192.168.0.1',
          'username': 'admin',
          'password': 'juniper123' 
        }
        
        net_connect = netmiko.ConnectHandler(**device)
        
        config_commands = [
          f'interfaces {interface_name} unit 0',
          'family ethernet-switching',
          f'members {member_interfaces}'
        ]
        
        net_connect.send_config_set(config_commands)
      
        print(net_connect.send_command("show interfaces terse"))
        
        net_connect.disconnect()
        
      test_po_creation(**testdata)
      """,
      "run_command": "python test_po_creation.py",
      "expected_result": "Port Channel interface ae0 status should be up/up"  
    }
  },

  {
    "testname": "Port Channel Member Addition Test",
    "testcase": {
      "testname": "Port Channel Member Addition Test",
      "objective": "Verify new member interfaces can be added to Port Channel",
      "steps": [
        "Add new member interface to Port Channel",
        "Verify new member comes up in Port Channel" 
      ],
      "testdata": {
        "interface_name": "ae0",
        "member_interfaces": ["ge-0/0/3"]
      }
    },
    "testscript": {
      "testname": "Port Channel Member Addition Test",
      "objective": "Python script to test adding new member to Port Channel",
      "file_name": "test_po_member_add.py", 
      "init_scripts": "pip install netmiko",
      "script": """
      import netmiko
      
      def test_po_member_add(interface_name, member_interfaces):
      
        device = {
          'device_type': 'juniper',
          'host': '192.168.0.1',
          'username': 'admin',
          'password': 'juniper123'
        }
        
        net_connect = netmiko.ConnectHandler(**device)
        
        config_commands = [
          f'interfaces {interface_name} unit 0',
          'family ethernet-switching',
          f'members {member_interfaces}' 
        ]
        
        net_connect.send_config_set(config_commands)
        
        print(net_connect.send_command("show interfaces terse"))
        
        net_connect.disconnect()
        
      test_po_member_add(**testdata)
      """,
      "run_command": "python test_po_member_add.py",
      "expected_result": "New member interface ge-0/0/3 should be up in Port Channel ae0"
    }
  },

  {
    "testname": "Port Channel Load Balancing Test",
    "testcase": {
      "testname": "Port Channel Load Balancing Test",
      "objective": "Verify traffic is load balanced across Port Channel member links",
      "steps": [
        "Generate test traffic destined to Port Channel interface",
        "Verify traffic is distributed across member links"  
      ],
      "testdata": {
        "interface_name": "ae0",
        "member_interfaces": ["ge-0/0/1", "ge-0/0/2", "ge-0/0/3"],
        "traffic_rate": "100 mbps",
        "duration": "60 seconds"
      } 
    },
    "testscript": {
      "testname": "Port Channel Load Balancing Test",
      "objective": "Python script to test Port Channel load balancing",
      "file_name": "test_po_load_balancing.py",
      "init_scripts": "pip install trafficgen",
      "script": """
      import trafficgen
      
      def test_po_load_balancing(interface_name, member_interfaces, traffic_rate, duration):
      
        traffic_gen = trafficgen.TrafficGen()
        traffic_gen.generate(dest_interface=interface_name, rate=traffic_rate, time=duration)
        
        for interface in member_interfaces:
          stats = traffic_gen.get_interface_stats(interface)
          tx_rate = stats['tx_rate']
          print(f"{interface} tx rate: {tx_rate}")
          
      test_po_load_balancing(**testdata)
      """,
      "run_command": "python test_po_load_balancing.py", 
      "expected_result": "Traffic should be distributed across all member links"
    }
  },

  {
    "testname": "Port Channel Failover Test",
    "testcase": {
      "testname": "Port Channel Failover Test",
      "objective": "Verify traffic fails over to remaining links when member link goes down",
      "steps": [
        "Generate test traffic destined to Port Channel",
        "Take down one member interface",
        "Verify traffic redistributes across remaining links"
      ],
      "testdata": {
        "interface_name": "ae0",
        "member_interfaces": ["ge-0/0/1", "ge-0/0/2", "ge-0/0/3"],
        "disabled_interface": "ge-0/0/1",
        "traffic_rate": "100 mbps",
        "duration": "60 seconds"  
      }
    },
    "testscript": {
      "testname": "Port Channel Failover Test",
      "objective": "Python script to test Port Channel failover",
      "file_name": "test_po_failover.py",
      "init_scripts": "pip install trafficgen",
      "script": """
      import trafficgen
      
      def test_po_failover(interface_name, member_interfaces, disabled_interface, traffic_rate, duration):
      
        traffic_gen = trafficgen.TrafficGen()
        traffic_gen.generate(dest_interface=interface_name, rate=traffic_rate, time=duration)
        
        traffic_gen.interface_down(disabled_interface)
        
        for interface in member_interfaces:
          if interface != disabled_interface:
            stats = traffic_gen.get_interface_stats(interface)
            tx_rate = stats['tx_rate']
            print(f"{interface} tx rate: {tx_rate}")
            
      test_po_failover(**testdata)
      """,
      "run_command": "python test_po_failover.py",
      "expected_result": "Traffic should redistribute to remaining operational links" 
    }
  }
]

###ENDLIST###