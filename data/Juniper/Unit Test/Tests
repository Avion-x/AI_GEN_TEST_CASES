 ###STARTLIST###
[
  {
    "testname": "Bootup Test 1 - Verify Bootup Completes", 
    "testcase": {
      "testname": "Bootup Test 1 - Verify Bootup Completes",
      "objective": "Verify the device boots up successfully and reaches operational state",
      "steps": [
        "Power on the device",
        "Verify the system POST completes successfully", 
        "Verify the system boots up to operational state"
      ],
      "test_data": {
        "device_type": "MX480",
        "os_version": "Junos 20.4R1"  
      }
    },
    "testscript": {
      "testname": "Bootup Test 1 - Verify Bootup Completes",
      "objective": "Automated script to verify bootup test passes",
      "file_name": "test_bootup1.py",
      "init_scripts": "pip install paramiko",
      "script": """
        import paramiko
        
        ip = '10.1.1.1'
        username = 'admin' 
        password = '123456'
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password)
        
        channel = client.invoke_shell()
        channel.send('cli\n')
        channel.send('show system status\n')
        output = channel.recv(10000)
        
        if 'Operational' in output.decode('utf-8'):
          print('Test Passed. System is operational.')
        else:
          print('Test Failed. System is not operational.')
          
        client.close()
      """,
      "run_command": "python test_bootup1.py",
      "expected_result": "Test Passed. System is operational."
    }
  },
  
  {
    "testname": "Bootup Test 2 - Verify Interfaces Up",
    "testcase": {
      "testname": "Bootup Test 2 - Verify Interfaces Up",
      "objective": "Verify all expected interfaces come up after bootup",
      "steps": [
        "Power on the device",
        "Verify bootup completes successfully",
        "Verify all expected interfaces are operationally up"   
      ],
      "test_data": {
        "device_type": "MX480",
        "os_version": "Junos 20.4R1",
        "interfaces": ["ge-0/0/0", "ge-0/0/1"] 
      }
    },
    "testscript": {
      "testname": "Bootup Test 2 - Verify Interfaces Up",
      "objective": "Automated script to verify interfaces up after boot",
      "file_name": "test_bootup2.py",
      "init_scripts": "pip install paramiko",
      "script": """
        import paramiko
        
        ip = '10.1.1.1'
        username = 'admin'
        password = '123456'
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password)
        
        channel = client.invoke_shell()
        channel.send('cli\n')
        channel.send('show interfaces terse\n')
        output = channel.recv(10000)
        
        interfaces = ['ge-0/0/0', 'ge-0/0/1']
        interface_status = {}
        
        for line in output.decode('utf-8').split('\\n'):
          words = line.split()
          if len(words) >= 1 and words[0] in interfaces:
            interface_status[words[0]] = words[1]
            
        failed = []
        
        for interface in interfaces:
          if interface_status[interface] != 'up':
            failed.append(interface)
            
        if len(failed) > 0:
          print('Test Failed. Interfaces down: ' + str(failed))
        else:
          print('Test Passed. All interfaces up.')
          
        client.close()
      """,
      "run_command": "python test_bootup2.py",  
      "expected_result": "Test Passed. All interfaces up."
    }
  }
]
###ENDLIST### Here are 2 unit test cases with Python test scripts for bootup process focusing on ports and address verification for Juniper's MX481 router:

###STARTLIST###
[
  {
    "testname": "Test Port mappings", 
    "testcase": {
      "testname": "Test Port mappings",
      "objective": "Verify all ports are mapped correctly during bootup", 
      "steps": [
        "Validate port ge-0/0/0 is mapped to address 192.168.1.1",
        "Validate port ge-0/0/1 is mapped to address 192.168.1.2", 
        "Validate port ge-1/0/0 is mapped to address 192.168.2.1"
      ],
      "test_data": {
        "ports": [
          {"name": "ge-0/0/0", "ip": "192.168.1.1"}, 
          {"name": "ge-0/0/1", "ip": "192.168.1.2"},
          {"name": "ge-1/0/0", "ip": "192.168.2.1"}
        ]  
      }
    },
    "testscript": {
      "testname": "Test Port mappings",
      "objective": "Verify all ports are mapped correctly during bootup",
      "file_name": "test_port_mappings.py",
      "init_scripts": [
        "pip install junos-eznc", 
        "pip install pytest"
      ],
      "script": """
        import json
        from jnpr.junos import Device

        test_data = json.load(open('test_data.json'))
        
        dev = Device(host='192.168.1.10', user='netconf', password='password')
        dev.open()
        
        for port in test_data['ports']:
          assert dev.cli(f'show interfaces {port["name"]}').find(port['ip']) != -1
        dev.close()
      """,
      "run_command": "python test_port_mappings.py",
      "expected_result": "All tests should pass"  
    }
  },

  {
    "testname": "Test IP address verification",
    "testcase": {
      "testname": "Test IP address verification",
      "objective": "Verify all interfaces have correct IP addresses after bootup",
      "steps": [
        "Validate interface ge-0/0/0 has IP 192.168.1.1", 
        "Validate interface ge-0/0/1 has IP 192.168.1.2",
        "Validate interface ge-1/0/0 has IP 192.168.2.1"
      ],  
      "test_data": {
        "interfaces": [
          {"name": "ge-0/0/0", "ip": "192.168.1.1"},
          {"name": "ge-0/0/1", "ip": "192.168.1.2"},
          {"name": "ge-1/0/0", "ip": "192.168.2.1"}
        ]
      }
    },
    "testscript": {
      "testname": "Test IP address verification",
      "objective": "Verify all interfaces have correct IP addresses after bootup",
      "file_name": "test_ip_verification.py",
      "init_scripts": [
        "pip install junos-eznc",
        "pip install pytest"  
      ],
      "script": """
        import json
        from jnpr.junos import Device
        
        test_data = json.load(open('test_data.json'))
        
        dev = Device(host='192.168.1.10', user='netconf', password='password')
        dev.open()
        
        for intf in test_data['interfaces']:
          assert dev.cli(f'show interfaces {intf["name"]}').find(intf['ip']) != -1
        dev.close()
      """,
      "run_command": "python test_ip_verification.py",
      "expected_result": "All tests should pass"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Test Port Status During Bootup", 
    "testcase": {
      "testname": "Test Port Status During Bootup",
      "objective": "Verify all ports on the MX481 are down during bootup process", 
      "steps": [
        "1. Power on the MX481",
        "2. Check status of all ports and verify they are down"
      ],
      "test_data": {
        "device_under_test": "Juniper MX481",
        "number_of_ports": "48",
        "expected_port_status": "down"  
      }
    },
    "testscript": {
      "testname": "Test Port Status During Bootup",
      "objective": "Verify all ports on the MX481 are down during bootup process",
      "file_name": "test_port_status.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install jinja2"
      ],
      "script": \"\"\"
        import netmiko
        from jinja2 import Template
        
        device = {
          'device_type': 'juniper_junos',
          'host': 'mx481_mgmt_ip',
          'username': 'testuser',
          'password': 'test123'
        }
        
        connection = netmiko.ConnectHandler(**device)
        
        port_status = connection.send_command('show interfaces terse')
        
        down_ports = 0
        for line in port_status.splitlines():
          if 'down' in line:
            down_ports += 1
            
        assert down_ports == 48, "Not all ports are down during bootup"
      \"\"\",
      "run_command": "python test_port_status.py",
      "expected_result": "All 48 ports are down during bootup"
    }
  },
  
  {
    "testname": "Test Port Operational Status",
    "testcase": {
      "testname": "Test Port Operational Status",
      "objective": "Verify all ports on MX481 are operationally up after bootup completes",
      "steps": [
        "1. Allow MX481 to complete bootup process",
        "2. Check operational status of all ports and verify they are up" 
      ],
      "test_data": {
        "device_under_test": "Juniper MX481",
        "number_of_ports": "48",
        "expected_port_status": "up"
      }
    },
    "testscript": {
      "testname": "Test Port Operational Status",
      "objective": "Verify all ports on MX481 are operationally up after bootup completes", 
      "file_name": "test_port_op_status.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install jinja2"
      ],
      "script": \"\"\"
        import netmiko
        
        device = {
          'device_type': 'juniper_junos',
          'host': 'mx481_mgmt_ip',
          'username': 'testuser',
          'password': 'test123'
        }
        
        connection = netmiko.ConnectHandler(**device)
        
        port_status = connection.send_command('show interfaces terse')
        
        up_ports = 0
        for line in port_status.splitlines():
          if 'up' in line:
            up_ports += 1
            
        assert up_ports == 48, "Not all ports are operationally up after bootup"
      \"\"\",
      "run_command": "python test_port_op_status.py",
      "expected_result": "All 48 ports are operationally up after bootup"
    }
  }
]
###ENDLIST###