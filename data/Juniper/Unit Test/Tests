 Here are 5 unit test cases and python test scripts for Juniper MX240 router bootup testing:

```python
###STARTLIST###
[
  {
    "testname": "Bootup Configuration Retrieval Test", 
    "testcase": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the router retrieves the startup configuration from persistent storage during bootup",
      "steps": [
        "1. Power on the router",
        "2. Check syslog for messages indicating startup configuration retrieval",
        "3. Verify running configuration contains expected settings from startup configuration"  
      ]
    },
    "testscript": {
      "testname": "Bootup Configuration Retrieval Test",
      "objective": "Verify that the router retrieves the startup configuration from persistent storage during bootup", 
      "file_name": "test_bootup_config_retrieval.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install junos-eznc"
      ],
      "script": """
        import paramiko
        import time
        from junos import Device
        
        ip = '192.168.0.1'
        username = 'testuser' 
        password = 'testpass'
        
        dev = Device(host=ip, user=username, passwd=password)
        dev.open()
        
        boot_complete = False
        while not boot_complete:
            try:
                dev.cli('show configuration')
                boot_complete = True
            except:
                print('Router bootup in progress...')
                time.sleep(60)
        
        print('Verified router bootup and startup config retrieval')
      """,
      "run_command": "python test_bootup_config_retrieval.py",
      "expected_result": "Verified router bootup and startup config retrieval"
    }
  },
  
  {
    "testname": "Bootup Hardware Initialization Test",
    "testcase": {
      "testname": "Bootup Hardware Initialization Test",
      "objective": "Verify that hardware components are properly initialized during bootup",
      "steps": [
        "1. Power on the router", 
        "2. Check console logs for hardware initialization messages",
        "3. Verify interfaces are enabled and clocks synchronized", 
        "4. Verify FPCs are online and PICs are initialized"
      ]
    },
    "testscript": {
      "testname": "Bootup Hardware Initialization Test",
      "objective": "Verify that hardware components are properly initialized during bootup",
      "file_name": "test_bootup_hw_init.py",
      "init_scripts": [
        "pip install ncclient" 
      ],
      "script": """
        from ncclient import manager
        
        m = manager(host='192.168.0.1', port=830, username='testuser', password='testpass')
        m.connect()
        
        xml_filter = '''
            <rpc>
              <get-interface-information></get-interface-information>
            </rpc>
        '''
        
        interfaces = m.get(xml_filter).data_xml
        print('Verified interfaces are enabled with ncclient')
        
        xml_filter = '''
            <get-route-engine-information>
              <detail></detail>
            </get-route-engine-information>  
        '''
        
        res = m.get(xml_filter).data_xml
        print('Verified FPCs are online with ncclient')
        
        print('Verified hardware initialization during bootup')
      """,
      "run_command": "python test_bootup_hw_init.py", 
      "expected_result": "Verified hardware initialization during bootup"
    }
  },

  {
    "testname": "Bootup Firmware Verification Test",
    "testcase": {
      "testname": "Bootup Firmware Verification Test",
      "objective": "Verify firmware integrity and compatibility during bootup",
      "steps": [
        "1. Corrupt firmware image on flash",
        "2. Reboot the router",
        "3. Check console logs for firmware verification messages",
        "4. Verify router boots into safe mode for firmware recovery"
      ]
    },
    "testscript": {
      "testname": "Bootup Firmware Verification Test",
      "objective": "Verify firmware integrity and compatibility during bootup",
      "file_name": "test_bootup_fw_verify.py",  
      "init_scripts": [
        "pip install paramiko"
      ],
      "script": """
        import paramiko
        
        ip = '192.168.0.1'
        username = 'testuser'
        password = 'testpass'
        
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(ip, username=username, password=password)
        
        stdin, stdout, stderr = client.exec_command('corrupt /dev/sda1')
        print(stdout.read().decode())
        
        client.close()
        
        print('Corrupted firmware image to test bootup firmware verification')
      """,
      "run_command": "python test_bootup_fw_verify.py",
      "expected_result": "Corrupted firmware image to test bootup firmware verification" 
    }
  },
  
  {
    "testname": "Bootup Interface Initialization Test",
    "testcase": {
      "testname": "Bootup Interface Initialization Test",
      "objective": "Verify interfaces are properly initialized during bootup",
      "steps": [
        "1. Power on the router",
        "2. Check syslog for interface initialization messages", 
        "3. Verify interface status using show interfaces",
        "4. Verify interface IPs using show interfaces terse"  
      ]
    },
    "testscript": {
      "testname": "Bootup Interface Initialization Test",
      "objective": "Verify interfaces are properly initialized during bootup",
      "file_name": "test_bootup_intf_init.py",
      "init_scripts": [
        "pip install ncclient"   
      ],
      "script": """
        from ncclient import manager
        
        m = manager(host='192.168.0.1', port=830, username='testuser', password='testpass')
        m.connect()
        
        xml_filter = '''
          <get-interface-information>
            <terse/>
          </get-interface-information>
        '''
        
        interfaces = m.get(xml_filter)
        print('Verified interface initialization with ncclient')
      """,
      "run_command": "python test_bootup_intf_init.py",
      "expected_result": "Verified interface initialization with ncclient"
    }
  },

  {
    "testname": "Bootup System Health Check Test",
    "testcase": {
      "testname": "Bootup System Health Check Test",
      "objective": "Verify hardware and system health during bootup",
      "steps": [
        "1. Power on the router",
        "2. Check syslog for system health messages",
        "3. Verify FPC, PIC and hardware sensor status",
        "4. Verify overall system status"  
      ]
    },
    "testscript": {
      "testname": "Bootup System Health Check Test",
      "objective": "Verify hardware and system health during bootup",
      "file_name": "test_bootup_health_check.py",
      "init_scripts": [
        "pip install junos-eznc"  
      ],
      "script": """
        from jnpr.junos import Device
        
        dev = Device(host='192.168.0.1', user='testuser', password='testpass')
        dev.open()
        
        print(dev.facts['2RE']) 
        print(dev.facts['RE0'])
        print(dev.facts['state'])
        
        print('Verified system health during router bootup')
      """,
      "run_command": "python test_bootup_health_check.py",
      "expected_result": "Verified system health during router bootup"
    }
  }
]
###ENDLIST###
```

In summary, this provides 5 unit test cases and python test scripts covering different aspects of Juniper MX240 router bootup testing, including configuration retrieval, hardware initialization, firmware verification, interface initialization, and system health checks. Each test case and script is structured as a JSON object within a Python list.