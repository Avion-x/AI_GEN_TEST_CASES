 ###STARTLIST###
[
  {
    "testname": "Test Inline Tap Interface Connectivity", 
    "testcase": {
      "testname": "Test Inline Tap Interface Connectivity",
      "objective": "Verify that the inline tap interfaces are connected and forwarding traffic as expected",
      "steps": [
        "Configure inline tap interfaces on MX483", 
        "Connect a traffic generator to inline tap source interface",
        "Connect inline tap destination interface to a packet capture device or monitoring tool",
        "Generate test traffic that matches inline tap filter criteria",
        "Verify tap traffic is received on monitoring device" 
      ],
      "test_data": {
        "mx483_management_ip": "10.1.1.1",
        "inline_tap_interfaces": ["ge-0/0/1", "ge-0/0/2"], 
        "test_traffic": {
          "src_ip": "10.10.10.1", 
          "dst_ip": "10.10.10.2",
          "l4_proto": "TCP",
          "src_port": 1234,
          "dst_port": 80
        }
      }
    },

    "testscript": {
      "testname": "Test Inline Tap Interface Connectivity",
      "objective": "Verify that the inline tap interfaces are connected and forwarding traffic as expected", 
      "file_name": "test_inline_tap.py",
      "init_scripts": [
        "pip install scapy",
        "pip install paramiko"
      ],
      "script": \"\"\"
import paramiko
from scapy.all import *

# Load test data
mx483_ip = ###test_data['mx483_management_ip']###
tap_ints = ###test_data['inline_tap_interfaces']###
test_traffic = ###test_data['test_traffic']###

# Connect to MX483 CLI 
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(mx483_ip, username='admin', password='admin123')

# Configure inline tap interfaces
for int in tap_ints:
  ssh.exec_command(f'set interfaces {int} unit 0 family inet filter input-tap-filter')

# Generate test traffic
pkt = IP(src=test_traffic['src_ip'], dst=test_traffic['dst_ip'])/TCP(sport=test_traffic['src_port'], dport=test_traffic['dst_port'])
send(pkt, count=10)

# Verify traffic received on monitoring device
# ...

ssh.close()
\"\"\",

      "run_command": "python test_inline_tap.py",
      "expected_result": "Test traffic successfully captured on monitoring device"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Inline Tap Interface Connectivity Test 1", 
    "testcase": {
      "testname": "Inline Tap Interface Connectivity Test 1",
      "objective": "Verify connectivity between inline tap interfaces on MX483",
      "steps": [
        "Configure inline tap interfaces on MX483", 
        "Ping between inline tap interfaces to verify connectivity",
        "Check interface counters to validate traffic flow"
      ],
      "test_data": {
        "mx483_mgmt_ip": "192.168.0.1",
        "tap_ints": ["ge-0/0/1", "ge-0/0/2"]  
      }
    },
    "testscript": {
      "testname": "Inline Tap Connectivity Test 1",
      "objective": "Verify connectivity between inline tap interfaces on MX483",
      "file_name": "inline_tap_test_1.py",
      "init_scripts": [
        "pip install jnpr.junos",
        "pip install jnpr.junos.utils.config"
      ],
      "script": """
        from jnpr.junos import Device
        from jnpr.junos.utils.config import Config

        dev = Device(host='192.168.0.1', user='python', password='py123')
        dev.open()
        
        cfg = Config(dev)
        cfg.load('set interfaces ge-0/0/1 unit 0 family inet address 10.1.1.1/24', format='set')
        cfg.load('set interfaces ge-0/0/2 unit 0 family inet address 10.2.1.1/24', format='set')
        cfg.commit()
        
        print('Pinging between interfaces...')
        dev.cli('ping 10.2.1.1 source 10.1.1.1 rapid count 10')
        
        print('Checking interface counters...')
        int1_stats = dev.rpc.get_interface_information(interface_name='ge-0/0/1')
        int2_stats = dev.rpc.get_interface_information(interface_name='ge-0/0/2')
        
        if int1_stats.findtext('interface-information/physical-interface/traffic-statistics/input-packets') > 0:
            print('Traffic flowing on ge-0/0/1')
        if int2_stats.findtext('interface-information/physical-interface/traffic-statistics/output-packets') > 0: 
            print('Traffic flowing on ge-0/0/2')
              
        dev.close()
      """,
      "run_command": "python inline_tap_test_1.py",
      "expected_result": "Connectivity between inline tap interfaces validated."
    }
  },
  
  {
    "testname": "Inline Tap Interface Connectivity Test 2",
    "testcase": {
      "testname": "Inline Tap Interface Connectivity Test 2",
      "objective": "Verify connectivity and mappings between inline tap interfaces configured on different units",
      "steps": [
        "Configure inline tap interfaces on different units of a port on MX483",
        "Ping between inline tap interfaces to verify connectivity", 
        "Confirm interfaces mapped to expected units" 
      ],
      "test_data": {
        "mx483_mgmt_ip": "192.168.0.1",
        "tap_ints": ["ge-0/0/10", "ge-0/0/10"]
      }
    },
    "testscript": {
      "testname": "Inline Tap Connectivity Test 2",
      "objective": "Verify connectivity between inline tap interfaces on different units", 
      "file_name": "inline_tap_test_2.py",
      "init_scripts": [
        "pip install jnpr.junos",
        "pip install jnpr.junos.utils.config"
      ],
      "script": """
        from jnpr.junos import Device
        from jnpr.junos.utils.config import Config

        dev = Device(host='192.168.0.1', user='python', password='py123')
        dev.open()
        
        cfg = Config(dev)
        cfg.load('set interfaces ge-0/0/10 unit 0 family inet address 10.1.1.1/24', format='set')
        cfg.load('set interfaces ge-0/0/10 unit 1 family inet address 10.2.1.1/24', format='set')
        cfg.commit()
        
        print('Pinging between interfaces...')
        dev.cli('ping 10.2.1.1 source 10.1.1.1 rapid count 10')
        
        print('Checking interface mappings...')
        int1_info = dev.rpc.get_interface_information(interface_name='ge-0/0/10')
        int1_unit = int1_info.findtext('physical-interface/logical-interface/name')
        
        if int1_unit == 'ge-0/0/10.0':
            print('ge-0/0/10 unit 0 mapped correctly')
            
        int2_info = dev.rpc.get_interface_information(interface_name='ge-0/0/10') 
        int2_unit = int2_info.findtext('physical-interface/logical-interface/name')
        
        if int2_unit == 'ge-0/0/10.1':
            print('ge-0/0/10 unit 1 mapped correctly')

        dev.close()
      """,
      "run_command": "python inline_tap_test_2.py",
      "expected_result": "Connectivity and mappings of inline tap interfaces validated."
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Connectivity Test Port 1", 
    "testcase": {
      "testname": "Connectivity Test Port 1",
      "objective": "Verify connectivity on port 1 of the Juniper MX483", 
      "steps": [
        "Connect a traffic generator to port 1", 
        "Send traffic at 1Gbps",
        "Verify port 1 receives traffic at line rate without drops"
      ],
      "test_data": {
        "port_num": 1,
        "traffic_rate": "1Gbps"
      }
    },
    "testscript": {
      "testname": "Connectivity Test Port 1",
      "objective": "Script to test connectivity on port 1",
      "file_name": "port1_connectivity.py",
      "init_scripts": [
        "pip install trafficgen",
        "pip install junos-eznc"
      ],
      "script": """
import trafficgen
import jnpr.junos

dev = jnpr.junos.Device(host='1.1.1.1', user='netconf', password='pwd')
dev.open()

tg = trafficgen.TrafficGen()
tg.connect('1.1.1.1')
tg.reset() 
tg.set_rate(1Gbps)
tg.start_traffic(port='1/1/1')

stats = dev.rpc.get_interface_optics_diagnostics_optics_time_interval(interface_name='ge-1/1/1')
print(stats)

tg.stop_traffic()
      """,
      "run_command": "python port1_connectivity.py", 
      "expected_result": "No drops detected on port 1"
    }
  },

  {
    "testname": "Connectivity Test Port 16",
    "testcase": {
      "testname": "Connectivity Test Port 16", 
      "objective": "Verify connectivity on port 16 of the Juniper MX483",
      "steps": [
        "Connect a traffic generator to port 16",
        "Send traffic at 10Gbps", 
        "Verify port 16 receives traffic at line rate without drops"
      ],
      "test_data": {
        "port_num": 16,
        "traffic_rate": "10Gbps"  
      }
    },
    "testscript": {
      "testname": "Connectivity Test Port 16",
      "objective": "Script to test connectivity on port 16",
      "file_name": "port16_connectivity.py",
      "init_scripts": [
        "pip install trafficgen",
        "pip install junos-eznc"
      ],
      "script": """
import trafficgen 
import jnpr.junos

dev = jnpr.junos.Device(host='1.1.1.1', user='netconf', password='pwd')
dev.open()

tg = trafficgen.TrafficGen()
tg.connect('1.1.1.1')
tg.reset()
tg.set_rate(10Gbps)
tg.start_traffic(port='1/1/16')

stats = dev.rpc.get_interface_optics_diagnostics_optics_time_interval(interface_name='ge-1/1/16')
print(stats)

tg.stop_traffic()
    """,
    "run_command": "python port16_connectivity.py",
    "expected_result": "No drops detected on port 16"
    }
  }
]
###ENDLIST###