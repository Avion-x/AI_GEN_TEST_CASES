 ###STARTLIST###
[
  {
    "testname": "Inline Tap Interface Connectivity - MX483", 
    "testcase": {
      "testname": "Inline Tap Interface Connectivity - MX483",
      "objective": "Verify inline tap interface connectivity between MX483 devices",
      "steps": [
        "Configure inline tap interfaces on MX483 devices", 
        "Ping inline tap interfaces between MX483 devices",
        "Verify connectivity between inline tap interfaces"
      ],
      "test_data": {
        "mx483_device_ips": ["192.168.1.1", "192.168.1.2"],
        "inline_tap_interfaces": ["ge-0/0/1", "ge-0/0/2"]
      }
    },
    "testscript": {
      "testname": "Inline Tap Interface Connectivity Test",
      "objective": "Test inline tap interface connectivity between MX483 devices",
      "file_name": "inline_tap_test.py",
      "init_scripts": [
        "pip install juniper-netconify",
        "pip install paramiko"
      ],
      "script": """
import juniper_netconify
import paramiko

DEVICE_IPS = test_data['mx483_device_ips'] 
INLINE_INTFS = test_data['inline_tap_interfaces']

# Initialize netconify connections
connections = []
for ip in DEVICE_IPS:
  conn = juniper_netconify.Netconify(ip)
  connections.append(conn)

# Configure inline tap interfaces  
for conn in connections:
  config = []
  for intf in INLINE_INTFS:
    config.append(f'set interfaces {intf} unit 0 family ethernet-switching interface-mode access')

  conn.config(config)

# Test connectivity between inline tap interfaces
for conn1,conn2 in zip(connections, connections[1:] + [connections[0]]):
  conn1.cli(f'ping {conn2.facts["hostname"]} interface {INLINE_INTFS[0]} count 5')

print("Success: Inline tap interface connectivity verified")
      """,
      "run_command": "python inline_tap_test.py",
      "expected_result": "Success: Inline tap interface connectivity verified"
    }
  },

  {
    "testname": "Inline Tap Interface Monitoring - MX483",
    "testcase": {
      "testname": "Inline Tap Interface Monitoring - MX483",
      "objective": "Verify monitoring of inline tap interfaces between MX483 devices",
      "steps": [ 
        "Configure inline tap interfaces on MX483 devices",
        "Configure port mirroring for inline tap interfaces",
        "Verify monitored traffic being captured on inline tap interfaces" 
      ],
      "test_data": {
        "mx483_device_ips": ["192.168.1.1", "192.168.1.2"], 
        "inline_tap_interfaces": ["ge-0/0/1", "ge-0/0/2"],
        "source_interfaces": ["ge-0/0/10", "ge-0/0/11"]  
      }
    },
    "testscript": {
      "testname": "Inline Tap Interface Monitoring Test",
      "objective": "Test monitoring of inline tap interfaces between MX483 devices",
      "file_name": "inline_tap_monitor_test.py",
      "init_scripts": [
        "pip install juniper-netconify",
        "pip install paramiko",
        "pip install scapy"
      ],
      "script": """  
import juniper_netconify 
import paramiko
from scapy.all import *

DEVICE_IPS = test_data['mx483_device_ips']
INLINE_INTFS = test_data['inline_tap_interfaces']
SRC_INTFS = test_data['source_interfaces']

# Initialize netconify connections
connections = []
for ip in DEVICE_IPS:
  conn = juniper_netconify.Netconify(ip)
  connections.append(conn)  

# Configure inline tap interfaces
for conn in connections:
  config = []
  for intf in INLINE_INTFS:
    config.append(f'set interfaces {intf} unit 0 family ethernet-switching interface-mode access')

  conn.config(config)

# Configure port mirroring  
for conn,src_intf in zip(connections,SRC_INTFS):
  conn.cli(f'set forwarding-options port-mirroring input {src_intf}')

# Verify monitored traffic on inline tap interfaces
pkt = Ether()/IP()/TCP()/"TestPacket"
sendp(pkt, iface=SRC_INTFS[0])

rcvd_pkt = sniff(iface=INLINE_INTFS[0], count=1, timeout=5)

if pkt == rcvd_pkt[0]:
  print("Success: Traffic mirrored to inline tap interface") 
else:
  print("Failed: Traffic not mirrored to inline tap interface")
      """,
      "run_command": "python inline_tap_monitor_test.py", 
      "expected_result": "Success: Traffic mirrored to inline tap interface"
    }
  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Inline Tap Port Connectivity Test", 
    "testcase": {
      "testname": "Inline Tap Port Connectivity Test",
      "objective": "Verify connectivity between Juniper MX inline tap ports",
      "steps": [
        "Configure inline tap ports on MX", 
        "Verify mappings between tap and physical ports",
        "Send traffic between physical interfaces",
        "Verify tap interface receives copied traffic"
      ],
      "test_data": {
        "tap_ports": ["ge-0/0/1", "ge-0/0/2"], 
        "physical_ports": ["ge-0/0/5", "ge-0/0/6"],
        "addresses": ["192.168.1.1", "192.168.1.2"]  
      }
    },

    "testscript": {
      "testname": "Inline Tap Port Connectivity Test",
      "objective": "Verify connectivity between Juniper MX inline tap ports", 
      "file_name": "tap_port_test.py",
      "init_scripts": [
        "pip install netmiko",
        "pip install paramiko"
      ],
      "script": \"\"\"
        import netmiko
        
        device = {
          'device_type': 'juniper',
          'ip': '192.168.1.10',
          'username': 'admin',
          'password': 'Juniper!123' 
        }
        
        net_connect = netmiko.ConnectHandler(**device)
        
        # Configure inline tap ports
        config_commands = [
          'set interfaces ge-0/0/1 unit 0 family ethernet-switching interface-mode trunk',
          'set interfaces ge-0/0/2 unit 0 family ethernet-switching interface-mode trunk',
          'set interfaces ge-0/0/1 tap',
          'set interfaces ge-0/0/2 tap' 
        ]
        
        output = net_connect.send_config_set(config_commands)
        
        # Verify port mappings
        show_command = 'show interfaces terse'
        output = net_connect.send_command(show_command)
        
        assert 'ge-0/0/1.0' in output
        assert 'ge-0/0/2.0' in output
        
        # Send pings between physical ports
        src_ip = '192.168.1.1' 
        dest_ip = '192.168.1.2'
        
        ping_command = f'ping {dest_ip} source {src_ip}'
        output = net_connect.send_command(ping_command)
        
        # Verify tap interface receives traffic
        show_command = 'monitor traffic interface ge-0/0/1.0' 
        output = net_connect.send_command(show_command)
        
        assert src_ip in output
        assert dest_ip in output
        
        print('Inline tap port connectivity test passed!')
        \"\"\",

      "run_command": "python tap_port_test.py",
      "expected_result": "Inline tap port connectivity test passed!"
    }
  },

  {
    "testname": "Inline Tap Address Reachability Test",
    "testcase": {
      "testname": "Inline Tap Address Reachability Test",
      "objective": "Verify reachability between devices connected to inline tap ports",
      "steps": [
        "Configure inline tap ports on MX",
        "Configure logical interfaces with IPs on tap ports",
        "Verify connectivity between logical interfaces" 
      ],
      "test_data": {
        "tap_ports": ["ge-0/0/1", "ge-0/0/2"],
        "addresses": ["192.168.1.1/24", "192.168.1.2/24"]
      }
    },
    
    "testscript": {
      "testname": "Inline Tap Address Reachability Test",
      "objective": "Verify reachability between devices connected to inline tap ports",
      "file_name": "tap_address_test.py",
      "init_scripts": [ 
        "pip install netmiko",
        "pip install paramiko"
      ],
      "script": \"\"\"
        import netmiko
        
        device = {
          'device_type': 'juniper',
          'ip': '192.168.1.10',
          'username': 'admin',
          'password': 'Juniper!123'
        }
        
        net_connect = netmiko.ConnectHandler(**device)
        
        # Configure inline tap ports        
        config_commands = [
          'set interfaces ge-0/0/1 unit 0 family ethernet-switching interface-mode trunk',
          'set interfaces ge-0/0/2 unit 0 family ethernet-switching interface-mode trunk',
          'set interfaces ge-0/0/1 tap',
          'set interfaces ge-0/0/2 tap'
        ]
        
        net_connect.send_config_set(config_commands)
        
        # Configure logical interfaces
        config_commands = [
          'set interfaces ge-0/0/1 unit 0 family inet address 192.168.1.1/24',
          'set interfaces ge-0/0/2 unit 0 family inet address 192.168.1.2/24' 
        ]
        
        net_connect.send_config_set(config_commands)
        
        # Verify connectivity between logical interfaces
        ping_command = 'ping 192.168.1.2 source 192.168.1.1'
        output = net_connect.send_command(ping_command)
        
        assert '!!!!!' in output
        
        print('Inline tap address reachability test passed!')
        \"\"\",
        
      "run_command": "python tap_address_test.py",
      "expected_result": "Inline tap address reachability test passed!"
    }

  }
]
###ENDLIST### ###STARTLIST###
[
  {
    "testname": "Inline Tap Connectivity Test", 
    "testcase": {
      "testname": "Inline Tap Connectivity Test",
      "objective": "Verify connectivity between inline tap ports on MX483 device",
      "steps": [
        "Connect traffic generator to inline tap port 1", 
        "Connect traffic analyzer to inline tap port 2",
        "Send traffic from generator",
        "Verify traffic received on analyzer"
      ],
      "test_data": {
        "generator_ip": "10.1.1.1",
        "analyzer_ip": "10.2.1.1",
        "inline_tap_ports": [
          {"name": "ge-0/0/1", "vlan": 100},
          {"name": "ge-0/0/2", "vlan": 100}
        ]  
      }
    },
    "testscript": {
      "testname": "Inline Tap Connectivity Test",
      "objective": "Verify connectivity between inline tap ports on MX483 device using Python script", 
      "file_name": "inline_tap_test.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": """
        import paramiko
        import netmiko
        
        generator_ip = '10.1.1.1'
        analyzer_ip = '10.2.1.1'
        
        inline_tap_ports = [
          {'name': 'ge-0/0/1', 'vlan': 100},
          {'name': 'ge-0/0/2', 'vlan': 100}  
        ]
        
        def connect_generator(ip):
          # Code to connect and configure generator
          
          print('Generator configured')
          
        def connect_analyzer(ip):
          # Code to connect and configure analyzer
          
          print('Analyzer configured')
          
        def send_traffic():
          # Code to send traffic from generator
          
          print('Traffic sent from generator')
        
        def verify_traffic():
          # Code to verify traffic received on analyzer
          
          print('Traffic received on analyzer')
          
        connect_generator(generator_ip)
        connect_analyzer(analyzer_ip)
        
        send_traffic()
        
        verify_traffic()
      """,
      "run_command": "python inline_tap_test.py",
      "expected_result": "Traffic sent from generator. Traffic received on analyzer."
    }
  },
  
  {
    "testname": "Inline Tap Port Isolation Test",
    "testcase": {
      "testname": "Inline Tap Port Isolation Test",
      "objective": "Verify traffic isolation between inline tap ports on MX483 device",
      "steps": [
        "Connect traffic generator to inline tap port 1",
        "Connect traffic analyzer to inline tap port 2",
        "Send traffic from generator on vlan 100",  
        "Verify no traffic received on analyzer on vlan 200"
      ],
      "test_data": {
        "generator_ip": "10.1.1.1",  
        "analyzer_ip": "10.2.1.1",
        "inline_tap_ports": [
          {"name": "ge-0/0/1", "vlan": 100},
          {"name": "ge-0/0/2", "vlan": 200}
        ]
      }
    },
    "testscript": {
      "testname": "Inline Tap Port Isolation Test",
      "objective": "Verify traffic isolation between inline tap ports using Python script",
      "file_name": "inline_tap_isolation_test.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"  
      ],
      "script": """
        import paramiko
        import netmiko
        
        generator_ip = '10.1.1.1'
        analyzer_ip = '10.2.1.1'
        
        inline_tap_ports = [
          {'name': 'ge-0/0/1', 'vlan': 100},
          {'name': 'ge-0/0/2', 'vlan': 200}
        ]
        
        def connect_generator(ip):
          # Code to connect and configure generator
          
          print('Generator configured')
          
        def connect_analyzer(ip):
          # Code to connect and configure analyzer
          
          print('Analyzer configured')
          
        def send_traffic(vlan):
          # Code to send traffic from generator on specified vlan
          
          print(f'Traffic sent from generator on vlan {vlan}')
          
        def verify_traffic(vlan):
          # Code to verify traffic received on analyzer on specified vlan
          
          print(f'No traffic received on analyzer on vlan {vlan}')
        
        connect_generator(generator_ip)
        connect_analyzer(analyzer_ip)
        
        send_traffic(100)
          
        verify_traffic(200)
      """,
      "run_command": "python inline_tap_isolation_test.py",
      "expected_result": "Generator configured. Analyzer configured. Traffic sent from generator on vlan 100. No traffic received on analyzer on vlan 200."
    }
  }
]
###ENDLIST###