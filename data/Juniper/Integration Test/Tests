 ###STARTLIST###
[
  {
    "testname": "ECMP Load Balancing Test 1", 
    "testcase": {
      "testname": "ECMP Load Balancing Test 1",
      "objective": "Verify ECMP load balancing across 6 member links in LAG bundle",
      "steps": [
        "1. Configure 6 member links in LAG bundle", 
        "2. Verify ECMP load balancing across all 6 links through packet capture"
      ],
      "testdata": {
        "mx_device": "mx480",
        "lag_interfaces": ["ge-0/0/0", "ge-0/0/1", "ge-0/0/2", "ge-0/0/3", "ge-0/0/4", "ge-0/0/5"],
        "ecmp_group": 1
      }
    },
    "testscript": {
      "testname": "ECMP Load Balancing Test 1",
      "objective": "Verify ECMP load balancing across 6 member links in LAG bundle", 
      "file_name": "test_ecmp_lb_1.py",
      "init_scripts": [
        "pip install paramiko",
        "pip install netmiko"
      ],
      "script": \"\"\"
        import json
        from netmiko import ConnectHandler
        
        # Load test data
        testdata = ###testdata###
        
        # Connect to DUT
        mx_device = {
          'device_type': 'juniper',
          'host': '192.168.0.1',
          'username': 'testuser',
          'password': 'test123'
        }
        net_connect = ConnectHandler(**mx_device)
        
        # Configure LAG bundle
        config_commands = [
          'set interfaces ge-0/0/0 ether-options 802.3ad ' + str(testdata['ecmp_group']),
          'set interfaces ge-0/0/1 ether-options 802.3ad ' + str(testdata['ecmp_group']),
          # And so on for other interfaces
        ]
        net_connect.send_config_set(config_commands)
        
        # Execute ping test
        output = net_connect.send_command('ping 8.8.8.8 repeat 20')
        
        # Verify packet counters increment across all interfaces
        for intf in testdata['lag_interfaces']:
          pkt_count = net_connect.send_command('show interfaces ' + intf + ' extensive | match "Input packets"')
          assert int(pkt_count) > 0
          
        print("ECMP Load Balancing Verified Successfully")
        
        net_connect.disconnect()
      \"\"\",
      "run_command": "python test_ecmp_lb_1.py",
      "expected_result": "ECMP Load Balancing Verified Successfully"
    }
  },
  
  {
    "testname": "ECMP Load Balancing Test 2",
    "testcase": {
      "testname": "ECMP Load Balancing Test 2",  
      "objective": "Verify ECMP load balancing with UDP traffic",
      "steps": [
        "1. Generate UDP traffic to DUT",
        "2. Verify packet counters increment across all ECMP paths" 
      ],
      "testdata": {
        "mx_device": "mx480",
        "ecmp_paths": ["ge-0/0/0", "ge-0/0/1"], 
        "udp_src_ip": "192.168.1.1",
        "udp_dest_ip": "192.168.1.2",
        "udp_count": 1000,
        "udp_src_port": 5000
      }
    },
    "testscript": {
      "testname": "ECMP Load Balancing Test 2",
      "objective": "Verify ECMP load balancing with UDP traffic",
      "file_name": "test_ecmp_lb_2.py",
      "init_scripts": [ 
        "pip install scapy"
      ],
      "script": \"\"\"
        from scapy.all import *
        
        # Load test data
        testdata = ###testdata###
        
        # Generate UDP packets
        packets = []
        for i in range(testdata['udp_count']):
          packet = IP(src=testdata['udp_src_ip'],dst=testdata['udp_dest_ip'])/UDP(sport=testdata['udp_src_port'],dport=80)
          packets.append(packet)
            
        # Send UDP packets    
        send(packets)
        
        # Connect to DUT and verify counters
        # Steps similar to test 1
          
        print("ECMP Load Balancing with UDP Verified Successfully")
        
      \"\"\",
      "run_command": "sudo python test_ecmp_lb_2.py", 
      "expected_result": "ECMP Load Balancing with UDP Verified Successfully"
    }
  }  
]
###ENDLIST###