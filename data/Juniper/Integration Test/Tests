 ###STARTLIST###
[
    {
        "testname": "ECMP Verify Upstream Usage", 
        "testcase": {
            "testname": "ECMP Verify Upstream Usage",
            "objective": "Verify ECMP load balances traffic across upstream interfaces",
            "steps": [
                "Configure ECMP with 2 upstream interfaces", 
                "Send traffic to router under test",
                "Verify traffic is load balanced across both upstream interfaces"
            ],
            "test_data": {
                "upstream_interfaces": ["ge-0/0/1", "ge-0/0/2"],
                "expected_distribution": 50
            }
        },
        "testscript": {
            "testname": "ECMP Verify Upstream Usage",
            "objective": "Automated test to verify ECMP upstream interface usage",
            "file_name": "test_ecmp_upstream.py",
            "init_scripts": [
                "pip install pynet",
                "pip install statistics"
            ],
            "script": \"\"\"
                import pynet
                import statistics
                
                upstream_ifs = test_data['upstream_interfaces']
                router = pynet.Device(host='192.168.1.1', username='pynet', password='pynet')
                router.open()
                
                for intf in upstream_ifs:
                    intf.send_traffic()
                    
                traffic_counters = []
                for intf in upstream_ifs:
                    counters = intf.get_counters()
                    traffic_counters.append(counters['tx_packets'])
                    
                actual_distribution = statistics.stdev(traffic_counters)
                expected_distribution = test_data['expected_distribution']
                
                assert actual_distribution == expected_distribution, "Traffic not evenly distributed"
            \"\"\",
            "run_command": "python test_ecmp_upstream.py",
            "expected_result": "Traffic evenly distributed across upstream interfaces"            
        }
    },
    {
        "testname": "ECMP Upstream Failure",
        "testcase": {
            "testname": "ECMP Upstream Failure",
            "objective": "Verify ECMP fails over to available upstream interface on failure",
            "steps": [
                "Configure ECMP with 2 upstream interfaces",
                "Send traffic to router under test",
                "Verify traffic on both upstream interfaces", 
                "Shutdown one upstream interface",
                "Verify traffic only on remaining upstream interface"
            ],
            "test_data": {
                "upstream_interfaces": ["ge-0/0/1", "ge-0/0/2"]
            }
        },
        "testscript": {
            "testname": "ECMP Upstream Failure", 
            "objective": "Automated test for ECMP upstream failure scenario",
            "file_name": "test_ecmp_failure.py",
            "init_scripts": [
                "pip install pynet"
            ],
            "script": \"\"\"
                import pynet
                
                upstream_ifs = test_data['upstream_interfaces']
                router = pynet.Device(host='192.168.1.1', username='pynet', password='pynet')
                router.open()
                
                for intf in upstream_ifs:
                    intf.send_traffic()
                    assert intf.get_counters()['tx_packets'] > 0
                
                router.interface(upstream_ifs[0]).shutdown()
                
                assert upstream_ifs[1].get_counters()['tx_packets'] > 0
                assert upstream_ifs[0].get_counters()['tx_packets'] == 0
            \"\"\",
            "run_command": "python test_ecmp_failure.py",
            "expected_result": "Traffic fails over to available upstream interface on failure"
        }
    }
]
###ENDLIST###